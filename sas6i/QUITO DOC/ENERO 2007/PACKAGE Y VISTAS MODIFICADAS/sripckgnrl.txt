 IS

/* Valida si existen comprobantes con facturas duplicadas */
PROCEDURE VALIDAR_FCT_DUPLICADAS
 (CEMPCODIGO IN VARCHAR2
 ,CPERIODO IN VARCHAR2
 ,MES IN NUMBER
 ,ANIO IN NUMBER
 ,FECHA_FINAL IN DATE
 );


/* Conforma las Ventas, Notas de Débito y Notas de Crédito en ventas */
PROCEDURE CONFORMAR_VENTAS_NC_ND
 (CEMPCOD IN VARCHAR2
 ,CPERIODO IN VARCHAR2
 ,NMES IN NUMBER
 ,NANIO IN NUMBER
 )
 IS
I NUMBER;
CCODIGO_IVA VARCHAR2(2);
VALIDADOR NUMBER(2);
VFECHA DATE;
NNUM NUMBER(9);
VEXISTE_ERRORES VARCHAR2(1);
-- Este proceso crea las ventas, notas de débito y notas de crédito
-- que van a ser declaradas al SRI, los datos son tomados de una vista
BEGIN
DECLARE
ERRORES_VENTAS EXCEPTION;
PRAGMA EXCEPTION_INIT(ERRORES_VENTAS,-20200);
CURSOR cVentas_NC_ND IS -- Cursor de ventas, notas de débito y notas de crédito
SELECT * 
FROM VENTAS_SRI
WHERE EMP_CODIGO = cEmpCod AND
      FECHA>=TO_DATE('28/12/2006 13:30','dd/mm/yyyy hh24:mi') and
      FECHA<TO_DATE('31/01/2007 13:30','dd/mm/yyyy hh24:mi');
-- AQUI CAMBIAR
--      TO_NUMBER(TO_CHAR(FECHA,'MM')) = nMES AND
--      TO_NUMBER(TO_CHAR(FECHA,'YYYY'))=nANIO;
TYPE tVntSri  IS TABLE OF VENTAS_NC_ND_SRI%ROWTYPE INDEX BY BINARY_INTEGER;
CURSOR cVentasSRIRtn  IS
SELECT VNCNDSRI.IVA_EMP_CODIGO,VNCNDSRI.IVA_PERIODO,VNCNDSRI.NUMERO,
       SUBSTR(VSRI.CONCEPTO_RF,1,3) CONCEPTO_RF,
       TRUNC(VSRI.CODIGO_RETENCION_FUENTE,1) CODIGO_RETENCION_FUENTE,
       ROUND(VSRI.BASE_IMPONIBLE_RENTA,2) BASE_IMPONIBLE_RENTA,
       ROUND(VSRI.MONTO_RETENCION_FUENTE,2) MONTO_RETENCION_FUENTE
     FROM VENTAS_SRI_RETENCIONES VSRI,VENTAS_NC_ND_SRI VNCNDSRI
     WHERE VSRI.EMP_CODIGO  = cEmpCod AND
          TO_NUMBER(TO_CHAR(VSRI.FECHA,'MM')) = nMES AND
          TO_NUMBER(TO_CHAR(VSRI.FECHA,'YYYY'))=nANIO AND
          VSRI.MONTO_RETENCION_FUENTE > 0 AND    
          VSRI.MONTO_RETENCION_FUENTE > 0 AND    
          VNCNDSRI.IVA_EMP_CODIGO=VSRI.EMP_CODIGO AND
          VNCNDSRI.IVA_PERIODO=cPeriodo AND
          VNCNDSRI.FECHA_EMISION=VSRI.FECHA AND
--          VNCNDSRI.IDENTIFICACION_CLN=VSRI.NRO_ID_DOCUMENTO AND
          VNCNDSRI.SECUENCIA_COMPROBANTE=VSRI.SECUENCIA_COMPROBANTE;
rVntSri tVntSri; -- Tabla en donde se guardan los datos antes de insertar
BEGIN
   GNRL.ESCRIBIR_ERRORES('000000');
   i:=1;
   vEXISTE_ERRORES := 'F';
   VFECHA:= ROUND(TO_DATE('16/'||TO_CHAR(NMES)||'/'||TO_CHAR(NANIO),'DD/MM/YYYY'),'MM')-1;      
   BEGIN
      SELECT CODIGO INTO cCODIGO_IVA
      FROM TABLAS_DE_REFERENCIAS
      WHERE CODIGO_TABLA = 'TABLA4' AND
            FECHA_VALIDEZ_DESDE <= vFecha AND
            FECHA_VALIDEZ_HASTA IS NOT NULL AND
            FECHA_VALIDEZ_HASTA >= vFecha;
   EXCEPTION
   WHEN OTHERS THEN
      BEGIN
         SELECT CODIGO INTO cCODIGO_IVA
         FROM TABLAS_DE_REFERENCIAS
         WHERE CODIGO_TABLA = 'TABLA4' AND
               FECHA_VALIDEZ_DESDE <= vFecha AND
               FECHA_VALIDEZ_HASTA IS NULL; 
      EXCEPTION
      WHEN OTHERS THEN         
         QMS$ERRORS.SHOW_MESSAGE('SRI-00002','Porcentaje de IVA');
      END;
   END;  
   QMS$ERRORS.SHOW_DEBUG_INFO('Va ha iniciar el proceso'); 
-- PRIMERO CREAMOS LA VENTAS CON LAS RETENCIONES DEL IVA SI LAS TIENE
   FOR rVentas_NC_ND IN cVentas_NC_ND LOOP
      QMS$ERRORS.SHOW_DEBUG_INFO('Va ha validar datos');
--      VALIDADOR:= 1;
      VALIDADOR:= GNRL.Validar_Datos_Sri('VT',rVentas_NC_ND.FECHA,rVentas_NC_ND.NRO_ID_DOCUMENTO,
                                           rVentas_NC_ND.CODIGO_TIPO_COMPROBANTE,rVentas_NC_ND.FECHA,
                                           NULL,NULL,NULL,NULL,NULL,'00',NULL,NULL,NULL,NULL,'E');      
      QMS$ERRORS.SHOW_DEBUG_INFO('El resultado de validación es '||TO_CHAR(VALIDADOR));
      IF VALIDADOR > 0 THEN
         rVntSri(i).IVA_EMP_CODIGO:=cEmpCod;
         rVntSri(i).IVA_PERIODO:=cPeriodo;     
         rVntSri(i).TIPO_TRANSACCION := LPAD(TO_CHAR(VALIDADOR),2,'0');
         IF VALIDADOR=5 THEN
           rVntSri(i).IDENTIFICACION_CLN:=SUBSTR(rVentas_NC_ND.NRO_ID_DOCUMENTO,1,10);
         ELSE
           rVntSri(i).IDENTIFICACION_CLN:=rVentas_NC_ND.NRO_ID_DOCUMENTO;
         END IF;
         rVntSri(i).CODIGO_TIPO_COMPROBANTE:=rVentas_NC_ND.CODIGO_TIPO_COMPROBANTE;
         rVntSri(i).FECHA_EMISION:=TRUNC(TRUNC(rVentas_NC_ND.FECHA,'MM')+31,'MM')-1;
--         rVntSri(i).FECHA_EMISION:=rVentas_NC_ND.FECHA;
         rVntSri(i).SECUENCIA_COMPROBANTE :=rVentas_NC_ND.SECUENCIA_COMPROBANTE;
         rVntSri(i).ID_CREDITO_GASTO:='00';
         rVntSri(i).BASE_IMPONIBLE_IVA:=rVentas_NC_ND.BASE_TARIFA_IVA;
         rVntSri(i).CODIGO_TARIFA_IVA:=cCODIGO_IVA;
         IF rVentas_NC_ND.BASE_TARIFA_CERO>=0 THEN
           rVntSri(i).BASE_IMPONIBLE_CERO:=rVentas_NC_ND.BASE_TARIFA_CERO;
         ELSE
           rVntSri(i).BASE_IMPONIBLE_CERO:=0;
         END IF;
         rVntSri(i).IVA:=rVentas_NC_ND.IVA;   
         rVntSri(i).BASE_IMPONIBLE_ICE:=rVentas_NC_ND.BASE_TARIFA_ICE;
         rVntSri(i).CODIGO_TARIFA_ICE:=TO_CHAR(rVentas_NC_ND.CODIGO_PORCENTAJE_ICE);
         rVntSri(i).ICE:=rVentas_NC_ND.ICE;
         rVntSri(i).MONTO_IVA_BIENES:=rVentas_NC_ND.TARIFA_IVA_BIENES;
         rVntSri(i).CODIGO_IVA_BIENES:=TO_CHAR(rVentas_NC_ND.CODIGO_RETENCION_IVA_BIENES);
         rVntSri(i).IVA_BIENES:=rVentas_NC_ND.RETENCION_IVA_BIENES;
         rVntSri(i).MONTO_IVA_SERVICIOS:=rVentas_NC_ND.TARIFA_IVA_SERVICIOS;
         rVntSri(i).CODIGO_IVA_SERVICIOS:=TO_CHAR(rVentas_NC_ND.CODIGO_RETENCION_IVA_SERVICIOS);
         rVntSri(i).IVA_SERVICIOS:=rVentas_NC_ND.RETENCION_IVA_SERVICIOS;
         rVntSri(i).RET_PRESUNTIVA:=rVentas_NC_ND.RETENCION_PRESUNTIVA;
      ELSE
         vEXISTE_ERRORES := 'V';
      END IF;
      i:=i+1;
   END LOOP;
   IF vEXISTE_ERRORES = 'V' THEN
     QMS$ERRORS.SHOW_DEBUG_INFO('Existen Errores');
     QMS_TRANSACTION_MGT.CLOSE_TRANSACTION(QMS_TRANSACTION_MGT.get_trans_opened_by);
     COMMIT;
     QMS$ERRORS.SHOW_MESSAGE('SRI-00009','Ventas');
   ELSE
  -- AHORA SI NO HA HABIDO NINGUN ERROR CREAMOS LAS Ventas
     begin
     FOR I IN 1..rVntSri.COUNT LOOP
       SELECT VNTSRI_SEQ.NEXTVAL INTO nNum
       FROM DUAL;                      
       INSERT INTO Ventas_NC_ND_SRI (IVA_EMP_CODIGO,IVA_PERIODO,NUMERO,TIPO_TRANSACCION,       
                                   IDENTIFICACION_CLN,CODIGO_TIPO_COMPROBANTE,FECHA_EMISION,          
                                   SECUENCIA_COMPROBANTE,ID_CREDITO_GASTO,IVA_PRESUNTIVO,
                                   BASE_IMPONIBLE_IVA,CODIGO_TARIFA_IVA,BASE_IMPONIBLE_CERO,
                                   IVA,CANTIDAD,USUARIO,SISTEMA_GENERA,BASE_IMPONIBLE_ICE,
                                   CODIGO_TARIFA_ICE,ICE,MONTO_IVA_BIENES,CODIGO_IVA_BIENES,
                                   IVA_BIENES,MONTO_IVA_SERVICIOS,CODIGO_IVA_SERVICIOS,
                                   IVA_SERVICIOS,RET_PRESUNTIVA)
       VALUES (rVntSri(i).IVA_EMP_CODIGO,rVntSri(i).IVA_PERIODO,nNum,
             rVntSri(i).TIPO_TRANSACCION,rVntSri(i).IDENTIFICACION_CLN,
             rVntSri(i).CODIGO_TIPO_COMPROBANTE,rVntSri(i).FECHA_EMISION,
             rVntSri(i).SECUENCIA_COMPROBANTE,LPAD(rVntSri(i).ID_CREDITO_GASTO,2,'0'),
             'N',rVntSri(i).BASE_IMPONIBLE_IVA,rVntSri(i).CODIGO_TARIFA_IVA,
             rVntSri(i).BASE_IMPONIBLE_CERO,rVntSri(i).IVA,1,USER,'FCT',
             rVntSri(i).BASE_IMPONIBLE_ICE,rVntSri(i).CODIGO_TARIFA_ICE,
             rVntSri(i).ICE,rVntSri(i).MONTO_IVA_BIENES,rVntSri(i).CODIGO_IVA_BIENES,
             rVntSri(i).IVA_BIENES,rVntSri(i).MONTO_IVA_SERVICIOS,
             rVntSri(i).CODIGO_IVA_SERVICIOS,rVntSri(i).IVA_SERVICIOS,
             rVntSri(i).RET_PRESUNTIVA);
     END LOOP;
     exception
  WHEN OTHERS THEN
    QMS$ERRORS.UNHANDLED_EXCEPTION ('Falló en el procedimiento CONFORMAR_VENTAS_NC_ND por error en ventas_nc_nd_sri '||SQLERRM);
     end;
-- AHORA CREAMOS LAS RETENCIONES EN LA FUENTE DEL SRI   
   END IF;
   FOR rVntSRIRtn IN cVentasSRIRtn LOOP
       INSERT INTO RETENCIONES_VENTAS_SRI 
              (VNTSRI_IVA_EMP_CODIGO,VNTSRI_IVA_PERIODO,VNTSRI_NUMERO,CODIGO_RF,
               BASE_IMPONIBLE_RF,PORCENTAJE_RF,VALOR_RETENIDO_RF)
       VALUES (rVntSRIRtn.IVA_EMP_CODIGO,rVntSRIRtn.IVA_PERIODO,rVntSRIRtn.NUMERO,
               rVntSRIRtn.CONCEPTO_RF,rVntSRIRtn.BASE_IMPONIBLE_RENTA ,
               rVntSRIRtn.CODIGO_RETENCION_FUENTE ,
               rVntSRIRtn.MONTO_RETENCION_FUENTE);
   END LOOP;
--   COMMIT;
EXCEPTION
  WHEN ERRORES_Ventas THEN
     RAISE;
  WHEN OTHERS THEN
    QMS$ERRORS.UNHANDLED_EXCEPTION ('Falló en el procedimiento CONFORMAR_VENTAS_NC_ND por error retenciones ventas'||SQLERRM);
END;
END CONFORMAR_VENTAS_NC_ND;

/* Conforma las retenciones por Impuesto a la Renta por Relación de Depen */
PROCEDURE CONFORMAR_IMP_RENTA_RDP
 (CEMPCOD IN VARCHAR2
 ,NANIO IN NUMBER
 )
 IS

I NUMBER;
VALIDADOR NUMBER(2);
-- Este proceso crea las retenciones de los empleados por relación de dependencia
BEGIN
DECLARE
CURSOR cRetFnt IS -- Cursor de RETENCIONES EN LA FUENTE POR RELACION DE DEPENDENCIA
SELECT *
FROM RDEP_SRI
WHERE EMP_CODIGO = cEmpCod AND
      PERIODO = TO_CHAR(nANIO);
TYPE tRreldep  IS TABLE OF RETENCIONES_RELACION_DEPENDENC%ROWTYPE INDEX BY BINARY_INTEGER;
rRreldep tRreldep; -- Tabla en donde se guardan los datos antes de insertar
BEGIN
   i:=1;
   QMS$ERRORS.SHOW_DEBUG_INFO('Va ha iniciar el proceso');
   FOR rRetFnt IN cRetFnt LOOP
      VALIDADOR :=GNRL.Validar_Ruc_Y_Cedula(rRetFnt.IDENTIFICACION);
      rRreldep(i).RTNFNT_EMP_CODIGO := cEmpCod;
      rRreldep(i).RTNFNT_ANIO := nAnio;
      rRreldep(i).RTNFNT_TIPO := 'R';
      rRreldep(i).IDENTIFICACION_EMP := rRetFnt.IDENTIFICACION;
      rRreldep(i).TIPO_IDENTIFICACION:= TO_CHAR(VALIDADOR);
      rRreldep(i).EMPLEADO:= rRetFnt.EMPLEADO;
      rRreldep(i).DIRECCION_CALLE:= NVL(SUBSTR(rRetFnt.DIRECCION,1,20),'.');
      rRreldep(i).DIRECCION_NUMERO := rRetFnt.NUMERO_DIRECCION;
      rRreldep(i).CIUDAD := SUBSTR(rRetFnt.CIUDAD,1,20);
      rRreldep(i).PROVINCIA:=rRetFnt.PROVINCIA;
      rRreldep(i).TELEFONO:=NVL(SUBSTR(rRetFnt.TELEFONO,1,9),'0');
      rRreldep(i).SISTEMA_SALARIO_NETO:=rRetFnt.SISTEMA_SALARIO;
      rRreldep(i).INGRESOS_LIQUIDOS:=rRetFnt.INGRESOS_LIQUIDOS;
      rRreldep(i).APORTE_IESS:=rRetFnt.APORTE_PERSONAL_IESS;
      rRreldep(i).BASE_IMPONIBLE:=rRetFnt.BASE_IMPONIBLE;
      rRreldep(i).VALOR_RETENCION:=rRetFnt.VALOR_RETENIDO;
      rRreldep(i).NUMERO_RETENCIONES :=rRetFnt.NUMERO_RETENCIONES;
      i:=i+1;
   END LOOP;
-- AHORA SI NO HA HABIDO NINGUN ERROR CREAMOS LAS Retenciones
   FOR I IN 1..rRreldep.COUNT LOOP
      INSERT INTO RETENCIONES_RELACION_DEPENDENC(RTNFNT_EMP_CODIGO,RTNFNT_ANIO,RTNFNT_TIPO,
                                                IDENTIFICACION_EMP,TIPO_IDENTIFICACION,EMPLEADO,DIRECCION_CALLE,
                                                DIRECCION_NUMERO,CIUDAD,PROVINCIA,TELEFONO,SISTEMA_SALARIO_NETO,
                                                INGRESOS_LIQUIDOS,APORTE_IESS,BASE_IMPONIBLE,VALOR_RETENCION,
                                                NUMERO_RETENCIONES,USUARIO,SISTEMA_GENERA)
      VALUES (rRreldep(i).RTNFNT_EMP_CODIGO,rRreldep(i).RTNFNT_ANIO,rRreldep(i).RTNFNT_TIPO,
              LPAD(rRreldep(i).IDENTIFICACION_EMP,10,'0'),rRreldep(i).TIPO_IDENTIFICACION,rRreldep(i).EMPLEADO,
              rRreldep(i).DIRECCION_CALLE,rRreldep(i).DIRECCION_NUMERO,rRreldep(i).CIUDAD,
              rRreldep(i).PROVINCIA,rRreldep(i).TELEFONO,rRreldep(i).SISTEMA_SALARIO_NETO,
              rRreldep(i).INGRESOS_LIQUIDOS,rRreldep(i).APORTE_IESS,rRreldep(i).BASE_IMPONIBLE,
              rRreldep(i).VALOR_RETENCION,rRreldep(i).NUMERO_RETENCIONES,USER,'RDP');
   END LOOP;
   COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    QMS$ERRORS.UNHANDLED_EXCEPTION ('Falló en el procedimiento CONFORMAR_IMP_RENTA_RDP por error '||SQLERRM);
END;
END;
/* Valida si existen comprobantes con facturas duplicadas */
PROCEDURE VALIDAR_FCT_DUPLICADAS
 (CEMPCODIGO IN VARCHAR2
 ,CPERIODO IN VARCHAR2
 ,MES IN NUMBER
 ,ANIO IN NUMBER
 ,FECHA_FINAL IN DATE
 )
 IS

TEXTO_ERROR VARCHAR2(1000);
CMP_TIPO VARCHAR2(240);
CMP_CLAVE VARCHAR2(240);
-- Valida que no existan las mismas facturas en otros comprobantes
   CURSOR CMP_DUPLICADOS IS  -- Cursor de facturas dupliacadas
   SELECT CODIGO_TIPO_COMPROBANTE,IDENTIFICACION_PRV,SERIE_COMPROBANTE,
            SECUENCIA_COMPROBANTE,COUNT(*)
   FROM COMPRAS_NC_ND_SRI
   WHERE   IVA_EMP_CODIGO = CEMPCODIGO AND
           IVA_PERIODO = CPERIODO AND
           FECHA_CONTABLE BETWEEN TO_DATE('01'||'/'||TO_CHAR(MES)||'/'||TO_CHAR(ANIO),'DD/MM/YYYY') AND FECHA_FINAL
   GROUP BY  CODIGO_TIPO_COMPROBANTE,IDENTIFICACION_PRV,SERIE_COMPROBANTE,SECUENCIA_COMPROBANTE
   HAVING  COUNT(*) > 1;

   CURSOR CMPAFE_DUPLICADOS IS  -- Cursor de facturas afectadas duplicadas
   SELECT CODIGO_TIPO_COMPROBANTE,FECHA_EMISION,SERIE_COMPROBANTE,
          SECUENCIA_COMPROBANTE,AUTORIZACION_SRI,COUNT(*)
   FROM DETALLES_COMPROBANTES_AFECTADO
   WHERE CMPNCNDSRI_IVA_EMP_CODIGO = CEMPCODIGO AND
         CMPNCNDSRI_IVA_PERIODO    = CPERIODO
   GROUP BY CODIGO_TIPO_COMPROBANTE,FECHA_EMISION,SERIE_COMPROBANTE,
            SECUENCIA_COMPROBANTE,AUTORIZACION_SRI
   HAVING  COUNT(*) > 1;
BEGIN
      TEXTO_ERROR:= NULL;
      FOR RCMP_DUPLICADOS IN CMP_DUPLICADOS LOOP
         BEGIN
            DECLARE CURSOR COMPROBANTES IS -- Cursor de comprobantes en donde se duplican las facturas
               SELECT CMP_TIPO,CMP_CLAVE
               FROM COMPRAS_NC_ND_SRI
               WHERE CODIGO_TIPO_COMPROBANTE = RCMP_DUPLICADOS.CODIGO_TIPO_COMPROBANTE AND
                     IDENTIFICACION_PRV = RCMP_DUPLICADOS.IDENTIFICACION_PRV  AND
                     SERIE_COMPROBANTE = RCMP_DUPLICADOS.SERIE_COMPROBANTE AND
                     SECUENCIA_COMPROBANTE =  RCMP_DUPLICADOS.SECUENCIA_COMPROBANTE;
            BEGIN
               FOR RCOMPROBANTES IN COMPROBANTES LOOP
                  TEXTO_ERROR:= TEXTO_ERROR||' '||RCOMPROBANTES.CMP_TIPO||' '||TO_CHAR(RCOMPROBANTES.CMP_CLAVE);
               END LOOP;
            END;
         END;
      END LOOP;
      IF TEXTO_ERROR IS NOT NULL THEN
         QMS$ERRORS.SHOW_MESSAGE('SRI-00018',TEXTO_ERROR);
      END IF;
      TEXTO_ERROR:= NULL;
      FOR RCMPAFE_DUPLICADOS IN CMPAFE_DUPLICADOS LOOP
        BEGIN
            DECLARE CURSOR COMP_AFECTADOS IS -- Cursor de comprobantes en donde se duplican las facturas
               SELECT C.CMP_TIPO,C.CMP_CLAVE
               FROM DETALLES_COMPROBANTES_AFECTADO D,COMPRAS_NC_ND_SRI C
               WHERE D.CODIGO_TIPO_COMPROBANTE = RCMPAFE_DUPLICADOS.CODIGO_TIPO_COMPROBANTE AND
                     D.FECHA_EMISION = RCMPAFE_DUPLICADOS.FECHA_EMISION AND
                     D.SERIE_COMPROBANTE = RCMPAFE_DUPLICADOS.SERIE_COMPROBANTE AND
                     D.SECUENCIA_COMPROBANTE = RCMPAFE_DUPLICADOS.AUTORIZACION_SRI AND
                     D.CMPNCNDSRI_IVA_EMP_CODIGO = C.IVA_EMP_CODIGO AND
                     D.CMPNCNDSRI_IVA_PERIODO = C.IVA_PERIODO;
            BEGIN
               FOR RCOMP IN COMP_AFECTADOS LOOP
                  TEXTO_ERROR:= TEXTO_ERROR||' '||RCOMP.CMP_TIPO||' '||TO_CHAR(RCOMP.CMP_CLAVE);
               END LOOP;
            END;
         END;
      END LOOP;
      IF TEXTO_ERROR IS NOT NULL THEN
         QMS$ERRORS.SHOW_MESSAGE('SRI-00019',TEXTO_ERROR);
      END IF;
   EXCEPTION
     WHEN OTHERS THEN
     QMS$ERRORS.UNHANDLED_EXCEPTION ('Fallo en el procedimiento VALIDAR_FCT_DUPLICADAS por error '||SQLERRM);
   END;
/* Conforma las retenciones por Otros Conceptos de Retenciones en la Fuen */
PROCEDURE CONFORMAR_IMP_RENTA_OCR
 (CEMPCOD IN VARCHAR2
 ,NANIO IN NUMBER
 )
 IS

I NUMBER;
NNUM NUMBER(6);
VALIDADOR NUMBER(2);
-- Este proceso crea las retenciones en la fuente
BEGIN
DECLARE
CURSOR cRetFnt IS -- Cursor de Retenciones
SELECT *
FROM REOC_SRI
WHERE EMP_CODIGO = cEmpCod AND
      SUBSTR(FECHA,4,4) = TO_CHAR(nANIO);
TYPE tReoc IS TABLE OF OTROS_TIPOS_RETENCIONES%ROWTYPE INDEX BY BINARY_INTEGER;
rReoc tReoc; -- Tabla en donde se guardan los datos antes de insertar
BEGIN
   i:=1;
   QMS$ERRORS.SHOW_DEBUG_INFO('Va ha iniciar el proceso');
   FOR rRetFnt IN cRetFnt LOOP
      VALIDADOR :=GNRL.Validar_Ruc_Y_Cedula(rRetFnt.IDENTIFICACION,'RF');
      rReoc(i).RTNFNTSRI_EMP_CODIGO := cEmpCod;
      rReoc(i).RTNFNTSRI_ANIO := nAnio;
      rReoc(i).RTNFNTSRI_TIPO := 'O';
      rReoc(i).IDENTIFICACION_RET := rRetFnt.IDENTIFICACION;
      rReoc(i).TIPO_IDENTIFICACION:= VALIDADOR;
      rReoc(i).PROVEEDOR:= rRetFnt.RETENIDO_A;
      rReoc(i).TPORTN_CODIGO := rRetFnt.CODIGO;
      rReoc(i).BASE_IMPONIBLE:=rRetFnt.BASE_IMPONIBLE;
      rReoc(i).VALOR_RETENIDO:=rRetFnt.VALOR_RETENIDO;
      rReoc(i).FECHA_RETENCION := TO_DATE(rRetFnt.FECHA,'MM/YYYY');
      QMS$ERRORS.SHOW_DEBUG_INFO('La fecha original es' ||rRetFnt.FECHA||'la transformada es'||TO_CHAR(rReoc(i).FECHA_RETENCION,'MM/YYYY'));
      rReoc(i).NUMERO_RETENCIONES :=rRetFnt.NUMERO_RETENCIONES;
      i:=i+1;
   END LOOP;
-- AHORA SI NO HA HABIDO NINGUN ERROR CREAMOS LAS Retenciones
   FOR I IN 1..rReoc.COUNT LOOP
      SELECT RETFNTOTR_SEQ.NEXTVAL INTO nNum
      FROM DUAL;
      QMS$ERRORS.SHOW_DEBUG_INFO('El contador es'||TO_CHAR(I));
      INSERT INTO OTROS_TIPOS_RETENCIONES(RTNFNTSRI_EMP_CODIGO,RTNFNTSRI_ANIO,RTNFNTSRI_TIPO,NUMERO,
                                          IDENTIFICACION_RET,TIPO_IDENTIFICACION,TPORTN_CODIGO,
                                          PROVEEDOR,BASE_IMPONIBLE,VALOR_RETENIDO,FECHA_RETENCION,
                                          NUMERO_RETENCIONES,USUARIO,SISTEMA_GENERA)
      VALUES (rReoc(i).RTNFNTSRI_EMP_CODIGO,rReoc(i).RTNFNTSRI_ANIO,rReoc(i).RTNFNTSRI_TIPO,nNum,
              LPAD(rReoc(i).IDENTIFICACION_RET,13,'0'),rReoc(i).TIPO_IDENTIFICACION,
              rReoc(i).TPORTN_CODIGO,rReoc(i).PROVEEDOR,rReoc(i).BASE_IMPONIBLE,rReoc(i).VALOR_RETENIDO,
              rReoc(i).FECHA_RETENCION,rReoc(i).NUMERO_RETENCIONES,USER,'CNT');
   END LOOP;
   COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    QMS$ERRORS.UNHANDLED_EXCEPTION ('Falló en el procedimiento CONFORMAR_IMP_RENTA_OCR por error '||SQLERRM);
END;
END;
/* Permite validar el detalle de comprobantes afectados por N/C y N/D */
FUNCTION VALIDAR_DC
 (CEMPCODIGO IN VARCHAR2
 ,CIDPRV IN VARCHAR2
 ,CCODTIPOCMP IN VARCHAR2
 ,DFECHA IN DATE
 ,CSERIECMP IN VARCHAR2
 ,CSEQCMP IN VARCHAR2
 ,CID_CREDITO_GASTO IN VARCHAR2
 ,CNRO_AUTORIZACION IN VARCHAR2
 )
 RETURN NUMBER
 IS

VALIDADOR NUMBER(2);
-- Valida que los datos de las notas de crédito o de débito esten correctos
CURSOR cDC IS
   SELECT *
   FROM   NOTAS_CR_DB_SRI
   WHERE  EMP_CODIGO = cEmpCodigo AND
          NRO_ID_DOCUMENTO=cIdPrv AND
          CODIGO_TIPO_COMPROBANTE =cCodTipoCmp AND
          FECHA_EMISION =dFecha AND
          SERIE_NOTA = cSerieCmp AND
          SECUENCIA_NOTA=cSeqCmp;
BEGIN
   QMS$ERRORS.SHOW_DEBUG_INFO('Validar datos de la Nota'||TO_CHAR(VALIDADOR));
   VALIDADOR:=-1;
   FOR rDC IN cDC LOOP
      QMS$ERRORS.SHOW_DEBUG_INFO('Validar datos de la Nota '||cSeqCmp||' '||cSerieCmp||' '||cIdPrv);
      VALIDADOR:= GNRL.Validar_Datos_Sri('DC',rDC.FECHA_CONTABLE,rDC.NRO_ID_DOCUMENTO,
                                           rDC.CODIGO_TIPO_COMPROBANTE_MOD,rDC.FECHA_EMISION_COMPROBANTE_MOD,
                                           rDC.SERIE_COMPROBANTE_MOD,rDC.SECUENCIA_NOTA,rDC.FECHA_EMISION,
                                           rDC.SECUENCIA_COMPROBANTE_MOD,rDC.NRO_AUTORIZACION_MOD,
                                           cID_CREDITO_GASTO,NULL,rDC.SERIE_NOTA,cNRO_AUTORIZACION,
                                           rDC.CMP_TIPO||' '||TO_CHAR(rDC.CMP_CLAVE)||' '||TO_CHAR(rDC.CMP_FECHA,'DD/MM/YYYY'),'E');
      QMS$ERRORS.SHOW_DEBUG_INFO('El resultado de validación de la Nota es '||TO_CHAR(VALIDADOR));
   END LOOP;
   RETURN VALIDADOR;
EXCEPTION
WHEN OTHERS THEN
    QMS$ERRORS.UNHANDLED_EXCEPTION ('Fallo en el procedimiento VALIDAR_DC por error '||SQLERRM);
END;
/* Conforma las Compras, Notas de Débito y de Crédito en Compras */
PROCEDURE CONFOMAR_COMPRAS_NC_ND
 (CEMPCOD IN VARCHAR2
 ,CPERIODO IN VARCHAR2
 ,NMES IN NUMBER
 ,NANIO IN NUMBER
 )
 IS
VEXISTE_ERRORES VARCHAR2(1);
VFECHA DATE;
NNUM NUMBER(9);
CCODIGO_IVA VARCHAR2(2);
CODIGO_RF VARCHAR2(3);
VALOR_RETENIDO_RF NUMBER(21, 6) := 0;
NUMRET NUMBER(2) := 0;
SERIE_RF VARCHAR2(6);
SECUENCIA_RF VARCHAR2(7);
AUTORIZACION_SRI_RF VARCHAR2(10);
FECHA_RF DATE;
NOMBRE_PROVEEDOR VARCHAR2(60);
I NUMBER;
VALIDADOR NUMBER;
nBaseIvaReal NUMBER;
nPrcIva NUMBER;
BEGIN
-- Este proceso crea las compras, notas de débito y notas de crédito
-- que van a ser declaradas al SRI, los datos son tomados de una vista
-- Este proceso crea las compras, notas de débito y notas de crédito
-- que van a ser declaradas al SRI, los datos son tomados de una vista
DECLARE
ERRORES_COMPRAS EXCEPTION;
PRAGMA EXCEPTION_INIT(ERRORES_COMPRAS,-20200);
CURSOR cCompras_NC_ND IS -- Cursor de compras, notas de débito y notas de crédito
SELECT *
FROM COMPRAS_SRI
WHERE TO_NUMBER(TO_CHAR(CMP_FECHA,'MM'))=nMes AND
        TO_NUMBER(TO_CHAR(CMP_FECHA,'YYYY'))=nAnio AND
      EMP_CODIGO = cEmpCod
ORDER BY FECHA_CONTABLE;                                                    
CURSOR cFctDpl IS 
  SELECT CMP_TIPO||'-'||CMP_CLAVE||' del '||CMP_FECHA COMPROBANTE
  FROM COMPRAS_SRI
  WHERE TO_NUMBER(TO_CHAR(CMP_FECHA,'MM'))=nMes AND
        TO_NUMBER(TO_CHAR(CMP_FECHA,'YYYY'))=nAnio AND
        EMP_CODIGO = cEmpCod AND
        (NRO_ID_DOCUMENTO,CODIGO_TIPO_COMPROBANTE,SERIE_COMPROBANTE,SECUENCIA_COMPROBANTE)
     IN (SELECT NRO_ID_DOCUMENTO,CODIGO_TIPO_COMPROBANTE,SERIE_COMPROBANTE,SECUENCIA_COMPROBANTE
--         NRO_AUTORIZACION
         FROM COMPRAS_SRI
         WHERE TO_NUMBER(TO_CHAR(CMP_FECHA,'MM'))=nMes AND
        TO_NUMBER(TO_CHAR(CMP_FECHA,'YYYY'))=nAnio AND
          EMP_CODIGO = cEmpCod
         HAVING COUNT(*)>1
         GROUP BY NRO_ID_DOCUMENTO,CODIGO_TIPO_COMPROBANTE,SERIE_COMPROBANTE,
           SECUENCIA_COMPROBANTE);
CURSOR cNcDpl is
  SELECT CMP_TIPO||'-'||CMP_CLAVE||' del '||CMP_FECHA Comprobante
  FROM NOTAS_CR_DB_SRI
  WHERE TO_NUMBER(TO_CHAR(CMP_FECHA,'MM'))=nMes AND
        TO_NUMBER(TO_CHAR(CMP_FECHA,'YYYY'))=nAnio AND
        EMP_CODIGO = cEmpCod AND
        (NRO_ID_DOCUMENTO,CODIGO_TIPO_COMPROBANTE,SERIE_NOTA,SECUENCIA_NOTA)
     IN (SELECT NRO_ID_DOCUMENTO,CODIGO_TIPO_COMPROBANTE,SERIE_NOTA,SECUENCIA_NOTA
         FROM NOTAS_CR_DB_SRI
         WHERE TO_NUMBER(TO_CHAR(CMP_FECHA,'MM'))=nMes AND
        TO_NUMBER(TO_CHAR(CMP_FECHA,'YYYY'))=nAnio AND
             EMP_CODIGO = cEmpCod
         HAVING COUNT(*)>1
         GROUP BY NRO_ID_DOCUMENTO,CODIGO_TIPO_COMPROBANTE,SERIE_NOTA,
           SECUENCIA_NOTA);
CURSOR cSecRtn IS
  SELECT TPOCMPEMP_TPOCMP_CODIGO||'-'||CMP_CLAVE||' del '||CMP_FECHA Comprobante
  FROM RETENCIONES
  WHERE (AUTORIZACION_SRI IS NULL OR SERIE_SRI IS NULL OR SECUENCIA_SRI IS NULL)
    AND ESTADO!='A' AND TPORTNEMP_EMP_CODIGO=cEmpCod
    AND TO_NUMBER(TO_CHAR(CMP_FECHA,'MM'))=nMes 
    AND TO_NUMBER(TO_CHAR(CMP_FECHA,'YYYY'))=nAnio;
CURSOR cComprasSRIRtn  IS
SELECT CMPNCNDSRI.IVA_EMP_CODIGO,CMPNCNDSRI.IVA_PERIODO,CMPNCNDSRI.NUMERO,
       CSRI.IVA TIPO_RET,
       SUBSTR(CSRI.CODIGO,1,3) CODIGO_RF,
       CSRI.PORCENTAJE PORCENTAJE_RF,
       CSRI.TOTAL_FACTURADO BASE_IMPONIBLE_RF,
       CSRI.TOTAL_RETENIDO VALOR_RETENIDO_RF,
       CSRI.SERIE_RF,
       CSRI.SECUENCIA_RF,
       CSRI.AUTORIZACION_RF
     FROM DETALLES_REOC_SRI CSRI,COMPRAS_NC_ND_SRI CMPNCNDSRI
     WHERE CSRI.EMP_CODIGO  = cEmpCod AND
          TO_CHAR(CSRI.FECHA,'MM/YYYY')=REPLACE(TO_CHAR(nMes,'00')||'/'||TO_CHAR(nAnio),' ','') AND
          CSRI.TOTAL_RETENIDO > 0 AND    
          CMPNCNDSRI.IVA_EMP_CODIGO=CSRI.EMP_CODIGO AND
          CMPNCNDSRI.IVA_PERIODO=cPeriodo AND
          CMPNCNDSRI.CMP_TIPO=CSRI.CMP_TIPO AND
          CMPNCNDSRI.CMP_CLAVE=CSRI.CMP_CLAVE;
TYPE tCmpSri  IS TABLE OF COMPRAS_NC_ND_SRI%ROWTYPE INDEX BY BINARY_INTEGER;
rCmpSri tCmpSri; -- Tabla en donde se guardan los datos antes de insertar
vTextoError VARCHAR2(4000);
BEGIN
   QMS$ERRORS.SHOW_DEBUG_INFO('Revisando si hay Facturas Duplicadas');
   FOR rSecRtn IN cSecRtn LOOP
     QMS$ERRORS.SHOW_DEBUG_INFO('Error: Retenciones sin llenar');
     vTextoError:=vTextoError||rSecRtn.Comprobante||','; 
     vEXISTE_ERRORES := 'V';
   END LOOP;
   IF vEXISTE_ERRORES='V'  THEN
     QMS$ERRORS.SHOW_MESSAGE('SRI-00020',vTextoError);
   END IF;
   FOR rFctDpl IN cFctDpl LOOP
     QMS$ERRORS.SHOW_DEBUG_INFO('Error: Facturas Duplicadas');
     vTextoError:=vTextoError||rFctDpl.Comprobante||','; 
     vEXISTE_ERRORES := 'V';
   END LOOP;
   QMS$ERRORS.SHOW_DEBUG_INFO('Revisando si hay NC/ND Duplicadas');
   FOR rNcDpl IN cNcDpl LOOP
     QMS$ERRORS.SHOW_DEBUG_INFO('Error: NC Duplicadas');
     vTextoError:=vTextoError||rNcDpl.Comprobante||','; 
     vEXISTE_ERRORES := 'V';
   END LOOP;                                       
   IF vEXISTE_ERRORES='V'  THEN
     QMS$ERRORS.SHOW_MESSAGE('SRI-00018',vTextoError);
   END IF;
   vEXISTE_ERRORES := 'F';
   CODIGO_RF:= NULL;
   VALOR_RETENIDO_RF:= NULL;
   VFECHA:= ROUND(TO_DATE('16/'||TO_CHAR(NMES)||'/'||TO_CHAR(NANIO),'DD/MM/YYYY'),'MM')-1;
   QMS$ERRORS.SHOW_DEBUG_INFO('Tablas de Referencia IVA');
   BEGIN
      SELECT CODIGO INTO cCODIGO_IVA
      FROM TABLAS_DE_REFERENCIAS
      WHERE CODIGO_TABLA = 'TABLA4' AND
            FECHA_VALIDEZ_DESDE <= vFecha AND
            FECHA_VALIDEZ_HASTA IS NOT NULL AND
            FECHA_VALIDEZ_HASTA >= vFecha;
   EXCEPTION
   WHEN OTHERS THEN
      BEGIN
         SELECT CODIGO INTO cCODIGO_IVA
         FROM TABLAS_DE_REFERENCIAS
         WHERE CODIGO_TABLA = 'TABLA4' AND
               FECHA_VALIDEZ_DESDE <= vFecha AND
               FECHA_VALIDEZ_HASTA IS NULL;
      EXCEPTION
      WHEN OTHERS THEN
         QMS$ERRORS.SHOW_MESSAGE('SRI-00002','Porcentaje de IVA');
      END;
   END;
   GNRL.ESCRIBIR_ERRORES('000000');
   i:=1;
   QMS$ERRORS.SHOW_DEBUG_INFO('Revisando Compra');
   FOR rCompras_NC_ND IN cCompras_NC_ND LOOP
      BEGIN
         SELECT DISTINCT beneficiario INTO NOMBRE_PROVEEDOR
         FROM comprobantes_por_revisar
         WHERE TPOCMPEMP_EMP_CODIGO=rCompras_NC_ND.EMP_CODIGO AND
               TPOCMPEMP_TPOCMP_CODIGO=rCompras_NC_ND.CMP_TIPO AND
               FECHA=rCompras_NC_ND.CMP_FECHA AND
               CLAVE=rCompras_NC_ND.CMP_CLAVE;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
          NOMBRE_PROVEEDOR:= '.';
      WHEN OTHERS THEN
          NOMBRE_PROVEEDOR:= '.';
      END;
           SERIE_RF:= NULL;
           SECUENCIA_RF:= NULL;
           AUTORIZACION_SRI_RF:= NULL;
           FECHA_RF:= NULL;
--      END;
      QMS$ERRORS.SHOW_DEBUG_INFO('El tipo de comprobante es '||rCompras_NC_ND.CODIGO_TIPO_COMPROBANTE);
      IF TO_NUMBER(rCompras_NC_ND.CODIGO_TIPO_COMPROBANTE) IN (4,5) THEN
         QMS$ERRORS.SHOW_DEBUG_INFO('Va ha validar datos DC '||rCompras_NC_ND.CMP_TIPO||' '||rCompras_NC_ND.CMP_CLAVE||' '||rCompras_NC_ND.CMP_FECHA);
         VALIDADOR := VALIDAR_DC(rCompras_NC_ND.EMP_CODIGO,rCompras_NC_ND.NRO_ID_DOCUMENTO,rCompras_NC_ND.CODIGO_TIPO_COMPROBANTE,
                                 rCompras_NC_ND.FECHA_EMISION,rCompras_NC_ND.SERIE_COMPROBANTE,rCompras_NC_ND.SECUENCIA_COMPROBANTE,
                                 rCompras_NC_ND.ID_CREDITO_GASTO,rCompras_NC_ND.NRO_AUTORIZACION);
      ELSE
         QMS$ERRORS.SHOW_DEBUG_INFO('Va ha validar datos TL');
         VALIDADOR := GNRL.Validar_Datos_Sri('TL',rCompras_NC_ND.FECHA_CONTABLE,rCompras_NC_ND.NRO_ID_DOCUMENTO,
                                           rCompras_NC_ND.CODIGO_TIPO_COMPROBANTE,rCompras_NC_ND.FECHA_EMISION,
                                           rCompras_NC_ND.SERIE_COMPROBANTE,NULL,NULL,rCompras_NC_ND.SECUENCIA_COMPROBANTE,
                                           rCompras_NC_ND.NRO_AUTORIZACION,rCompras_NC_ND.ID_CREDITO_GASTO,NULL,
                                           NULL,NULL,rCompras_NC_ND.CMP_TIPO||' '||TO_CHAR(rCompras_NC_ND.CMP_CLAVE)||' '||TO_CHAR(rCompras_NC_ND.CMP_FECHA,'DD/MM/YYYY'),'E');
      END IF;
      QMS$ERRORS.SHOW_DEBUG_INFO('El resultado de validación es '||TO_CHAR(VALIDADOR));
      IF VALIDADOR > 0 THEN
         rCmpSri(i).IVA_EMP_CODIGO:=cEmpCod;
         rCmpSri(i).IVA_PERIODO:=cPeriodo;
         rCmpSri(i).TIPO_TRANSACCION := LPAD(TO_CHAR(VALIDADOR),2,'0');
         rCmpSri(i).IDENTIFICACION_PRV:=rCompras_NC_ND.NRO_ID_DOCUMENTO;
         rCmpSri(i).PROVEEDOR:=NOMBRE_PROVEEDOR;
         rCmpSri(i).CODIGO_TIPO_COMPROBANTE:=LTRIM(rCompras_NC_ND.CODIGO_TIPO_COMPROBANTE,'0');
         rCmpSri(i).FECHA_EMISION:=NVL(rCompras_NC_ND.FECHA_EMISION,rCompras_NC_ND.FECHA_CONTABLE);
         rCmpSri(i).FECHA_CONTABLE:=rCompras_NC_ND.FECHA_CONTABLE;
         rCmpSri(i).FECHA_CADUCIDAD:=NVL(rCompras_NC_ND.FECHA_CADUCIDAD,rCompras_NC_ND.FECHA_CONTABLE);
         rCmpSri(i).SERIE_COMPROBANTE:=rCompras_NC_ND.SERIE_COMPROBANTE;
         rCmpSri(i).SECUENCIA_COMPROBANTE :=rCompras_NC_ND.SECUENCIA_COMPROBANTE;
         rCmpSri(i).AUTORIZACION_SRI:=rCompras_NC_ND.NRO_AUTORIZACION;
         IF rCompras_NC_ND.CODIGO_TIPO_COMPROBANTE = '11' THEN
            rCmpSri(i).SERIE_COMPROBANTE:='999999';
            rCmpSri(i).AUTORIZACION_SRI:='9999999999';
         END IF;
         rCmpSri(i).ID_CREDITO_GASTO:=rCompras_NC_ND.ID_CREDITO_GASTO;
         rCmpSri(i).BASE_IMPONIBLE_IVA:=rCompras_NC_ND.BASE_IMPONIBLE_IVA;
         rCmpSri(i).CODIGO_TARIFA_IVA:=cCODIGO_IVA;
         rCmpSri(i).BASE_IMPONIBLE_CERO:=rCompras_NC_ND.BASE_TARIFA_CERO;
         rCmpSri(i).IVA:=rCompras_NC_ND.IVA;
         rCmpSri(i).ICE:=rCompras_NC_ND.ICE;
         rCmpSri(i).MONTO_IVA_BIENES:=rCompras_NC_ND.IVA_BIENES;
         rCmpSri(i).CODIGO_IVA_BIENES:=rCompras_NC_ND.CODIGO_IVA_BIENES;
         rCmpSri(i).IVA_BIENES:=rCompras_NC_ND.IVA_RETENIDO_BIENES;
         rCmpSri(i).MONTO_IVA_SERVICIOS:=rCompras_NC_ND.IVA_SERVICIOS;
         rCmpSri(i).CODIGO_IVA_SERVICIOS:=rCompras_NC_ND.CODIGO_IVA_SERVICIOS;
         rCmpSri(i).IVA_SERVICIOS:=rCompras_NC_ND.IVA_RETENIDO_SERVICIOS;
         rCmpSri(i).DEVOLUCION:='S';
         rCmpSri(i).CMP_TIPO:=rCompras_NC_ND.CMP_TIPO;
         rCmpSri(i).CMP_FECHA:=rCompras_NC_ND.CMP_FECHA;
         rCmpSri(i).CMP_CLAVE:=rCompras_NC_ND.CMP_CLAVE;
         rCmpSri(i).SERIE_RF:= SERIE_RF;
         rCmpSri(i).SECUENCIA_RF:= SECUENCIA_RF;
         rCmpSri(i).AUTORIZACION_SRI_RF:= AUTORIZACION_SRI_RF;
         rCmpSri(i).FECHA_RF:= FECHA_RF;
--         QMS$ERRORS.SHOW_DEBUG_INFO('SE asignó el registro');
      ELSE
         vEXISTE_ERRORES := 'V';
--         QMS$ERRORS.SHOW_DEBUG_INFO('Existen Errores en el registro número '||rCmpSri(i).CMP_TIPO||' '||TO_CHAR(rCmpSri(i).CMP_CLAVE)||' '||TO_CHAR(rCmpSri(i).CMP_FECHA),'DD/MM/YYYY');
      END IF;
      SERIE_RF:= NULL;
      SECUENCIA_RF:= NULL;
      AUTORIZACION_SRI_RF:= NULL;
      FECHA_RF:= NULL;
      i:=i+1;
   END LOOP;
  IF vEXISTE_ERRORES = 'V' THEN
     QMS$ERRORS.SHOW_DEBUG_INFO('Existen Errores');
     QMS_TRANSACTION_MGT.CLOSE_TRANSACTION(QMS_TRANSACTION_MGT.get_trans_opened_by);
     COMMIT;
     RAISE ERRORES_COMPRAS;
  ELSE
  -- AHORA SI NO HA HABIDO NINGUN ERROR CREAMOS LAS COMPRAS
     QMS$ERRORS.SHOW_DEBUG_INFO('AHORA SI NO HA HABIDO NINGUN ERROR CREAMOS LAS COMPRAS');
     FOR I IN 1..rCmpSri.COUNT LOOP
       SELECT CMPSRI_SEQ.NEXTVAL INTO nNum
       FROM DUAL;
       INSERT INTO COMPRAS_NC_ND_SRI (IVA_EMP_CODIGO,IVA_PERIODO,NUMERO,TIPO_TRANSACCION,
                                    IDENTIFICACION_PRV,PROVEEDOR,CODIGO_TIPO_COMPROBANTE,FECHA_EMISION,
                                    FECHA_CONTABLE,FECHA_CADUCIDAD,SERIE_COMPROBANTE,SECUENCIA_COMPROBANTE,
                                    AUTORIZACION_SRI,ID_CREDITO_GASTO,BASE_IMPONIBLE_IVA,
                                    CODIGO_TARIFA_IVA,BASE_IMPONIBLE_CERO,IVA,ICE,MONTO_IVA_BIENES,
                                    CODIGO_IVA_BIENES,IVA_BIENES,MONTO_IVA_SERVICIOS,
                                    CODIGO_IVA_SERVICIOS,IVA_SERVICIOS,DEVOLUCION,CMP_TIPO,
                                    CMP_FECHA,CMP_CLAVE,USUARIO,SISTEMA_GENERA,CODIGO_RF,VALOR_RETENIDO_RF,
                                    SERIE_RF,SECUENCIA_RF,AUTORIZACION_SRI_RF,FECHA_RF)
       VALUES (rCmpSri(i).IVA_EMP_CODIGO,rCmpSri(i).IVA_PERIODO,nNum,rCmpSri(i).TIPO_TRANSACCION,
             rCmpSri(i).IDENTIFICACION_PRV,rCmpSri(i).PROVEEDOR,rCmpSri(i).CODIGO_TIPO_COMPROBANTE,
             rCmpSri(i).FECHA_EMISION,rCmpSri(i).FECHA_CONTABLE,rCmpSri(i).FECHA_CADUCIDAD,
             rCmpSri(i).SERIE_COMPROBANTE,rCmpSri(i).SECUENCIA_COMPROBANTE,
             rCmpSri(i).AUTORIZACION_SRI,LPAD(rCmpSri(i).ID_CREDITO_GASTO,2,'0'),rCmpSri(i).BASE_IMPONIBLE_IVA,
             rCmpSri(i).CODIGO_TARIFA_IVA,rCmpSri(i).BASE_IMPONIBLE_CERO,rCmpSri(i).IVA,
             rCmpSri(i).ICE,rCmpSri(i).MONTO_IVA_BIENES,rCmpSri(i).CODIGO_IVA_BIENES,
             rCmpSri(i).IVA_BIENES,rCmpSri(i).MONTO_IVA_SERVICIOS,rCmpSri(i).CODIGO_IVA_SERVICIOS,
             rCmpSri(i).IVA_SERVICIOS,rCmpSri(i).DEVOLUCION,rCmpSri(i).CMP_TIPO,rCmpSri(i).CMP_FECHA,
             rCmpSri(i).CMP_CLAVE,USER,'CNT',rCmpSri(i).CODIGO_RF,rCmpSri(i).VALOR_RETENIDO_RF,
             rCmpSri(i).SERIE_RF,rCmpSri(i).SECUENCIA_RF,rCmpSri(i).AUTORIZACION_SRI_RF,rCmpSri(i).FECHA_RF);
       IF TO_NUMBER(rCmpSri(i).CODIGO_TIPO_COMPROBANTE) IN (4,5) THEN
         BEGIN
          QMS$ERRORS.SHOW_DEBUG_INFO('Va a crear el comprobante afectado por la Nota de Crédito o Débito');
          INSERT INTO DETALLES_COMPROBANTES_AFECTADO(CMPNCNDSRI_IVA_EMP_CODIGO,CMPNCNDSRI_IVA_PERIODO,
                                                   CMPNCNDSRI_NUMERO,CODIGO_TIPO_COMPROBANTE,FECHA_EMISION,
                                                   SERIE_COMPROBANTE,SECUENCIA_COMPROBANTE,AUTORIZACION_SRI,
                                                   USUARIO)
          SELECT rCmpSri(i).IVA_EMP_CODIGO,rCmpSri(i).IVA_PERIODO,nNum,CODIGO_TIPO_COMPROBANTE_MOD,
               FECHA_EMISION_COMPROBANTE_MOD,SERIE_COMPROBANTE_MOD,SECUENCIA_COMPROBANTE_MOD,
               NRO_AUTORIZACION_MOD,USER
          FROM   NOTAS_CR_DB_SRI
          WHERE  FECHA_EMISION =rCmpSri(i).FECHA_EMISION AND
               EMP_CODIGO = rCmpSri(i).IVA_EMP_CODIGO AND
               NRO_ID_DOCUMENTO=rCmpSri(i).IDENTIFICACION_PRV AND
               CODIGO_TIPO_COMPROBANTE =rCmpSri(i).CODIGO_TIPO_COMPROBANTE AND               
               SERIE_NOTA = rCmpSri(i).SERIE_COMPROBANTE AND
               SECUENCIA_NOTA=rCmpSri(i).SECUENCIA_COMPROBANTE;
         EXCEPTION
         WHEN OTHERS THEN
           QMS$ERRORS.UNHANDLED_EXCEPTION ('No se pudo registrar los datos del comprobante afectado '||SQLERRM);
         END;
       END IF;
     END LOOP;
      ---LLAMAR AL PROCEDIMIENTO QUE VERIFICA SI HAY COMPROBANTES CON FACTURAS DUPLICADOS
     VALIDAR_FCT_DUPLICADAS(CEMPCOD,CPERIODO,NMES,NANIO,VFECHA);
-- AHORA CREAMOS LAS RETENCIONES EN LA FUENTE DEL SRI DE LAS COMPRAS
   QMS$ERRORS.SHOW_DEBUG_INFO('Creando Retenciones SRI');
   FOR rCmpSRIRtn IN cComprasSRIRtn LOOP
     IF rCmpSRIRtn.TIPO_RET='0' THEN
-- Solo si son RF creamos el detalle de las retenciones     
       INSERT INTO RETENCIONES_COMPRAS_SRI 
              (CMPNCNDSRI_IVA_EMP_CODIGO,CMPNCNDSRI_IVA_PERIODO,CMPNCNDSRI_NUMERO,CODIGO_RF,
               BASE_IMPONIBLE_RF,PORCENTAJE_RF,VALOR_RETENIDO_RF)
       VALUES (rCmpSRIRtn.IVA_EMP_CODIGO,rCmpSRIRtn.IVA_PERIODO,rCmpSRIRtn.NUMERO,
               rCmpSRIRtn.CODIGO_RF,rCmpSRIRtn.BASE_IMPONIBLE_RF ,
               rCmpSRIRtn.PORCENTAJE_RF,
               rCmpSRIRtn.VALOR_RETENIDO_RF);
     END IF;
-- ACTUALIZAMOS LA FECHA DE LAS RETENCIONES
       UPDATE COMPRAS_NC_ND_SRI
       SET FECHA_RF=CMP_FECHA,
           SERIE_RF=rCmpSRIRtn.SERIE_RF,
           SECUENCIA_RF=rCmpSRIRtn.SECUENCIA_RF,
           AUTORIZACION_SRI_RF=rCmpSRIRtn.AUTORIZACION_RF
       WHERE IVA_EMP_CODIGO=rCmpSRIRtn.IVA_EMP_CODIGO AND
             IVA_PERIODO=rCmpSRIRtn.IVA_PERIODO AND
             NUMERO=rCmpSRIRtn.NUMERO AND FECHA_RF IS NULL;
   END LOOP;
--     COMMIT;
  END IF;
EXCEPTION
  WHEN ERRORES_COMPRAS THEN
    RAISE;
  WHEN OTHERS THEN
    QMS$ERRORS.UNHANDLED_EXCEPTION ('Fallo en el procedimiento CONFORMAR_COMPRAS_NC_ND por error '||SQLERRM);
END;
END CONFOMAR_COMPRAS_NC_ND;
-- CONFORMAMOS LAS VENTAS ANULDAS
PROCEDURE CONFORMAR_VENTAS_ANULADAS
 (CEMPCOD IN VARCHAR2
 ,CPERIODO IN VARCHAR2
 ,NMES IN NUMBER
 ,NANIO IN NUMBER
 ,CTIPO IN VARCHAR2
 )
 IS

NNUM NUMBER;
I NUMBER;
BEGIN
-- Este proceso crea las ventas anuladas 
DECLARE
CURSOR cAnulados IS -- Cursor de ventas anuladas
SELECT CODIGO_TIPO_COMPROBANTE,SUBSTR(NUMERO_ESTABLECIMIENTO,2,3)||SUBSTR(NUMERO_PUNTO_EMISION,2,3) SERIE,           
       TO_CHAR(NVL(SECUENCIA_COMPROBANTE,0)) SECUENCIA_COMPROBANTE,
       TO_CHAR(NVL(NUMERO_AUTORIZACION,0),'FM0000000009') NUMERO_AUTORIZACION,FECHA_ANULACION
FROM VENTAS_ANULADAS_SRI
WHERE EMP_CODIGO = cEmpCod AND
      TO_NUMBER(TO_CHAR(FECHA_ANULACION,'MM')) = nMES AND
      TO_NUMBER(TO_CHAR(FECHA_ANULACION,'YYYY'))=nANIO AND
      ((CTIPO = 'V') OR (CTIPO = 'F' AND NUMERO_AUTORIZACION IS NOT NULL AND TO_NUMBER(SECUENCIA_COMPROBANTE)>0))
ORDER BY TO_NUMBER(SECUENCIA_COMPROBANTE);
BEGIN   
     FOR rAnulados IN cAnulados LOOP
        SELECT ANLSRI_SEQ.NEXTVAL INTO nNum
        FROM DUAL;
        INSERT INTO COMPROBANTES_ANULADOS(IVA_EMP_CODIGO,IVA_PERIODO,NUMERO,CODIGO_TIPO_COMPROBANTE,        
                                          SERIE_COMPROBANTE,SECUENCIA_DESDE,SECUENCIA_HASTA,AUTORIZACION_SRI,               
                                          FECHA_ANULACION,SISTEMA_GENERA)
        VALUES (cEmpCod,cPeriodo,nNum,rAnulados.CODIGO_TIPO_COMPROBANTE,
                rAnulados.SERIE,rAnulados.SECUENCIA_COMPROBANTE,
                rAnulados.SECUENCIA_COMPROBANTE,rAnulados.NUMERO_AUTORIZACION,
                rAnulados.FECHA_ANULACION,'FCT');     
     END LOOP;  
     COMMIT;
EXCEPTION
WHEN OTHERS THEN               
    QMS$ERRORS.UNHANDLED_EXCEPTION ('Fallo en el procedimiento CONFORMAR_VENTAS_ANULADAS por error '||SQLERRM);
END;    
END;

END SRIGNRPCK;