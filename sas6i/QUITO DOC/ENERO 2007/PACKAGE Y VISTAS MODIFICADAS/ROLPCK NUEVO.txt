 IS

/* Permite ingresar un movimiento del Rol de Pagos por empleado */
PROCEDURE INSERTA_MOVIMIENTOS
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NNUMROL IN ROLES_DE_PAGOS.NUMERO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,CPARAMETRO IN PARAMETROS_ROLES.CODIGO%TYPE
 ,CMOVIMIENTO IN PARAMETROS_ROLES.TIPO_MOVIMIENTO%TYPE
 ,NVALOR IN PARAMETROS_ROLES.VALOR%TYPE
 );


/* Permite ejecutar los procesos que intervienen en el Rol */
FUNCTION EJECUTAR_PROCESO_MENSUAL
 (PPROCESO IN FORMULAS_ROLES.PROCESO%TYPE
 ,P1 IN EMPRESAS.CODIGO%TYPE
 ,P2 IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,P3 IN ROLES_DE_PAGOS.NUMERO%TYPE
 )
 RETURN NUMBER
 IS

VVALOR NUMBER(21, 6);
VCURSOR INTEGER;
VSELECCION INTEGER;
BEGIN
/*QMS$ERRORS.SHOW_DEBUG_INFO('****** EJECUTAR PROCESO MENSUAL *****');
QMS$ERRORS.SHOW_DEBUG_INFO(PPROCESO);
QMS$ERRORS.SHOW_DEBUG_INFO('P1 '||P1);
QMS$ERRORS.SHOW_DEBUG_INFO('P2 '||P2);
QMS$ERRORS.SHOW_DEBUG_INFO('P3 '||P3);*/
   vcursor := dbms_sql.open_cursor;
   dbms_sql.parse(vcursor,
                  'select rolprnz.'||pproceso||'(:p1,:p2,:p3) from dual',dbms_sql.v7);
   dbms_sql.define_column(vcursor, 1, vvalor);
   dbms_sql.bind_variable(vcursor, 'p1', p1);
   dbms_sql.bind_variable(vcursor, 'p2', p2);
   dbms_sql.bind_variable(vcursor, 'p3', p3);
--QMS$ERRORS.SHOW_DEBUG_INFO('ANTES LLAMADO');
   vseleccion:= dbms_sql.execute(vcursor);
   LOOP
     IF dbms_sql.fetch_rows(vcursor)>0 THEN
        dbms_sql.column_value(vcursor,1,vvalor);
     ELSE
        EXIT;
    END IF;
   END LOOP;
--QMS$ERRORS.SHOW_DEBUG_INFO('DESPUES LLAMADO');
   dbms_sql.close_cursor(vcursor);
   RETURN vvalor;
EXCEPTION
WHEN OTHERS THEN
QMS$ERRORS.SHOW_DEBUG_INFO('ERROR '||SQLERRM);
   IF dbms_sql.is_open(vcursor) THEN
       dbms_sql.close_cursor(vcursor);
   END IF;
   IF SQLCODE=-904 THEN
      QMS$ERRORS.SHOW_MESSAGE('ROL-00037');
   ELSE
      QMS$ERRORS.UNHANDLED_EXCEPTION('Ejecuta_Proceso_Mensual ');
   END IF;
END;
/* Permite ingresar un movimiento del Rol de Pagos por empleado */
PROCEDURE INSERTA_MOVIMIENTOS
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NNUMROL IN ROLES_DE_PAGOS.NUMERO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,CPARAMETRO IN PARAMETROS_ROLES.CODIGO%TYPE
 ,CMOVIMIENTO IN PARAMETROS_ROLES.TIPO_MOVIMIENTO%TYPE
 ,NVALOR IN PARAMETROS_ROLES.VALOR%TYPE
 )
 IS

VFECHA DATE;
VANIO NUMBER(4);
VSEMANA NUMBER(1);
VMES NUMBER(2);
NDATO_EXISTE NUMBER(2);
VDIA NUMBER(2);
-- insert los movimientos de los roles de pagos, cada vez que se calcula el valor
-- total del parámetro
BEGIN
  SELECT ANO,MES,SEMANA INTO VANIO,VMES,VSEMANA
  FROM ROLES_DE_PAGOS
  WHERE EMP_CODIGO = CEMPRESA AND
        NUMERO = NNUMROL;
  VFECHA:= ROUND(TO_DATE('16/'||TO_CHAR(VMES)||'/'||TO_CHAR(VANIO),'DD/MM/YYYY'),'MM')-1;
  VDIA:= TRUNC(TO_NUMBER(TO_CHAR(VFECHA,'DD'))/(4/VSEMANA));
  IF VDIA IS NOT NULL THEN
     VFECHA:= TO_DATE(TO_CHAR(VDIA)||'/'||TO_CHAR(VMES)||'/'||TO_CHAR(VANIO),'DD/MM/YYYY');
  END IF;
  SELECT NVL(COUNT(NUMERO),0)INTO NDATO_EXISTE
  FROM MOVIMIENTOS_ROLES WHERE ROLPGS_EMP_CODIGO = CEMPRESA AND
                               ROLPGS_NUMERO = NNUMROL AND
                               VALOR = NVALOR AND
                               PRMROL_EMP_CODIGO = CEMPRESA AND
                               PRMROL_CODIGO = CPARAMETRO AND
                               EMPROL_EMP_CODIGO = CEMPRESA AND
                               EMPROL_CODIGO = NEMPLEADO AND
                               ESTADO = 'N';
  IF NDATO_EXISTE > 0 THEN
     QMS$ERRORS.SHOW_MESSAGE('ROL-00051',CPARAMETRO,TO_CHAR(NEMPLEADO,'000009'));
  ELSE
     IF CMOVIMIENTO = 'D' THEN
        INSERT INTO MOVIMIENTOS_ROLES (ROLPGS_EMP_CODIGO,ROLPGS_NUMERO,EMPROL_EMP_CODIGO,
                                    EMPROL_CODIGO,PRMROL_EMP_CODIGO,PRMROL_CODIGO,NUMERO,
                                    FECHA,DEBE,HABER,VALOR,ESTADO)
        VALUES (CEMPRESA,NNUMROL,CEMPRESA,NEMPLEADO,CEMPRESA,CPARAMETRO,MOVROL_SEQ.NEXTVAL,VFECHA,NVALOR,NULL,NVALOR,'N');
     ELSIF CMOVIMIENTO = 'C' THEN
        INSERT INTO MOVIMIENTOS_ROLES (ROLPGS_EMP_CODIGO,ROLPGS_NUMERO,EMPROL_EMP_CODIGO,
                                    EMPROL_CODIGO,PRMROL_EMP_CODIGO,PRMROL_CODIGO,NUMERO,
                                    FECHA,DEBE,HABER,VALOR,ESTADO)
        VALUES (CEMPRESA,NNUMROL,CEMPRESA,NEMPLEADO,CEMPRESA,CPARAMETRO,MOVROL_SEQ.NEXTVAL,VFECHA,NULL,NVALOR,NVALOR,'N');
     ELSIF CMOVIMIENTO = 'N' THEN
        INSERT INTO MOVIMIENTOS_ROLES (ROLPGS_EMP_CODIGO,ROLPGS_NUMERO,EMPROL_EMP_CODIGO,
                                    EMPROL_CODIGO,PRMROL_EMP_CODIGO,PRMROL_CODIGO,NUMERO,
                                    FECHA,DEBE,HABER,VALOR,ESTADO)
        VALUES (CEMPRESA,NNUMROL,CEMPRESA,NEMPLEADO,CEMPRESA,CPARAMETRO,MOVROL_SEQ.NEXTVAL,VFECHA,NULL,NULL,NVALOR,'N');
     END IF;
     QMS$ERRORS.SHOW_DEBUG_INFO('Se inserta el siguiente movimiento');
     QMS$ERRORS.SHOW_DEBUG_INFO(CEMPRESA);
     QMS$ERRORS.SHOW_DEBUG_INFO(TO_CHAR(NNUMROL));
     QMS$ERRORS.SHOW_DEBUG_INFO(CEMPRESA);
     QMS$ERRORS.SHOW_DEBUG_INFO(TO_CHAR(NEMPLEADO));
     QMS$ERRORS.SHOW_DEBUG_INFO(CEMPRESA);
     QMS$ERRORS.SHOW_DEBUG_INFO(CPARAMETRO);
     QMS$ERRORS.SHOW_DEBUG_INFO(TO_CHAR(VFECHA));
     QMS$ERRORS.SHOW_DEBUG_INFO(TO_CHAR(NVALOR,'999G999G990D00'));
   END IF;
EXCEPTION
  WHEN OTHERS THEN
  QMS$ERRORS.UNHANDLED_EXCEPTION('Inserción de Movimientos_roles');
END;
/* Permite ejecutar los procesos que intervienen en Parámetros Especiales */
FUNCTION EJECUTAR_PROCESO_ANUAL
 (PPROCESO IN PARAMETROS_ESPECIALES.PROCESO%TYPE
 ,P1 IN EMPRESAS.CODIGO%TYPE
 ,P2 IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,P3 IN PARAMETROS_ROLES.CODIGO%TYPE
 ,P4 IN NUMBER
 ,P5 IN PARAMETROS_ESPECIALES.MES_INICIAL%TYPE
 ,P6 IN PARAMETROS_ESPECIALES.MES_FINAL%TYPE
 )
 RETURN NUMBER
 IS

VCURSOR INTEGER;
VVALOR NUMBER(21, 6);
VSELECCION INTEGER;
BEGIN
   vcursor := dbms_sql.open_cursor;
   dbms_sql.parse(vcursor,
                  'select rolprnz.'||pproceso||'(:p1,:p2,:p3,:p4,:p5,:p6) from dual',dbms_sql.v7);
   dbms_sql.define_column(vcursor, 1, vvalor);
   dbms_sql.bind_variable(vcursor, 'p1', p1);
   dbms_sql.bind_variable(vcursor, 'p2', p2);
   dbms_sql.bind_variable(vcursor, 'p3', p3);
   dbms_sql.bind_variable(vcursor, 'p4', p4);
   dbms_sql.bind_variable(vcursor, 'p5', p5);
   dbms_sql.bind_variable(vcursor, 'p6', p6);
   vseleccion:= dbms_sql.execute(vcursor);
   loop
     if dbms_sql.fetch_rows(vcursor)>0 then
        dbms_sql.column_value(vcursor,1,vvalor);
     else
        exit;
    end if;
   end loop;
   dbms_sql.close_cursor(vcursor);
   return vvalor;
exception
when others then
   if dbms_sql.is_open(vcursor) then
       dbms_sql.close_cursor(vcursor);
   end if;
   IF SQLCODE=-904 THEN
      QMS$ERRORS.SHOW_MESSAGE('ROL-00037');
   ELSE
      QMS$ERRORS.UNHANDLED_EXCEPTION('Ejecuta_Proceso ');
   END IF;
end;
/* Genera el Bono Cuatrimestral */
FUNCTION GENERAR_BONO_CUATRIMESTRAL
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,CPARAMETRO IN PARAMETROS_ROLES.CODIGO%TYPE
 ,NNUMPAGO IN PAGOS_ESPECIALES.NUMERO%TYPE
 ,NANIO IN PAGOS_ESPECIALES.ANIO%TYPE
 ,NMES_INICIAL IN PARAMETROS_ESPECIALES.MES_INICIAL%TYPE
 ,NMES_FINAL IN PARAMETROS_ESPECIALES.MES_FINAL%TYPE
 )
 RETURN NUMBER
 IS

BONO_CUATRIMESTRAL NUMBER(21, 6);
VVALOR NUMBER(21, 6);
VANIO NUMBER(4);
PERFIL VARCHAR2(1);
TIPO VARCHAR2(5);
VFECHA_INGRESO DATE;
VMESES NUMBER;
VFECHA DATE;
VANIO_ANTERIOR NUMBER(4);
VINTERVIENE VARCHAR2(5);
VFECHA_INICIAL DATE;
VFECHA_FINAL DATE;
-- Calcula el valor que corresponde al Bono Cuatrimestral ademàs,
-- calcula el valor que corresponde a cada parámetro que interviene
-- en el cálculo del Bono Cuatrimestral
CURSOR PARAMETROS IS
SELECT PRMROL_CODIGO
FROM DATOS_INTERVIENEN
WHERE PRMESP_PRMROL_EMP_CODIGO = CEMPRESA AND
      PRMESP_PRMROL_CODIGO     = CPARAMETRO AND
      PRMROL_EMP_CODIGO        = CEMPRESA AND
      ESTADO_DE_DISPONIBILIDAD = 'D';
BEGIN
   IF NNUMPAGO IS NOT NULL THEN
   BEGIN
      SELECT FECHA INTO VFECHA
      FROM PAGOS_ESPECIALES
      WHERE  PRMESP_PRMROL_EMP_CODIGO = CEMPRESA AND
             PRMESP_PRMROL_CODIGO  = CPARAMETRO AND
             NUMERO = NNUMPAGO;
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
       QMS$ERRORS.SHOW_MESSAGE('ROL-00037');
   END;
   END IF;
   SELECT PRFEMP_CODIGO INTO PERFIL
   FROM EMPLEADOS_ROLES
   WHERE  EMP_CODIGO = CEMPRESA AND
          CODIGO = NEMPLEADO;
   OBTENER_FECHAS(NMES_INICIAL,NMES_FINAL,NANIO,VFECHA_INICIAL,VFECHA_FINAL);
   QMS$ERRORS.SHOW_DEBUG_INFO('La fecha inicial es '||TO_CHAR(VFECHA_INICIAL,'DD/MM/YYYY'));
   QMS$ERRORS.SHOW_DEBUG_INFO('La fecha final es '||TO_CHAR(VFECHA_FINAL,'DD/MM/YYYY'));
   OPEN PARAMETROS;
   BONO_CUATRIMESTRAL:= 0;
   LOOP
      FETCH PARAMETROS INTO VINTERVIENE;
      EXIT WHEN PARAMETROS%NOTFOUND;
      BEGIN
         SELECT TIPO_MOVIMIENTO INTO TIPO
         FROM PARAMETROS_ROLES
         WHERE EMP_CODIGO = CEMPRESA AND
               CODIGO = VINTERVIENE;
         IF TIPO <> 'C' THEN
            SELECT SUM(NVL(VALOR,0)) INTO VVALOR
            FROM MOVIMIENTOS_ROLES
            WHERE ROLPGS_EMP_CODIGO = CEMPRESA AND
                  EMPROL_EMP_CODIGO = CEMPRESA AND
                  EMPROL_CODIGO = NEMPLEADO AND
                  PRMROL_EMP_CODIGO = CEMPRESA AND
                  PRMROL_CODIGO = VINTERVIENE AND
                  (FECHA BETWEEN  VFECHA_INICIAL AND VFECHA_FINAL) AND
                  (ESTADO = 'N' OR ESTADO = 'C');
            IF VINTERVIENE = 'P0033' AND PERFIL NOT IN('E','F') THEN
               VVALOR := 0;
            END IF;
         ELSIF TIPO = 'C' THEN
            SELECT SUM(NVL(VALOR*-1,0)) INTO VVALOR
            FROM MOVIMIENTOS_ROLES
            WHERE ROLPGS_EMP_CODIGO = CEMPRESA AND
                  EMPROL_EMP_CODIGO = CEMPRESA AND
                  EMPROL_CODIGO = NEMPLEADO AND
                  PRMROL_EMP_CODIGO = CEMPRESA AND
                  PRMROL_CODIGO = VINTERVIENE AND
                  (FECHA BETWEEN  VFECHA_INICIAL-60 AND VFECHA_FINAL) AND
                  (ESTADO = 'N' OR ESTADO = 'C');
         END IF;
      EXCEPTION
      WHEN OTHERS THEN
        VVALOR:= 0;
      END;
      IF VVALOR IS NULL THEN
         VVALOR :=0;
      END IF;
      IF NNUMPAGO IS NOT NULL AND VVALOR <> 0 THEN
         INSERT INTO DETALLES_ESPECIALES (PAGESPPRMESP_PRMROL_EMP_CODIGO,MVMPAGESP_PRMESP_PRMROL_CODIGO,
                                          MVMPAGESP_EMPROL_EMP_CODIGO,MVMPAGESP_EMPROL_CODIGO,
                                          MVMPAGESP_PAGESP_NUMERO,PRMROL_EMP_CODIGO,PRMROL_CODIGO,
                                          FECHA,VALOR,ESTADO)
         VALUES(CEMPRESA,CPARAMETRO,CEMPRESA,NEMPLEADO,NNUMPAGO,CEMPRESA,VINTERVIENE,VFECHA,VVALOR,'N');
      END IF;
      BONO_CUATRIMESTRAL:=BONO_CUATRIMESTRAL + ROUND(VVALOR,2);
      VVALOR:=0;
   END LOOP;
   CLOSE PARAMETROS;
   RETURN ROUND(BONO_CUATRIMESTRAL,2);
EXCEPTION
  WHEN OTHERS THEN
  QMS$ERRORS.UNHANDLED_EXCEPTION('Error al Generar Detalles del Bono Cuatrimestral');
END;
/* Genera el Bono Aniversario */
FUNCTION GENERAR_BONO_ANIVERSARIO
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,CPARAMETRO IN PARAMETROS_ROLES.CODIGO%TYPE
 ,NNUMPAGO IN PAGOS_ESPECIALES.NUMERO%TYPE
 ,NANIO IN PAGOS_ESPECIALES.ANIO%TYPE
 ,NMES_INICIAL IN PARAMETROS_ESPECIALES.MES_INICIAL%TYPE
 ,NMES_FINAL IN PARAMETROS_ESPECIALES.MES_FINAL%TYPE
 )
 RETURN NUMBER
 IS

BONO_ANIVERSARIO NUMBER(21, 6);
VVALOR NUMBER(21, 6);
VANIO NUMBER(4);
PERFIL VARCHAR2(1);
TIPO VARCHAR2(5);
VFECHA_INGRESO DATE;
VMESES NUMBER;
VFECHA DATE;
VANIO_ANTERIOR NUMBER(4);
VINTERVIENE VARCHAR2(5);
VFECHA_INICIAL DATE;
VFECHA_FINAL DATE;
-- Calcula el valor que corresponde al Bono Aniversario además,
-- calcula el valor que corresponde a cada parámetro que interviene
-- en el cálculo del Bono Aniversario
CURSOR PARAMETROS IS
SELECT PRMROL_CODIGO
FROM DATOS_INTERVIENEN
WHERE PRMESP_PRMROL_EMP_CODIGO = CEMPRESA AND
      PRMESP_PRMROL_CODIGO     = CPARAMETRO AND
      PRMROL_EMP_CODIGO        = CEMPRESA AND
      ESTADO_DE_DISPONIBILIDAD = 'D';
BEGIN
   IF NNUMPAGO IS NOT NULL THEN
   BEGIN
      SELECT FECHA INTO VFECHA
      FROM PAGOS_ESPECIALES
      WHERE  PRMESP_PRMROL_EMP_CODIGO = CEMPRESA AND
             PRMESP_PRMROL_CODIGO  = CPARAMETRO AND
             NUMERO = NNUMPAGO;
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
       QMS$ERRORS.SHOW_MESSAGE('ROL-00037');
   END;
   END IF;
   SELECT FECHA_DE_INGRESO INTO VFECHA_INGRESO
   FROM EMPLEADOS_ROLES
   WHERE  EMP_CODIGO = CEMPRESA AND
          CODIGO = NEMPLEADO;
   OBTENER_FECHAS(NMES_INICIAL,NMES_FINAL,NANIO,VFECHA_INICIAL,VFECHA_FINAL);
   QMS$ERRORS.SHOW_DEBUG_INFO('La fecha inicial es '||TO_CHAR(VFECHA_INICIAL,'DD/MM/YYYY'));
   QMS$ERRORS.SHOW_DEBUG_INFO('La fecha final es '||TO_CHAR(VFECHA_FINAL,'DD/MM/YYYY'));
   OPEN PARAMETROS;
   BONO_ANIVERSARIO:= 0;
   LOOP
      FETCH PARAMETROS INTO VINTERVIENE;
      EXIT WHEN PARAMETROS%NOTFOUND;
      BEGIN
         SELECT VALOR INTO VVALOR
         FROM PARAMETROS_ROLES_EMPLEADO
         WHERE EMPROL_EMP_CODIGO = CEMPRESA AND
               EMPROL_CODIGO     = NEMPLEADO AND
               PRMROL_EMP_CODIGO = CEMPRESA AND
               PRMROL_CODIGO     = VINTERVIENE;
      EXCEPTION
      WHEN OTHERS THEN
        VVALOR:= 0;
      END;
      IF VVALOR IS NULL THEN
         VVALOR :=0;
      END IF;
/*      VMESES := MONTHS_BETWEEN(VFECHA_FINAL,VFECHA_INGRESO);
      IF VMESES < 12 AND VMESES > 0 THEN
         VVALOR:=((VVALOR)/12)*VMESES;
      ELSIF VMESES <= 0 THEN
         VVALOR:= 0;
      END IF;*/
      IF NNUMPAGO IS NOT NULL AND VVALOR <> 0 THEN
         INSERT INTO DETALLES_ESPECIALES (PAGESPPRMESP_PRMROL_EMP_CODIGO,MVMPAGESP_PRMESP_PRMROL_CODIGO,
                                          MVMPAGESP_EMPROL_EMP_CODIGO,MVMPAGESP_EMPROL_CODIGO,
                                          MVMPAGESP_PAGESP_NUMERO,PRMROL_EMP_CODIGO,PRMROL_CODIGO,
                                          FECHA,VALOR,ESTADO)
         VALUES(CEMPRESA,CPARAMETRO,CEMPRESA,NEMPLEADO,NNUMPAGO,CEMPRESA,VINTERVIENE,VFECHA,VVALOR,'N');
      END IF;
      VMESES := MONTHS_BETWEEN(VFECHA_FINAL,VFECHA_INGRESO);
      IF VMESES >= 12 THEN
          BONO_ANIVERSARIO:=VVALOR*2;
      ELSIF VMESES < 12 AND VMESES > 0 THEN
         BONO_ANIVERSARIO:=((VVALOR*2)/12)*VMESES;
      ELSE
         BONO_ANIVERSARIO:= 0;
      END IF;
   END LOOP;
   CLOSE PARAMETROS;
   RETURN ROUND(BONO_ANIVERSARIO,2);
EXCEPTION
  WHEN OTHERS THEN
  QMS$ERRORS.UNHANDLED_EXCEPTION('Error al Generar Detalles del Bono Cuatrimestral');
END;
/* Genera el Bono Médico */
FUNCTION GENERAR_BONO_MEDICO
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,CPARAMETRO IN PARAMETROS_ROLES.CODIGO%TYPE
 ,NNUMPAGO IN PAGOS_ESPECIALES.NUMERO%TYPE
 ,NANIO IN PAGOS_ESPECIALES.ANIO%TYPE
 ,NMES_INICIAL IN PARAMETROS_ESPECIALES.MES_INICIAL%TYPE
 ,NMES_FINAL IN PARAMETROS_ESPECIALES.MES_FINAL%TYPE
 )
 RETURN NUMBER
 IS

BONO_MEDICO NUMBER(21, 6);
VVALOR NUMBER(21, 6);
VANIO NUMBER(4);
PERFIL VARCHAR2(1);
TIPO VARCHAR2(5);
VFECHA_INGRESO DATE;
VMESES NUMBER;
VFECHA DATE;
VANIO_ANTERIOR NUMBER(4);
VINTERVIENE VARCHAR2(5);
VFECHA_INICIAL DATE;
VFECHA_FINAL DATE;
-- Calcula el valor que corresponde al Bono Cuatrimestral ademàs,
-- calcula el valor que corresponde a cada parámetro que interviene
-- en el cálculo del Bono Cuatrimestral
CURSOR PARAMETROS IS
SELECT PRMROL_CODIGO
FROM DATOS_INTERVIENEN
WHERE PRMESP_PRMROL_EMP_CODIGO = CEMPRESA AND
      PRMESP_PRMROL_CODIGO     = CPARAMETRO AND
      PRMROL_EMP_CODIGO        = CEMPRESA AND
      ESTADO_DE_DISPONIBILIDAD = 'D';
BEGIN
   IF NNUMPAGO IS NOT NULL THEN
   BEGIN
      SELECT FECHA INTO VFECHA
      FROM PAGOS_ESPECIALES
      WHERE  PRMESP_PRMROL_EMP_CODIGO = CEMPRESA AND
             PRMESP_PRMROL_CODIGO  = CPARAMETRO AND
             NUMERO = NNUMPAGO;
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
       QMS$ERRORS.SHOW_MESSAGE('ROL-00037');
   END;
   END IF;
   SELECT PRFEMP_CODIGO,TO_DATE(TO_CHAR(FECHA_DE_INGRESO,'DD/MM/YYYY')) INTO PERFIL,VFECHA_INGRESO
   FROM EMPLEADOS_ROLES
   WHERE  EMP_CODIGO = CEMPRESA AND
          CODIGO = NEMPLEADO;
   OBTENER_FECHAS(NMES_INICIAL,NMES_FINAL,NANIO,VFECHA_INICIAL,VFECHA_FINAL);
   QMS$ERRORS.SHOW_DEBUG_INFO('La fecha inicial es '||TO_CHAR(VFECHA_INICIAL,'DD/MM/YYYY'));
   QMS$ERRORS.SHOW_DEBUG_INFO('La fecha final es '||TO_CHAR(VFECHA_FINAL,'DD/MM/YYYY'));
   VMESES := MONTHS_BETWEEN(VFECHA_FINAL,VFECHA_INGRESO);
   IF VMESES > 12 THEN
      VMESES := 12;
   END IF;
   OPEN PARAMETROS;
   BONO_MEDICO:= 0;
   LOOP
      FETCH PARAMETROS INTO VINTERVIENE;
      EXIT WHEN PARAMETROS%NOTFOUND;
      BEGIN
         SELECT TIPO_MOVIMIENTO INTO TIPO
         FROM PARAMETROS_ROLES
         WHERE EMP_CODIGO = CEMPRESA AND
               CODIGO = VINTERVIENE;
         IF PERFIL IN ('B','C','D','E') OR (PERFIL = 'R' AND NEMPLEADO IN (5,76)) AND VMESES > 0 THEN
            IF TIPO <> 'C' THEN
               SELECT SUM(NVL(VALOR,0)) INTO VVALOR
               FROM MOVIMIENTOS_ROLES
               WHERE ROLPGS_EMP_CODIGO = CEMPRESA AND
                     EMPROL_EMP_CODIGO = CEMPRESA AND
                     EMPROL_CODIGO = NEMPLEADO AND
                     PRMROL_EMP_CODIGO = CEMPRESA AND
                     PRMROL_CODIGO = VINTERVIENE AND
                     (FECHA BETWEEN  VFECHA_INICIAL AND VFECHA_FINAL) AND
                     (ESTADO = 'N' OR ESTADO = 'C');
            ELSIF TIPO = 'C' THEN
               SELECT SUM(NVL(VALOR*-1,0)) INTO VVALOR
               FROM MOVIMIENTOS_ROLES
               WHERE ROLPGS_EMP_CODIGO = CEMPRESA AND
                     EMPROL_EMP_CODIGO = CEMPRESA AND
                     EMPROL_CODIGO = NEMPLEADO AND
                     PRMROL_EMP_CODIGO = CEMPRESA AND
                     PRMROL_CODIGO = VINTERVIENE AND
                     (FECHA BETWEEN  VFECHA_INICIAL AND VFECHA_FINAL) AND
                     (ESTADO = 'N' OR ESTADO = 'C');
            END IF;
         END IF;
      EXCEPTION
      WHEN OTHERS THEN
        VVALOR:= 0;
      END;
      IF VVALOR IS NULL THEN
         VVALOR :=0;
      END IF;
      IF NNUMPAGO IS NOT NULL AND VVALOR <> 0 THEN
         VVALOR := ROUND((VVALOR/12)*VMESES,2);
         INSERT INTO DETALLES_ESPECIALES (PAGESPPRMESP_PRMROL_EMP_CODIGO,MVMPAGESP_PRMESP_PRMROL_CODIGO,
                                          MVMPAGESP_EMPROL_EMP_CODIGO,MVMPAGESP_EMPROL_CODIGO,
                                          MVMPAGESP_PAGESP_NUMERO,PRMROL_EMP_CODIGO,PRMROL_CODIGO,
                                          FECHA,VALOR,ESTADO)
         VALUES(CEMPRESA,CPARAMETRO,CEMPRESA,NEMPLEADO,NNUMPAGO,CEMPRESA,VINTERVIENE,VFECHA,VVALOR,'N');
      END IF;
      BONO_MEDICO:=BONO_MEDICO + ROUND(VVALOR,2);
      VVALOR:=0;
   END LOOP;
   CLOSE PARAMETROS;
   RETURN ROUND(BONO_MEDICO,2);
EXCEPTION
  WHEN OTHERS THEN
  QMS$ERRORS.UNHANDLED_EXCEPTION('Error al Generar Detalles del Bono Día de la Salud/Medico');
END;
/* Obtiene el porcentaje de prorrateo del Rol */
FUNCTION OBTENER_PORCENTAJE
 (CEMPCODIGO IN VARCHAR2
 ,NEMPLEADO IN NUMBER
 ,CTIPOEMPLEADO IN VARCHAR2
 ,NNUMROL IN NUMBER
 )
 RETURN NUMBER
 IS

TOT_EGRESOS NUMBER(21, 6);
TOT_INGRESOS NUMBER(21, 6);
TOT_INGRESOSIESS NUMBER(21, 6);
APORTE_IESS NUMBER(21, 6);
PRESTAMO_IESS NUMBER(21, 6);
PORCENTAJE NUMBER;
-- Calcula el porcentaje de prorrateo del Rol de Pagos en base al total
-- de ingresos general y al total de ingresos para el IESS.
CURSOR cDatos IS --Recupera las variables globales para el total de ingresos
SELECT prmmov.valor,prmemp.PRMAPL_NOMBRE
FROM parametros_movimientos prmmov,parametros_empresas prmemp
WHERE prmemp.emp_codigo = cEmpCodigo AND
      (RTRIM(prmemp.PRMAPL_NOMBRE) = 'TOTAL_INGRESOS_IESS'OR
       RTRIM(prmemp.PRMAPL_NOMBRE) = 'TOTAL_EGRESOS' OR
       RTRIM(prmemp.PRMAPL_NOMBRE) = 'APORTE_IESS'OR
       RTRIM(prmemp.PRMAPL_NOMBRE) = 'TOTAL_INGRESOS_IESSH'OR
       RTRIM(prmemp.PRMAPL_NOMBRE) = 'TOTAL_EGRESOSH' OR
       RTRIM(prmemp.PRMAPL_NOMBRE) = 'PRESTAMO_IESS') AND
       prmmov.codigo = prmemp.valor AND
       prmmov.emprol_emp_codigo = cEmpCodigo AND
       prmmov.emprol_codigo = nEmpleado AND
       prmmov.rolpgs_emp_codigo = cEmpCodigo AND
       prmmov.rolpgs_numero = nNumrol;
BEGIN
   RETURN 1; -- EN SOLCA QUITO SE APLICA SIEMPRE 1
   porcentaje :=1;
   aporte_iess :=0;
   prestamo_iess :=0;
   FOR rDatos IN cDatos LOOP
      IF cTipoEmpleado = 'P' THEN
         IF RTRIM(rDatos.prmapl_nombre) = 'TOTAL_INGRESOS_IESS'  THEN
            tot_ingresosIess := ROUND(rDatos.valor,2);
         ELSIF RTRIM(rDatos.prmapl_nombre) = 'TOTAL_EGRESOS' THEN
            tot_egresos := ROUND(rDatos.valor,2);
         ELSIF RTRIM(rDatos.prmapl_nombre) = 'APORTE_IESS' THEN
            aporte_iess := ROUND(rDatos.valor,2);
         ELSIF RTRIM(rDatos.prmapl_nombre) = 'PRESTAMO_IESS' THEN
            prestamo_iess := ROUND(rDatos.valor,2);
         END IF;
      ELSE
         IF RTRIM(rDatos.prmapl_nombre) = 'TOTAL_INGRESOS_IESSH' THEN
            tot_ingresosIess := ROUND(rDatos.valor,2);
         ELSIF RTRIM(rDatos.prmapl_nombre) = 'TOTAL_EGRESOSH' THEN
            tot_egresos := ROUND(rDatos.valor,2);
         END IF;
         aporte_iess :=0;
         prestamo_iess :=0;
      END IF;
   END LOOP;
   IF tot_egresos > tot_ingresosIess THEN
      porcentaje := (tot_ingresosIess-nvl(aporte_iess+prestamo_iess,0))/(tot_egresos-nvl(aporte_iess+prestamo_iess,0));
   ELSE
      porcentaje := 1;
   END IF;
   RETURN porcentaje;
EXCEPTION
WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20110,'OBTENER_PORCENTAJE'||SQLERRM);
END;
/* Genera el Décimo Tercer Sueldo */
FUNCTION GENERAR_XIII
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,CPARAMETRO IN PARAMETROS_ROLES.CODIGO%TYPE
 ,NNUMPAGO IN PAGOS_ESPECIALES.NUMERO%TYPE
 ,NANIO IN PAGOS_ESPECIALES.ANIO%TYPE
 ,NMES_INICIAL IN PARAMETROS_ESPECIALES.MES_INICIAL%TYPE
 ,NMES_FINAL IN PARAMETROS_ESPECIALES.MES_FINAL%TYPE
 )
 RETURN NUMBER
 IS

VXIII NUMBER(21, 6);
VVALOR NUMBER(21, 6);
VANIO NUMBER(4);
VFECHA DATE;
VANIO_ANTERIOR NUMBER(4);
VINTERVIENE VARCHAR2(5);
VFECHA_INICIAL DATE;
VFECHA_FINAL DATE;
-- Calcula el valor que corresponde a la Décimo Tercera Remuneración, ademàs,
-- calcula el valor que corresponde a cada parámetro que interviene en el cálculo
-- del XIII.
CURSOR PARAMETROS IS
SELECT PRMROL_CODIGO
FROM DATOS_INTERVIENEN
WHERE PRMESP_PRMROL_EMP_CODIGO = CEMPRESA AND
      PRMESP_PRMROL_CODIGO     = CPARAMETRO AND
      PRMROL_EMP_CODIGO        = CEMPRESA AND
      ESTADO_DE_DISPONIBILIDAD = 'D';
BEGIN
   IF NNUMPAGO IS NOT NULL THEN
   BEGIN
      SELECT FECHA INTO VFECHA
      FROM PAGOS_ESPECIALES
      WHERE  PRMESP_PRMROL_EMP_CODIGO = CEMPRESA AND
             PRMESP_PRMROL_CODIGO  = CPARAMETRO AND
             NUMERO = NNUMPAGO;
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
       QMS$ERRORS.SHOW_MESSAGE('ROL-00037');
   END;
   END IF;
   OBTENER_FECHAS(NMES_INICIAL,NMES_FINAL,NANIO,VFECHA_INICIAL,VFECHA_FINAL);
   OPEN PARAMETROS;
   VXIII:= 0;
   LOOP
      FETCH PARAMETROS INTO VINTERVIENE;
      EXIT WHEN PARAMETROS%NOTFOUND;
      BEGIN
         SELECT SUM (VALOR)/12 INTO VVALOR
         FROM MOVIMIENTOS_ROLES
         WHERE ROLPGS_EMP_CODIGO = CEMPRESA AND
               EMPROL_EMP_CODIGO = CEMPRESA AND
               EMPROL_CODIGO = NEMPLEADO AND
               PRMROL_EMP_CODIGO = CEMPRESA AND
               PRMROL_CODIGO = VINTERVIENE AND
               (FECHA BETWEEN  VFECHA_INICIAL AND VFECHA_FINAL) AND
               (ESTADO = 'N' OR ESTADO = 'C');
      EXCEPTION
      WHEN OTHERS THEN
         VVALOR:= 0;
      END;
      IF VVALOR IS NULL THEN
         VVALOR :=0;
      END IF;
      IF NNUMPAGO IS NOT NULL THEN
         INSERT INTO DETALLES_ESPECIALES (PAGESPPRMESP_PRMROL_EMP_CODIGO,MVMPAGESP_PRMESP_PRMROL_CODIGO,
                MVMPAGESP_EMPROL_EMP_CODIGO,MVMPAGESP_EMPROL_CODIGO,MVMPAGESP_PAGESP_NUMERO,PRMROL_EMP_CODIGO,
                PRMROL_CODIGO,FECHA,VALOR,ESTADO)
         VALUES(CEMPRESA,CPARAMETRO,CEMPRESA,NEMPLEADO,NNUMPAGO,CEMPRESA,VINTERVIENE,VFECHA,VVALOR,'N');
      END IF;
      VXIII:=VXIII + VVALOR;
      VVALOR:=0;
   END LOOP;
   CLOSE PARAMETROS;
   RETURN VXIII;
EXCEPTION
  WHEN OTHERS THEN
  QMS$ERRORS.UNHANDLED_EXCEPTION('Error al Generar Detalles del XIII');
END;
/* Obtener las fechas inicial y final del Pago Especial */
PROCEDURE OBTENER_FECHAS
 (NMES_INICIAL IN NUMBER
 ,NMES_FINAL IN NUMBER
 ,NANIO IN NUMBER
 ,FECHA_INICIAL OUT DATE
 ,FECHA_FINAL OUT DATE
 )
 IS

VANIO_ANTERIOR NUMBER(4);
BEGIN
-- Obtiene la fecha inicial y la fecha final de un período
   IF NMES_INICIAL NOT BETWEEN 1 AND 12 THEN
     RAISE_APPLICATION_ERROR(-20200,'El parametro del mes inicial de la funcion Obtener_Fechas debe estar entre 1 y 12');
   END IF;
   IF NMES_FINAL NOT BETWEEN 1 AND 12 THEN
     RAISE_APPLICATION_ERROR(-20200,'El parametro del mes final de la funcion Obtener_Fechas debe estar entre 1 y 12');
   END IF;
   IF NMES_INICIAL > NMES_FINAL THEN
      VANIO_ANTERIOR := NANIO -1;
   ELSIF NMES_INICIAL <= NMES_FINAL THEN
      VANIO_ANTERIOR:= NANIO;
   END IF;
   IF VANIO_ANTERIOR IS NOT NULL THEN
      FECHA_INICIAL:=TO_DATE('01/'||TO_CHAR(nMes_Inicial)||'/'||TO_CHAR(VANIO_ANTERIOR),'DD/MM/YYYY');
      FECHA_FINAL:=ROUND(TO_DATE('16/'||TO_CHAR(nMes_Final)||'/'||TO_CHAR(nANIO),'DD/MM/YYYY'),'MM')-1;
   END IF;
END;
/* Liquidar el Impuesto a la Renta */
FUNCTION LIQUIDAR_IMPUESTO_RENTA
 (NANIO IN NUMBER
 ,NBASE_IMPONIBLE IN NUMBER
 )
 RETURN NUMBER
 IS

VLIMINF NUMBER(21, 6);
VLIMSUP NUMBER(21, 6);
VEXEDENTE NUMBER(3);
VIMPUESTO NUMBER;
VBASE NUMBER(21, 6);
-- Calcula el valor correspondiente a la liquidación anual del Impuesto a la Renta
-- del empleado
CURSOR DETALLES_RENTAS IS
SELECT LIMITE_INFERIOR,LIMITE_SUPERIOR,IMPUESTO_BASICO,IMPUESTO_EXEDENTE
FROM DETALLES_IMPUESTO_RENTA
WHERE TO_NUMBER(TO_CHAR(TBLIMPRNT_ANO_RIGE,'YYYY'))= NANIO;
BEGIN
   VIMPUESTO:=0;
   IF NBASE_IMPONIBLE > 0 THEN
      OPEN DETALLES_RENTAS;
      LOOP
         FETCH DETALLES_RENTAS INTO VLIMINF,VLIMSUP,VBASE,VEXEDENTE;
         EXIT WHEN DETALLES_RENTAS%NOTFOUND;
         IF NBASE_IMPONIBLE BETWEEN VLIMINF AND VLIMSUP THEN
             VIMPUESTO := VBASE + (VEXEDENTE /100)* (NBASE_IMPONIBLE - VLIMINF);
             RETURN VIMPUESTO;
         END IF;
      END LOOP;
      CLOSE DETALLES_RENTAS;
   END IF;
   RETURN 0; -- Si no existe impuesto a la renta, retorna 0 para la liquidaciòn
EXCEPTION
WHEN OTHERS THEN
    QMS$ERRORS.UNHANDLED_EXCEPTION('LIQUIDAR_IMPUESTO_RENTA');
END;
/* Permite obtener el valor de los parámetros que conforma el rol del emp */
PROCEDURE OBTIENE_PARAMETROS
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NNUMROL IN ROLES_DE_PAGOS.NUMERO%TYPE
 ,NMES_ROL IN ROLES_DE_PAGOS.MES%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,CPARAMETRO IN PARAMETROS_ROLES.CODIGO%TYPE
 ,CMENSAJE IN OUT VARCHAR2
 )
 IS

VPARAMETRO VARCHAR2(5);
VFORMULA VARCHAR2(5);
VTIPO VARCHAR2(1);
VVALOR NUMBER(21, 6);
VFECHA_INGRESO DATE;
VSEMANA_ROL NUMBER(1);
VFECHA DATE;
VDIA NUMBER(2);
VANIO_ROL NUMBER(4);
VNUMDIAS NUMBER(3);
VMES_ROL NUMBER(2);
VLIMINF NUMBER(21, 6);
VAGRUPADOR VARCHAR2(1);
VLIMSUP NUMBER(21, 6);
VPROCESO VARCHAR2(50);
VMES VARCHAR2(2);
VMOVIMIENTO VARCHAR2(1);
VEMPLEADO VARCHAR2(60);
VLLAMA_PROCESO VARCHAR2(240);
VVALOR_NOVEDAD NUMBER(21, 6);
VSECUENCIA NUMBER(3);
-- Obtiene los parámetros de cada empleado y genera los valores correspondientes,
-- dependiendo del tipo de dato que sea. Luego de obtener el valor, este se registra
-- en el detalle del Rol de Pagos.
CURSOR PARAMETROS(NEMPLEADO NUMBER) IS
SELECT PRMEMP.PRMROL_CODIGO,PRMEMP.VALOR,PRMEMP.SECUENCIA_DESPLIEGUE,PRMROL.LIMITE_INFERIOR,PRMROL.LIMITE_SUPERIOR,NOMBRE_AGRUPADOR
FROM PARAMETROS_ROLES_EMPLEADO PRMEMP, PARAMETROS_ROLES PRMROL
WHERE PRMROL.EMP_CODIGO = CEMPRESA AND
      PRMROL.EMP_CODIGO = PRMEMP.PRMROL_EMP_CODIGO AND
      PRMROL.CODIGO = PRMEMP.PRMROL_CODIGO AND
      PRMEMP.EMPROL_EMP_CODIGO = CEMPRESA AND
      PRMEMP.EMPROL_CODIGO = NEMPLEADO AND
      PRMEMP.ESTADO_DE_DISPONIBILIDAD = 'D'
ORDER BY PRMEMP.SECUENCIA_DESPLIEGUE;
BEGIN
   OPEN PARAMETROS(NEMPLEADO);
   SELECT ANO,MES,SEMANA INTO VANIO_ROL,VMES_ROL,VSEMANA_ROL
   FROM ROLES_DE_PAGOS
   WHERE EMP_CODIGO = CEMPRESA AND
         NUMERO = NNUMROL;
   VFECHA:= ROUND(TO_DATE('16/'||TO_CHAR(VMES_ROL)||'/'||TO_CHAR(VANIO_ROL),'DD/MM/YYYY'),'MM')-1;
   VDIA:= TRUNC(TO_NUMBER(TO_CHAR(VFECHA,'DD')));
   IF VDIA IS NOT NULL THEN
      VFECHA:= TO_DATE(TO_CHAR(VDIA)||'/'||TO_CHAR(VMES_ROL)||'/'||TO_CHAR(VANIO_ROL),'DD/MM/YYYY');
   END IF;
   SELECT FECHA_DE_INGRESO  INTO VFECHA_INGRESO
   FROM EMPLEADOS_ROLES
   WHERE EMP_CODIGO = CEMPRESA AND
         CODIGO = NEMPLEADO;
   LOOP
      FETCH PARAMETROS INTO VPARAMETRO,VVALOR,VSECUENCIA,VLIMINF,VLIMSUP,VAGRUPADOR;
      EXIT WHEN PARAMETROS%NOTFOUND;
      SELECT MES_ACTIVIDAD,TIPO,TIPO_MOVIMIENTO INTO VMES,VTIPO,VMOVIMIENTO
      FROM PARAMETROS_ROLES
      WHERE EMP_CODIGO = CEMPRESA AND
            CODIGO = VPARAMETRO;
      IF REPLACE(VMES,'*',TO_CHAR(NMES_ROL))= TO_CHAR(NMES_ROL) THEN
         IF VTIPO = 'D' THEN       -- Si es novedad toma el valor de novedades
         BEGIN
            SELECT VALOR  INTO VVALOR_NOVEDAD
            FROM NOVEDADES_ROLES
            WHERE ROLPGS_EMP_CODIGO = CEMPRESA AND
                  ROLPGS_NUMERO = NNUMROL AND
                  PRMROL_EMP_CODIGO = CEMPRESA AND
                  PRMROL_CODIGO = VPARAMETRO AND
                  EMPROL_EMP_CODIGO = CEMPRESA AND
                  EMPROL_CODIGO = NEMPLEADO AND
                  ESTADO = 'C';
            VVALOR:=VVALOR_NOVEDAD;
            IF VAGRUPADOR IN ('T','E','M','S') THEN
               VNUMDIAS:= VNUMDIAS+VVALOR;
               IF VNUMDIAS > 31 THEN
                  QMS$ERRORS.SHOW_MESSAGE('ROL-00004',TO_CHAR(NEMPLEADO));
               END IF;
            END IF;
--            IF VAGRUPADOR = 'T' AND VVALOR  > VFECHA - VFECHA_INGRESO +1 THEN
--               QMS$ERRORS.SHOW_MESSAGE('ROL-00003',TO_CHAR(NEMPLEADO),TO_CHAR(VFECHA - VFECHA_INGRESO +1));
--            END IF;
         EXCEPTION
         WHEN NO_DATA_FOUND THEN
            IF VAGRUPADOR = 'T' THEN
               QMS$ERRORS.SHOW_MESSAGE('ROL-00002',TO_CHAR(NEMPLEADO));
            ELSE
               VVALOR := 0;
            END IF;
         END;
         ELSIF VTIPO = 'C' THEN                        -- Si es fórmula, obtiene el valor con la fórmula
         BEGIN
            SELECT PRMFRM.FRMROL_CODIGO,FRMROL.PROCESO INTO VFORMULA,VPROCESO
            FROM PARAMETROS_FORMULAS PRMFRM,FORMULAS_ROLES FRMROL
            WHERE  PRMFRM.PRMROL_EMP_CODIGO = CEMPRESA AND
                   PRMFRM.PRMROL_CODIGO = VPARAMETRO AND
			             PRMFRM.FRMROL_EMP_CODIGO = CEMPRESA AND
                   PRMFRM.ESTADO_DE_DISPONIBILIDAD= 'D'AND
                   FRMROL.EMP_CODIGO = CEMPRESA AND
                   FRMROL.CODIGO = PRMFRM.FRMROL_CODIGO AND
                   FRMROL.ESTADO_DE_DISPONIBILIDAD = 'D';
            IF VPROCESO IS NULL THEN
               VVALOR:= EJECUTA_FORMULA(CEMPRESA,NNUMROL,NEMPLEADO,VPARAMETRO,VFORMULA);
            ELSE
               VVALOR:=EJECUTAR_PROCESO_MENSUAL(VPROCESO,CEMPRESA,NEMPLEADO,NNUMROL);
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
            QMS$ERRORS.SHOW_MESSAGE('ROL-00036',VPARAMETRO);
         END;
         END IF;
         IF VLIMINF IS NOT NULL THEN
            IF VVALOR < VLIMINF THEN
               QMS$ERRORS.SHOW_MESSAGE('ROL-00053',VPARAMETRO,TO_CHAR(NEMPLEADO),TO_CHAR(VLIMINF));
            END IF;
         END IF;
         IF VLIMSUP IS NOT NULL THEN
            IF VVALOR > VLIMSUP THEN
               QMS$ERRORS.SHOW_MESSAGE('ROL-00054',VPARAMETRO,TO_CHAR(NEMPLEADO),TO_CHAR(VLIMSUP));
            END IF;
         END IF;
         INSERTA_MOVIMIENTOS(CEMPRESA,NNUMROL,NEMPLEADO,VPARAMETRO,VMOVIMIENTO,VVALOR);
         --verifica si el liquido a pagar es negativo para sacarlo de la lista
         IF VPARAMETRO = CPARAMETRO THEN
            IF ROUND(VVALOR,2) < 0 THEN
               SELECT RTRIM(APELLIDOS)||' '||RTRIM(NOMBRES) INTO VEMPLEADO
               FROM EMPLEADOS_ROLES
               WHERE EMP_CODIGO = CEMPRESA AND
                     CODIGO = NEMPLEADO;
               CMENSAJE := CMENSAJE||VEMPLEADO||' '||TO_CHAR(VVALOR,'999G99G990D00')||' ';
            END IF;
         END IF;
      END IF;
   END LOOP;
   CLOSE PARAMETROS;
EXCEPTION
WHEN OTHERS THEN
    QMS$ERRORS.UNHANDLED_EXCEPTION('Obtener Valores de Parámetros');
END;
/* EJECUTA LA FORMULA DE CALCULO */
FUNCTION EJECUTA_FORMULA
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NNUMROL IN ROLES_DE_PAGOS.NUMERO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,CPARAMETRO IN PARAMETROS_ROLES.CODIGO%TYPE
 ,CFORMULA IN FORMULAS_ROLES.CODIGO%TYPE
 )
 RETURN NUMBER
 IS

VOPERADOR VARCHAR2(1);
VSECUENCIA NUMBER(2);
-- Obtiene los grupos de parámetros que intervienen en la fórmula para
-- calcular el valor de la misma
CURSOR GRUPOS IS
SELECT SECUENCIA,OPERADOR,VALOR
FROM GRUPOS_DETALLES
WHERE FRMROL_EMP_CODIGO = CEMPRESA AND
      FRMROL_CODIGO = CFORMULA
ORDER BY SECUENCIA;
TYPE GRUPOSTABTYP IS TABLE OF GRUPOS%ROWTYPE INDEX BY BINARY_INTEGER;
GRUPOS_TAB GRUPOSTABTYP;
TYPE LISTA_OPERADORES IS TABLE OF CHAR(1);
   OPERADORES LISTA_OPERADORES := LISTA_OPERADORES('/','*','-','+','N');
i BINARY_INTEGER := 0;
j BINARY_INTEGER := 0;
k BINARY_INTEGER := 0;
BEGIN
   OPEN GRUPOS;
   LOOP
      i := i + 1;
      FETCH GRUPOS INTO GRUPOS_TAB(i);
      EXIT WHEN GRUPOS%NOTFOUND;
      GRUPOS_TAB(i).VALOR := CALCULA_TOTAL_GRUPO(CEMPRESA,NNUMROL,NEMPLEADO,
                                                 CFORMULA,GRUPOS_TAB(i).SECUENCIA);
   END LOOP;
   CLOSE GRUPOS;
   i:= i-1;
   FOR k IN 1..5 LOOP
      VOPERADOR := OPERADORES(k);
      FOR j IN REVERSE 1..i LOOP
        IF GRUPOS_TAB.EXISTS(j) THEN
           IF GRUPOS_TAB(j).OPERADOR = VOPERADOR THEN
              IF VOPERADOR = '/' THEN
                 IF GRUPOS_TAB(GRUPOS_TAB.NEXT(j)).VALOR <> 0 THEN
                    GRUPOS_TAB(GRUPOS_TAB.NEXT(j)).VALOR := GRUPOS_TAB(j).VALOR / GRUPOS_TAB(GRUPOS_TAB.NEXT(j)).VALOR;
                 ELSE
                    QMS$ERRORS.SHOW_MESSAGE('ROL-00030',CFORMULA,TO_CHAR(NEMPLEADO,'000009'));
                 END IF;
              ELSIF VOPERADOR = '*' THEN
                 GRUPOS_TAB(GRUPOS_TAB.NEXT(j)).VALOR := GRUPOS_TAB(j).VALOR *GRUPOS_TAB(GRUPOS_TAB.NEXT(j)).VALOR;
              ELSIF VOPERADOR = '-' THEN
                 GRUPOS_TAB(GRUPOS_TAB.NEXT(j)).VALOR := GRUPOS_TAB(j).VALOR -GRUPOS_TAB(GRUPOS_TAB.NEXT(j)).VALOR;
              ELSIF VOPERADOR = '+' THEN
                 GRUPOS_TAB(GRUPOS_TAB.NEXT(j)).VALOR := GRUPOS_TAB(j).VALOR + GRUPOS_TAB(GRUPOS_TAB.NEXT(j)).VALOR;
              ELSIF VOPERADOR = 'N' THEN
                 RETURN GRUPOS_TAB(j).VALOR;
              END IF;
              GRUPOS_TAB.DELETE(j);
           END IF;
        END IF;
      END LOOP;
   END LOOP;
   RETURN 0;
EXCEPTION
  WHEN OTHERS THEN
  QMS$ERRORS.UNHANDLED_EXCEPTION('Ejecuta_Fórmula ');
END;
/* Obtiene el total de un grupo de detalle de la fórmula */
FUNCTION CALCULA_TOTAL_GRUPO
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NNUMROL IN ROLES_DE_PAGOS.NUMERO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,CFORMULA IN FORMULAS_ROLES.CODIGO%TYPE
 ,NSECUENCIA IN GRUPOS_DETALLES.SECUENCIA%TYPE
 )
 RETURN NUMBER
 IS

VTIPO VARCHAR2(1);
VTIPO_MOVIMIENTO VARCHAR2(1);
VMES VARCHAR2(2);
VMES_ROL NUMBER(2);
VLLAMA_PROCESO VARCHAR2(240);
VPARAMETRO_EMPLEADO VARCHAR2(5) := NULL ;
VFORMULA VARCHAR2(5);
VVALOR_DATO NUMBER(21, 6);
VVALOR_NOVEDAD NUMBER(21, 6);
VPROCESO VARCHAR2(50);
VOPERADOR VARCHAR2(1);
VVALOR NUMBER(21, 6);
-- Obtiene los parámetros con valores que intervienen en un grupo de la fórmula para
-- calcular el valor del  mismo
CURSOR DETALLES IS
SELECT PRMROL_CODIGO,SECUENCIA,OPERADOR,VALOR
FROM DETALLES_FORMULAS
WHERE GRPDTL_FRMROL_EMP_CODIGO = CEMPRESA AND
      GRPDTL_FRMROL_CODIGO = CFORMULA AND
      GRPDTL_SECUENCIA = NSECUENCIA
ORDER BY GRPDTL_SECUENCIA,SECUENCIA;
TYPE DETALLESTABTYP IS TABLE OF DETALLES%ROWTYPE INDEX BY BINARY_INTEGER;
DETALLES_TAB DETALLESTABTYP;
TYPE LISTA_OPERADORES IS TABLE OF CHAR(1);
   OPERADORES LISTA_OPERADORES := LISTA_OPERADORES('/','*','-','+','N');
i BINARY_INTEGER := 0;
j BINARY_INTEGER := 0;
k BINARY_INTEGER := 0;
BEGIN
/*QMS$ERRORS.SHOW_DEBUG_INFO('****** CALCULA_TOTAL_GRUPO *******');
QMS$ERRORS.SHOW_DEBUG_INFO('VTIPO '||VTIPO);
QMS$ERRORS.SHOW_DEBUG_INFO('VMES '||VMES);
QMS$ERRORS.SHOW_DEBUG_INFO('VMES_ROL '||VMES_ROL);
QMS$ERRORS.SHOW_DEBUG_INFO('VLLAMA_PROCESO '||VLLAMA_PROCESO);
QMS$ERRORS.SHOW_DEBUG_INFO('PERFIL_EMPLEADO '||PERFIL_EMPLEADO);
QMS$ERRORS.SHOW_DEBUG_INFO('VVALORDATO '||VVALOR_DATO);
QMS$ERRORS.SHOW_DEBUG_INFO('VVALORNOVEDAD '||VVALOR_NOVEDAD);
QMS$ERRORS.SHOW_DEBUG_INFO('VPROCESO '||VPROCESO);
QMS$ERRORS.SHOW_DEBUG_INFO('VVALOR '||VVALOR);
QMS$ERRORS.SHOW_DEBUG_INFO('VOPERADOR '||VOPERADOR);*/
   SELECT MES INTO VMES_ROL
   FROM ROLES_DE_PAGOS
   WHERE NUMERO = NNUMROL;
   OPEN DETALLES;
   LOOP
      i := i + 1;
      FETCH DETALLES INTO DETALLES_TAB(i);
      EXIT WHEN DETALLES%NOTFOUND;
      SELECT MES_ACTIVIDAD,TIPO,TIPO_MOVIMIENTO,VALOR INTO VMES,VTIPO,VTIPO_MOVIMIENTO,VVALOR --obtiene el tipo y valor del parámetro
      FROM PARAMETROS_ROLES                                -- que interviene en el detalle de la fórmula
      WHERE EMP_CODIGO = CEMPRESA AND
            CODIGO = DETALLES_TAB(i).PRMROL_CODIGO;
/*QMS$ERRORS.SHOW_DEBUG_INFO('PARAMETRO '||DETALLES_TAB(i).PRMROL_CODIGO);
QMS$ERRORS.SHOW_DEBUG_INFO('VTIPO '||VTIPO);
QMS$ERRORS.SHOW_DEBUG_INFO('VMES '||VMES);
QMS$ERRORS.SHOW_DEBUG_INFO('VVALOR '||VVALOR);*/
      IF VTIPO = 'A' AND REPLACE(VMES,'*',TO_CHAR(VMES_ROL))= TO_CHAR(VMES_ROL)THEN -- Si es dato tomar de parámetros del empleado
         BEGIN
            SELECT VALOR INTO VVALOR_DATO
            FROM PARAMETROS_ROLES_EMPLEADO
            WHERE EMPROL_EMP_CODIGO = CEMPRESA AND
	   	      EMPROL_CODIGO = NEMPLEADO AND
		      PRMROL_EMP_CODIGO = CEMPRESA AND
                  PRMROL_CODIGO = DETALLES_TAB(i).PRMROL_CODIGO AND
                  ESTADO_DE_DISPONIBILIDAD = 'D';
            VVALOR:=VVALOR_DATO;
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
            VVALOR:=0;
         END;
      ELSIF VTIPO = 'C' AND REPLACE(VMES,'*',TO_CHAR(VMES_ROL))= TO_CHAR(VMES_ROL)THEN
       -- Si es calculado ejecuta la fórmula que usa
         BEGIN
            VPARAMETRO_EMPLEADO:= DETALLES_TAB(i).PRMROL_CODIGO;
            IF VTIPO_MOVIMIENTO <> 'N' THEN 
               VPARAMETRO_EMPLEADO:= NULL;
               BEGIN
                  SELECT PRMROL_CODIGO INTO VPARAMETRO_EMPLEADO
                  FROM PARAMETROS_ROLES_EMPLEADO
                  WHERE EMPROL_EMP_CODIGO = CEMPRESA AND
	   	        EMPROL_CODIGO = NEMPLEADO AND
		        PRMROL_EMP_CODIGO = CEMPRESA AND
                        PRMROL_CODIGO = DETALLES_TAB(i).PRMROL_CODIGO AND
                        ESTADO_DE_DISPONIBILIDAD = 'D';
               EXCEPTION
               WHEN NO_DATA_FOUND THEN
                  VPARAMETRO_EMPLEADO:=NULL;
               END;
            END IF;
            IF VPARAMETRO_EMPLEADO = DETALLES_TAB(i).PRMROL_CODIGO THEN
               BEGIN
                  SELECT PRMFRM.FRMROL_CODIGO,FRMROL.PROCESO INTO VFORMULA,VPROCESO
                  FROM PARAMETROS_FORMULAS PRMFRM,FORMULAS_ROLES FRMROL
                  WHERE  PRMFRM.PRMROL_EMP_CODIGO = CEMPRESA AND
                         PRMFRM.PRMROL_CODIGO = DETALLES_TAB(i).PRMROL_CODIGO AND
		   	       PRMFRM.FRMROL_EMP_CODIGO = CEMPRESA AND
                         PRMFRM.ESTADO_DE_DISPONIBILIDAD= 'D'AND
                         FRMROL.EMP_CODIGO = CEMPRESA AND
                         FRMROL.CODIGO = PRMFRM.FRMROL_CODIGO AND
                         FRMROL.ESTADO_DE_DISPONIBILIDAD = 'D';
               EXCEPTION
                  WHEN NO_DATA_FOUND THEN
                  QMS$ERRORS.SHOW_MESSAGE('ROL-00036',DETALLES_TAB(i).PRMROL_CODIGO);
               END;
               IF VPROCESO IS NULL THEN
                  VVALOR:= EJECUTA_FORMULA(CEMPRESA,NNUMROL,NEMPLEADO,DETALLES_TAB(i).PRMROL_CODIGO,VFORMULA);
               ELSE
                  QMS$ERRORS.SHOW_DEBUG_INFO(VPROCESO);
                  VVALOR:=EJECUTAR_PROCESO_MENSUAL(VPROCESO,CEMPRESA,NEMPLEADO,NNUMROL);
               END IF;
            ELSE 
              VVALOR := 0;
            END IF;  
         EXCEPTION
           WHEN OTHERS THEN
           QMS$ERRORS.SHOW_MESSAGE('ROL-00034',DETALLES_TAB(i).PRMROL_CODIGO||' del empleado '||TO_CHAR(NEMPLEADO),CFORMULA);
         END;
      ELSIF VTIPO = 'D' THEN --Si es novedad, tomar de la tabla de novedades
         BEGIN
            SELECT VALOR INTO VVALOR_NOVEDAD
            FROM NOVEDADES_ROLES
            WHERE ROLPGS_EMP_CODIGO = CEMPRESA AND
                  ROLPGS_NUMERO = NNUMROL AND
                  PRMROL_EMP_CODIGO = CEMPRESA AND
                  PRMROL_CODIGO = DETALLES_TAB(i).PRMROL_CODIGO AND
                  EMPROL_EMP_CODIGO = CEMPRESA AND
                  EMPROL_CODIGO = NEMPLEADO AND
                  ESTADO = 'C';
            VVALOR:=VVALOR_NOVEDAD;
         EXCEPTION
           WHEN NO_DATA_FOUND THEN
           VVALOR:= 0;
         END;
      END IF;
      IF VVALOR IS NOT NULL AND REPLACE(VMES,'*',TO_CHAR(VMES_ROL))= TO_CHAR(VMES_ROL) THEN
         DETALLES_TAB(i).VALOR := VVALOR; -- Si es constante toma el valor del parámetro
      ELSIF VVALOR IS NOT NULL THEN
         DETALLES_TAB(i).VALOR := 0;
      ELSE
         QMS$ERRORS.SHOW_MESSAGE('ROL-00033',DETALLES_TAB(i).PRMROL_CODIGO,CFORMULA);
      END IF;
   END LOOP;
   CLOSE DETALLES;
   i:= i-1;
   FOR k IN 1..5 LOOP
      VOPERADOR := OPERADORES(k);
      FOR j IN REVERSE 1..i LOOP
        IF DETALLES_TAB.EXISTS(j) THEN
           IF DETALLES_TAB(j).OPERADOR = VOPERADOR THEN
              IF VOPERADOR = '/' THEN
                 IF  DETALLES_TAB(DETALLES_TAB.NEXT(j)).VALOR <> 0 THEN
                    DETALLES_TAB(DETALLES_TAB.NEXT(j)).VALOR := DETALLES_TAB(j).VALOR / DETALLES_TAB(DETALLES_TAB.NEXT(j)).VALOR;
                 ELSE
                    QMS$ERRORS.SHOW_MESSAGE('ROL-00030',CFORMULA,TO_CHAR(NEMPLEADO,'000009'));
                 END IF;
              ELSIF VOPERADOR = '*' THEN
                 DETALLES_TAB(DETALLES_TAB.NEXT(j)).VALOR := DETALLES_TAB(j).VALOR *DETALLES_TAB(DETALLES_TAB.NEXT(j)).VALOR;
              ELSIF VOPERADOR = '-' THEN
                 DETALLES_TAB(DETALLES_TAB.NEXT(j)).VALOR := DETALLES_TAB(j).VALOR -DETALLES_TAB(DETALLES_TAB.NEXT(j)).VALOR;
              ELSIF VOPERADOR = '+' THEN
                 DETALLES_TAB(DETALLES_TAB.NEXT(j)).VALOR := DETALLES_TAB(j).VALOR + DETALLES_TAB(DETALLES_TAB.NEXT(j)).VALOR;
              ELSIF VOPERADOR = 'N' THEN
                 RETURN DETALLES_TAB(j).VALOR;
              END IF;
              DETALLES_TAB.DELETE(j);
           END IF;
        END IF;
      END LOOP;
   END LOOP;
   RETURN 0;
EXCEPTION
WHEN OTHERS THEN
QMS$ERRORS.SHOW_DEBUG_INFO('I '||I);
QMS$ERRORS.SHOW_DEBUG_INFO('J '||J);
QMS$ERRORS.SHOW_DEBUG_INFO('K '||K);
    QMS$ERRORS.UNHANDLED_EXCEPTION('Calcula Total por Grupo');
END CALCULA_TOTAL_GRUPO;
END ROLGNR;




 IS

/* Realiza el pago de un valor */
FUNCTION PAGAR_VALOR
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,CPARAMETRO IN PARAMETROS_ROLES.CODIGO%TYPE
 ,NANIO IN PAGOS_ESPECIALES.NUMERO%TYPE
 ,NMES_FINAL IN PARAMETROS_ESPECIALES.MES_FINAL%TYPE
 ,NMES_INICIAL IN PARAMETROS_ESPECIALES.MES_INICIAL%TYPE
 )
 RETURN NUMBER
 IS

VVALOR NUMBER(21, 6);
-- Calcula el valor que corresponde al empleado por pago de de un monto
BEGIN
   VVALOR:= 0;
   SELECT VALOR INTO VVALOR
   FROM PARAMETROS_ROLES
   WHERE EMP_CODIGO = CEMPRESA AND
         CODIGO = CPARAMETRO;
   IF VVALOR IS NULL THEN
      VVALOR :=0;
   END IF;
   RETURN VVALOR;
END;
/* Devuelve el valor 1 si el empleado ha trabajo más de un año */
FUNCTION OBTENER_CONSTANTE_UNO
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,NNUMROL IN ROLES_DE_PAGOS.NUMERO%TYPE
 )
 RETURN NUMBER
 IS

VANIO NUMBER(4);
VMES NUMBER(2);
VDIA NUMBER(2);
VFECHA_ROL DATE;
VDIA_INGRESO NUMBER(2);
FECHA_DE_SALIDA DATE;
FECHA_DE_INGRESO DATE;
VDIAS NUMBER := 0;
VANIOS NUMBER(2);
VSEMANA NUMBER(1);
VFECHA_INGRESO DATE;
--Si el empleado ha trabajado un año o más, retorna uno para calcualar el Fondo de
-- Reserva, de lo contrario retorna 0
CURSOR INGRESOS_SALIDAS IS  --Cursor de fechas de ingresos y egresos de empleados
SELECT FECHA_INGRESO,FECHA_SALIDA
FROM INGRESOS_SALIDAS_EMPLEADOS
WHERE EMPROL_EMP_CODIGO = CEMPRESA AND
      EMPROL_CODIGO = NEMPLEADO
      ORDER BY FECHA_INGRESO;
BEGIN
   OPEN INGRESOS_SALIDAS;
   LOOP
      FETCH INGRESOS_SALIDAS INTO FECHA_DE_INGRESO,FECHA_DE_SALIDA;
      EXIT WHEN INGRESOS_SALIDAS%NOTFOUND;
      VDIAS := VDIAS + (FECHA_DE_SALIDA - FECHA_DE_INGRESO);
   END LOOP;
   CLOSE INGRESOS_SALIDAS;
   BEGIN
      SELECT ANO,MES,SEMANA INTO VANIO,VMES,VSEMANA
      FROM ROLES_DE_PAGOS
      WHERE EMP_CODIGO = CEMPRESA AND
            NUMERO = NNUMROL;
   EXCEPTION WHEN NO_DATA_FOUND THEN
     RAISE_APPLICATION_ERROR(-20110,'OBTENER_CONSTANTE_UNO');
   END;
   VFECHA_ROL:= ROUND(TO_DATE('16/'||TO_CHAR(VMES,'09')||'/'||TO_CHAR(VANIO,'0009'),'DD/MM/YYYY'),'MM')-1 ;
   VDIA:= TRUNC(TO_NUMBER(TO_CHAR(VFECHA_ROL,'DD'))/(4/VSEMANA));
   IF VDIA IS NOT NULL THEN
     VFECHA_ROL:=TO_DATE(TO_CHAR(VDIA,'09')||'/'||TO_CHAR(VMES,'09')||'/'||TO_CHAR(VANIO,'0009'),'DD/MM/YYYY');
   END IF;
   BEGIN
   SELECT TO_DATE(TO_CHAR(FECHA_DE_INGRESO,'DD/MM/YYYY'))INTO VFECHA_INGRESO
   FROM EMPLEADOS_ROLES
   WHERE EMP_CODIGO = CEMPRESA AND
         CODIGO = NEMPLEADO;
   EXCEPTION WHEN NO_DATA_FOUND THEN
    RAISE_APPLICATION_ERROR(-20110,'OBTENER_CONSTANTE_UNO');
   END;
   VDIA_INGRESO:=TO_NUMBER(TO_CHAR(VFECHA_INGRESO,'DD'));
   IF VDIA_INGRESO BETWEEN 1 AND 15 THEN
      VANIOS := TRUNC((VDIAS+(VFECHA_ROL-VFECHA_INGRESO))/366);
   ELSIF VDIA_INGRESO BETWEEN 16 AND 31 THEN
      VANIOS := TRUNC((VDIAS+(VFECHA_ROL-VFECHA_INGRESO))/365);
   END IF;
   IF VANIOS >= 1 THEN
     RETURN 1;
   ELSE
     RETURN 0;
   END IF;
EXCEPTION
WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20110,'OBTENER_CONSTANTE_UNO'||SQLERRM);
END;
/* Devuelve el valor 1 si el empleado ha trabajo más de un año */
FUNCTION DEVUELVE_BONO_SOLCA
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,NNUMROL IN ROLES_DE_PAGOS.NUMERO%TYPE
 )
 RETURN NUMBER
 IS

VDATO NUMBER;
VBONO NUMBER;
BEGIN
--Es una función especial para el Rol de Pagos  de Solca, que devuelve
-- uno o cero en casos especiales de Bono Solca.
   VDATO:= ROLPRNZ.OBTENER_CONSTANTE_UNO(CEMPRESA,NEMPLEADO,NNUMROL);
   IF VDATO  = 1 AND NEMPLEADO <> 96 THEN
      RETURN 1;
   ELSE
      SELECT COUNT(PRMROL_CODIGO) INTO VBONO
      FROM PARAMETROS_ROLES_EMPLEADO
      WHERE EMPROL_EMP_CODIGO = CEMPRESA AND
            EMPROL_CODIGO = NEMPLEADO AND
            PRMROL_EMP_CODIGO = CEMPRESA AND
            PRMROL_CODIGO = 'P0028' AND
            ESTADO_DE_DISPONIBILIDAD = 'D';
      IF VBONO = 0 THEN
         RETURN 0;
      ELSE
         RETURN 1;
      END IF;
   END IF;
EXCEPTION
WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20110,'DEVUELVE_BONO_SOLCA'||SQLERRM);
END;

/* Devuelve el porcentaje del sueldo para el calculo del subsidio por responasabilidad */
FUNCTION CALCULA_RESPONSABILIDAD
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,NNUMROL IN ROLES_DE_PAGOS.NUMERO%TYPE
 )
 RETURN NUMBER
 IS

VDATO NUMBER := 0;
VPORCENTAJE NUMBER := 0;
BEGIN
--Es una función especial para el Rol de Pagos  de Solca Quito, que devuelve
--el porcentaje del sueldo dependiendo del grado del cargo del empleado.   
   SELECT NVL(GRADO_RESPONSABILIDAD,0) INTO VDATO
   FROM EMPLEADOS_ROLES E,CARGOS_EMPLEADOS C
   WHERE  E.EMP_CODIGO = CEMPRESA AND
          E.CODIGO = NEMPLEADO AND
          C.EMP_CODIGO = CEMPRESA AND
          E.CRGEMP_EMP_CODIGO = C.EMP_CODIGO AND
          E.CRGEMP_CODIGO = C.CODIGO;
   IF TO_NUMBER(VDATO) > 0 THEN
      SELECT NVL(TO_NUMBER(RV_ABBREVIATION)/100,0) INTO VPORCENTAJE
      FROM CG_REF_CODES
      WHERE RV_DOMAIN = 'GRADO_RESPONSABILIDAD' AND
            RV_LOW_VALUE = VDATO;
   ELSE 
      VPORCENTAJE := 0;
   END IF;            
   RETURN VPORCENTAJE;
EXCEPTION
WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20110,'CALCULA_RESPONSABILIDAD'||SQLERRM);
END;

/* Devuelve el valor 1 si el empleado ha trabajo más de un año */
FUNCTION DEVUELVE_MESES
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,NNUMROL IN ROLES_DE_PAGOS.NUMERO%TYPE
 )
 RETURN NUMBER
 IS

VANIO NUMBER(4);
VMES NUMBER(2);
VDIA NUMBER(2);
VFECHA_ROL DATE;
VDIA_INGRESO NUMBER(2);
FECHA_DE_SALIDA DATE;
FECHA_DE_INGRESO DATE;
VMESES NUMBER := 0;
VANIOS NUMBER(2);
VSEMANA NUMBER(1);
VFECHA_INGRESO DATE;
--Si el empleado ha trabajado un año o más, retorna 12 para calcualar el Bono Dia de la salud
-- o el bono día del médico este proceso se usa solamente en SOLCA.
BEGIN
   BEGIN
      SELECT ANO,MES,SEMANA INTO VANIO,VMES,VSEMANA
      FROM ROLES_DE_PAGOS
      WHERE EMP_CODIGO = CEMPRESA AND
            NUMERO = NNUMROL;
      EXCEPTION WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20110,'DEVUELVE_MES');
   END;
   IF VMES = 1 THEN
      VFECHA_ROL:= ROUND(TO_DATE('16/'||TO_CHAR(12,'09')||'/'||TO_CHAR(VANIO-1,'0009'),'DD/MM/YYYY'),'MM')-1 ;
   ELSIF VMES > 1 THEN
      VFECHA_ROL:= ROUND(TO_DATE('16/'||TO_CHAR(VMES-1,'09')||'/'||TO_CHAR(VANIO,'0009'),'DD/MM/YYYY'),'MM')-1 ;
   END IF;
   BEGIN
   SELECT TO_DATE(TO_CHAR(FECHA_DE_INGRESO,'DD/MM/YYYY'))INTO VFECHA_INGRESO
   FROM EMPLEADOS_ROLES
   WHERE EMP_CODIGO = CEMPRESA AND
         CODIGO = NEMPLEADO;
   EXCEPTION WHEN NO_DATA_FOUND THEN
    RAISE_APPLICATION_ERROR(-20110,'DEVUELVE_MESES');
   END;
   VMESES := MONTHS_BETWEEN(VFECHA_ROL,VFECHA_INGRESO);
   IF VMESES > 12 THEN
     RETURN 12;
   ELSIF VMESES < 0 THEN
     RETURN 0;
   ELSIF VMESES BETWEEN 0 AND 12 THEN
     RETURN VMESES;
   END IF;
EXCEPTION
WHEN OTHERS THEN
     RAISE_APPLICATION_ERROR(-20110,'DEVUELVE_MESES'||SQLERRM);
END;
/* Obtiene el número de años de servicio del empleado a la empresa */
FUNCTION OBTENER_NUMERO_ANIOS
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,NNUMROL IN ROLES_DE_PAGOS.NUMERO%TYPE
 )
 RETURN NUMBER
 IS

VFECHA_ROL DATE;
VANIO NUMBER(4);
VMES NUMBER(2);
VSEMANA NUMBER(1);
VDIA NUMBER(2);
VDIA_INGRESO NUMBER(2);
VDIAS NUMBER := 0;
VFECHA_INGRESO DATE;
VFECHA_ING_PUBLICA DATE;
FECHA_DE_INGRESO DATE;
FECHA_DE_SALIDA DATE;
VANIOS NUMBER(2);
VANIOS_BASE NUMBER(1);
-- Obtiene el número de años de servicio del empleado que gana por antiguedad
CURSOR INGRESOS_SALIDAS IS  --Cursor de fechas de ingresos y egresos de empleados
SELECT FECHA_INGRESO,FECHA_SALIDA
FROM INGRESOS_SALIDAS_EMPLEADOS
WHERE EMPROL_EMP_CODIGO = CEMPRESA AND
      EMPROL_CODIGO = NEMPLEADO AND OBSERVACIONES NOT LIKE 'TOMADO DEL SISTEMA DE RECURSOS HUMANOS%'
      ORDER BY FECHA_INGRESO;

BEGIN
   OPEN INGRESOS_SALIDAS;
   LOOP
      FETCH INGRESOS_SALIDAS INTO FECHA_DE_INGRESO,FECHA_DE_SALIDA;
      EXIT WHEN INGRESOS_SALIDAS%NOTFOUND;
      VDIAS := VDIAS + (FECHA_DE_SALIDA - FECHA_DE_INGRESO);
   END LOOP;
   CLOSE INGRESOS_SALIDAS;
   BEGIN
      SELECT ANO,MES,SEMANA INTO VANIO,VMES,VSEMANA
      FROM ROLES_DE_PAGOS
      WHERE EMP_CODIGO = CEMPRESA AND
            NUMERO = NNUMROL;
   EXCEPTION WHEN NO_DATA_FOUND THEN
     RAISE_APPLICATION_ERROR(-20110,'OBTENER_NUMERO_ANIOS');
   END;
   VFECHA_ROL:= ROUND(TO_DATE('16/'||TO_CHAR(VMES,'09')||'/'||TO_CHAR(VANIO,'0009'),'DD/MM/YYYY'),'MM')-1 ;
   VDIA:= TRUNC(TO_NUMBER(TO_CHAR(VFECHA_ROL,'DD'))/(4/VSEMANA));
   IF VDIA IS NOT NULL THEN
     VFECHA_ROL:=TO_DATE(TO_CHAR(VDIA,'09')||'/'||TO_CHAR(VMES,'09')||'/'||TO_CHAR(VANIO,'0009'),'DD/MM/YYYY');
   END IF;
   BEGIN
   SELECT TO_DATE(TO_CHAR(FECHA_DE_INGRESO,'DD/MM/YYYY')),TO_DATE(TO_CHAR(FECHA_ING_PUBLICA,'DD/MM/YYYY'))INTO VFECHA_INGRESO,VFECHA_ING_PUBLICA
   FROM EMPLEADOS_ROLES
   WHERE EMP_CODIGO = CEMPRESA AND
         CODIGO = NEMPLEADO;
   EXCEPTION WHEN NO_DATA_FOUND THEN
    RAISE_APPLICATION_ERROR(-20110,'OBTENER_NUMERO_ANIOS');
   END;
   IF VFECHA_ING_PUBLICA IS NOT NULL THEN
      VDIA_INGRESO:=TO_NUMBER(TO_CHAR(VFECHA_ING_PUBLICA,'DD'));
      IF VDIA_INGRESO BETWEEN 1 AND 15 THEN
         VANIOS := TRUNC((VDIAS+(VFECHA_ROL-VFECHA_ING_PUBLICA))/366);
      ELSIF VDIA_INGRESO BETWEEN 16 AND 31 THEN
         VANIOS := TRUNC((VDIAS+(VFECHA_ROL-VFECHA_ING_PUBLICA))/365);
      END IF;
   ELSE
      VDIA_INGRESO:=TO_NUMBER(TO_CHAR(VFECHA_INGRESO,'DD'));
      IF VDIA_INGRESO BETWEEN 1 AND 15 THEN
         VANIOS := TRUNC((VDIAS+(VFECHA_ROL-VFECHA_INGRESO))/366);
      ELSIF VDIA_INGRESO BETWEEN 16 AND 31 THEN
         VANIOS := TRUNC((VDIAS+(VFECHA_ROL-VFECHA_INGRESO))/365);
      END IF;
   END IF;
   BEGIN
   SELECT VALOR INTO VANIOS_BASE
   FROM PARAMETROS_EMPRESAS
   WHERE PRMAPL_NOMBRE = 'ANTIGUEDAD_ROL' AND
         EMP_CODIGO = CEMPRESA;
   EXCEPTION WHEN NO_DATA_FOUND THEN
    RAISE_APPLICATION_ERROR(-20110,'OBTENER_NUMERO_ANIOS');
   END;
   IF VANIOS > VANIOS_BASE  THEN
      VANIOS := VANIOS - VANIOS_BASE+1; -- Este dato se obtiene de la empresa.
   ELSIF VANIOS = VANIOS_BASE THEN
      VANIOS := 1;
   ELSIF VANIOS < VANIOS_BASE THEN
      VANIOS := 0;
   END IF;
   RETURN VANIOS;
EXCEPTION
WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20110,'OBTENER_NUMERO_ANIOS'||SQLERRM);
END;
/* Calcula el valor de la multa por minutos de atrazo */
FUNCTION CALCULAR_MULTA
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,NNUMROL IN ROLES_DE_PAGOS.NUMERO%TYPE
 )
 RETURN NUMBER
 IS

VSUELDO_BASICO NUMBER(21, 6);
VMINUTOS_ATRASO NUMBER;
-- Calcula el Valor de la multa por minutos de atraso
BEGIN
   VSUELDO_BASICO:=0;
   VMINUTOS_ATRASO:=0;
   BEGIN
      SELECT VALOR INTO VSUELDO_BASICO
      FROM PARAMETROS_ROLES_EMPLEADO
      WHERE EMPROL_EMP_CODIGO = CEMPRESA AND
            EMPROL_CODIGO = NEMPLEADO AND
            PRMROL_EMP_CODIGO = CEMPRESA AND
            PRMROL_CODIGO = (SELECT CODIGO FROM PARAMETROS_ROLES
                             WHERE NOMBRE_AGRUPADOR = 'S' AND
                                   ESTADO_DE_DISPONIBILIDAD = 'D') AND
            ESTADO_DE_DISPONIBILIDAD = 'D';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
       VSUELDO_BASICO := 0;
   END;
   BEGIN
      SELECT VALOR INTO VMINUTOS_ATRASO
      FROM NOVEDADES_ROLES
      WHERE ROLPGS_EMP_CODIGO=CEMPRESA AND
            ROLPGS_NUMERO =NNUMROL AND
            EMPROL_EMP_CODIGO = CEMPRESA AND
            EMPROL_CODIGO = NEMPLEADO AND
            PRMROL_EMP_CODIGO = CEMPRESA AND
            PRMROL_CODIGO = (SELECT CODIGO FROM PARAMETROS_ROLES
                             WHERE NOMBRE_AGRUPADOR = 'A' AND
                                   ESTADO_DE_DISPONIBILIDAD = 'D') AND
            ESTADO <> 'A';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
       VMINUTOS_ATRASO:=0;
   END;
   IF (VMINUTOS_ATRASO + 20 BETWEEN 31 AND 45) THEN
      RETURN VSUELDO_BASICO * 0.05;
   ELSIF (VMINUTOS_ATRASO + 20 BETWEEN 56 AND 60) THEN
      RETURN VSUELDO_BASICO * 0.07;
   ELSIF VMINUTOS_ATRASO + 20 >60 THEN
      RETURN VSUELDO_BASICO * 0.1;
   END IF;
   RETURN 0;
EXCEPTION
WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20110,'CALCULAR_MULTA'||SQLERRM);
END;
/* Devuelve el número de días por enfermedad que se le paga el 50% al emp */
FUNCTION DEVOLVER_DIAS_ENFERMEDAD
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,NNUMROL IN ROLES_DE_PAGOS.NUMERO%TYPE
 )
 RETURN NUMBER
 IS

VDIAS_ENF NUMBER(2);
-- Devuelve el número de días de enfermedad por el cual se
-- le pagará el 50% del sueldo para ese día
BEGIN
   BEGIN
      SELECT NVDROL.VALOR INTO VDIAS_ENF
      FROM PARAMETROS_ROLES PRMROL,NOVEDADES_ROLES NVDROL
      WHERE PRMROL.EMP_CODIGO = CEMPRESA AND
            PRMROL.NOMBRE_AGRUPADOR = 'E'AND
            PRMROL.EMP_CODIGO = NVDROL.PRMROL_EMP_CODIGO AND
            PRMROL.EMP_CODIGO = NVDROL.EMPROL_EMP_CODIGO AND
            PRMROL.CODIGO = NVDROL.PRMROL_CODIGO AND
            NVDROL.EMPROL_CODIGO = NEMPLEADO AND
            NVDROL.ROLPGS_EMP_CODIGO = PRMROL.EMP_CODIGO AND
            ROLPGS_NUMERO = NNUMROL;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
         VDIAS_ENF:=0;
      WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR(-20110,'Error,Existe más de un parámetro con el agrupador DIAS ENFERMEDAD');
   END;
   IF VDIAS_ENF > 3 THEN
      RETURN 3;
   ELSE
      RETURN VDIAS_ENF;
   END IF;
EXCEPTION
WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20110,'DEVOLVER_DIAS_ENFERMEDAD'||SQLERRM);
END;
/* Calcular Base Imponible Prorrateada */
FUNCTION  CALCULAR_BASE_IMPONIBLE
  (CEMPRESA  IN  EMPRESAS.CODIGO%TYPE
  ,NEMPLEADO  IN  EMPLEADOS_ROLES.CODIGO%TYPE
  ,NNUMROL  IN  ROLES_DE_PAGOS.NUMERO%TYPE
  )
  RETURN  NUMBER
  IS
-- Program Data
VPERIODO NUMBER;
VBASE_IMPONIBLE NUMBER(21, 6);

-- PL/SQL Block
 BEGIN
-- Calcula el Impuesto a la Renta mensual 
BEGIN
   VBASE_IMPONIBLE:=0;
   SELECT ROUND(SUM(NVL(DEBE,(HABER*-1))),2) INTO VBASE_IMPONIBLE
   FROM MOVIMIENTOS_ROLES
   WHERE ROLPGS_EMP_CODIGO = CEMPRESA AND
         ROLPGS_NUMERO = NNUMROL AND
         EMPROL_EMP_CODIGO = CEMPRESA AND      
         EMPROL_CODIGO = NEMPLEADO AND
         PRMROL_EMP_CODIGO = CEMPRESA AND
         PRMROL_CODIGO IN (SELECT CODIGO 
                           FROM PARAMETROS_ROLES
                           WHERE EMP_CODIGO = CEMPRESA AND
                                 APLICA_IR = 'V' AND
                                 ESTADO_DE_DISPONIBILIDAD = 'D')AND
         ESTADO <> 'A';
   IF VBASE_IMPONIBLE >=0 THEN
        VPERIODO := 1;
 --     VPERIODO := OBTENER_PERIODO_EMPRESA(CEMPRESA,NULL,NULL);
      RETURN ROUND(VBASE_IMPONIBLE*VPERIODO*12,2);
   ELSIF VBASE_IMPONIBLE < 0 THEN
       RAISE_APPLICATION_ERROR(-20110,'Error, Base Imponible negativa para cálculo de Imp. Renta');
   ELSIF VBASE_IMPONIBLE IS NULL THEN
       RAISE_APPLICATION_ERROR(-20110,'Error, El Valor de la Base Imponible no puede ser nulo');
   END IF;
EXCEPTION
WHEN OTHERS THEN 
    RAISE_APPLICATION_ERROR(-20110,'CALCULAR_BASE_IMPONIBLE'||SQLERRM);
END;
END CALCULAR_BASE_IMPONIBLE; 
/* Devuelve el valor que corresponde a la antiguedad */
FUNCTION DEVUELVE_ANTIGUEDAD
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,NNUMROL IN ROLES_DE_PAGOS.NUMERO%TYPE
 )
 RETURN NUMBER
 IS

NANIOS NUMBER(2) := 0;
SUELDO_BASICO NUMBER(21, 6) := 0;
VALOR_ANTIGUEDAD NUMBER(21, 6);
NANIOS_ADICIONALES NUMBER(2) := 0;
-- Retorna el valor que le corresponde al empleado por antiguedad
BEGIN
/*   BEGIN
      SELECT VALOR INTO NANIOS_ADICIONALES
      FROM PARAMETROS_ROLES_EMPLEADO
      WHERE EMPROL_EMP_CODIGO = CEMPRESA AND
            EMPROL_CODIGO     = NEMPLEADO AND
            PRMROL_EMP_CODIGO = CEMPRESA AND
            PRMROL_CODIGO  IN (SELECT CODIGO
                               FROM PARAMETROS_ROLES
                               WHERE NOMBRE_AGRUPADOR = 'Ñ' AND
                                     EMP_CODIGO = CEMPRESA);
   EXCEPTION
   WHEN OTHERS THEN
       RAISE_APPLICATION_ERROR(-20110,'DEVUELVE ANTIGUEDAD'||SQLERRM);
   END;*/
   QMS$ERRORS.SHOW_DEBUG_INFO('*****DEVUELVE_ANTIGUEDAD******');
   QMS$ERRORS.SHOW_DEBUG_INFO('EMPLEADO '||NEMPLEADO||' ROL '||NNUMROL);
   NANIOS_ADICIONALES := 0;
   BEGIN
      SELECT VALOR INTO SUELDO_BASICO
      FROM PARAMETROS_ROLES_EMPLEADO
      WHERE EMPROL_EMP_CODIGO = CEMPRESA AND
            EMPROL_CODIGO     = NEMPLEADO AND
            PRMROL_EMP_CODIGO = CEMPRESA AND
            PRMROL_CODIGO  IN (SELECT CODIGO
                               FROM PARAMETROS_ROLES
                               WHERE NOMBRE_AGRUPADOR = 'B' AND
                                     EMP_CODIGO = CEMPRESA);
   EXCEPTION
   WHEN OTHERS THEN
       RAISE_APPLICATION_ERROR(-20110,'DEVUELVE ANTIGUEDAD'||SQLERRM);
   END;
   NANIOS:= ROLPRNZ.OBTENER_NUMERO_ANIOS(CEMPRESA,NEMPLEADO,NNUMROL);
   QMS$ERRORS.SHOW_DEBUG_INFO('NANIOS '||NANIOS);
   IF NANIOS+NANIOS_ADICIONALES = 4 THEN
      VALOR_ANTIGUEDAD := 0.13;
   ELSIF (NANIOS+NANIOS_ADICIONALES) > 4 THEN
      VALOR_ANTIGUEDAD := 0.13+ SUELDO_BASICO * .05 * ((NANIOS+NANIOS_ADICIONALES)-4);
      IF VALOR_ANTIGUEDAD > SUELDO_BASICO THEN
         VALOR_ANTIGUEDAD := SUELDO_BASICO;
      END IF;
   ELSE
      VALOR_ANTIGUEDAD := 0;
   END IF;
   QMS$ERRORS.SHOW_DEBUG_INFO('VALOR ANTIGUEDAD '||VALOR_ANTIGUEDAD);
   RETURN VALOR_ANTIGUEDAD;
EXCEPTION
WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20110,'DEVUELVE ANTIGUEDAD'||SQLERRM);
END;
/* Obtener el período de pago del Rol */
FUNCTION OBTENER_PERIODO_EMPRESA
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,NNUMROL IN ROLES_DE_PAGOS.NUMERO%TYPE
 )
 RETURN NUMBER
 IS

VPERIODO NUMBER(1);
--Obtiene el período de pago de la empresa, puede ser 1,2 o 4
BEGIN
   SELECT VALOR INTO VPERIODO
   FROM PARAMETROS_EMPRESAS
   WHERE PRMAPL_NOMBRE ='PERIODO_ROL' AND
         EMP_CODIGO = CEMPRESA;
   IF VPERIODO IS NOT NULL THEN
      RETURN VPERIODO;
   ELSE
      RETURN 1;
   END IF;
END;
/* Genera el Pago de provisiones */
FUNCTION PAGAR_PROVISION
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,CPARAMETRO IN PARAMETROS_ESPECIALES.PRMROL_CODIGO%TYPE
 ,NANIO IN PAGOS_ESPECIALES.NUMERO%TYPE
 ,NMES_INICIAL IN PARAMETROS_ESPECIALES.MES_INICIAL%TYPE
 ,NMES_FINAL IN PARAMETROS_ESPECIALES.MES_FINAL%TYPE
 )
 RETURN NUMBER
 IS

VVALOR NUMBER(21, 6);
VFECHA DATE;
VINTERVIENE VARCHAR2(5);
VPROVISION NUMBER(21, 6);
VANIO NUMBER(4);
VFECHA_INICIAL DATE;
VFECHA_FINAL DATE;
VANIO_ANTERIOR NUMBER(4);
-- Calcula el valor que corresponde al empleado por pago de provisiones
CURSOR PARAMETROS IS
SELECT PRMROL_CODIGO
FROM DATOS_INTERVIENEN
WHERE PRMESP_PRMROL_EMP_CODIGO = CEMPRESA AND
      PRMESP_PRMROL_CODIGO     = CPARAMETRO AND
      PRMROL_EMP_CODIGO        = CEMPRESA AND
      ESTADO_DE_DISPONIBILIDAD = 'D';
BEGIN
   ROLGNR.OBTENER_FECHAS(NMES_INICIAL,NMES_FINAL,NANIO,VFECHA_INICIAL,VFECHA_FINAL);
   VVALOR:= 0;
   VPROVISION:=0;
   OPEN PARAMETROS;
   LOOP
      FETCH PARAMETROS INTO VINTERVIENE;
      EXIT WHEN PARAMETROS%NOTFOUND;
      SELECT SUM (NVL(DEBE,(HABER*-1))) INTO VVALOR
      FROM MOVIMIENTOS_ROLES
      WHERE ROLPGS_EMP_CODIGO = CEMPRESA AND
            EMPROL_EMP_CODIGO = CEMPRESA AND
            EMPROL_CODIGO = NEMPLEADO AND
            PRMROL_EMP_CODIGO = CEMPRESA AND
            PRMROL_CODIGO = VINTERVIENE AND
            (FECHA BETWEEN  VFECHA_INICIAL AND VFECHA_FINAL) AND
            ESTADO <> 'A';
      IF VVALOR IS NULL THEN
         VVALOR :=0;
      END IF;
      VPROVISION:= VPROVISION +VVALOR;
   END LOOP;
   CLOSE PARAMETROS;
   RETURN VPROVISION;
EXCEPTION
WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20110,'PAGAR PROVISION'||SQLERRM);
END;
/* Genera el Pago de provisiones */
FUNCTION PAGAR_FONDO_RESERVA
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,CPARAMETRO IN PARAMETROS_ESPECIALES.PRMROL_CODIGO%TYPE
 ,NANIO IN PAGOS_ESPECIALES.NUMERO%TYPE
 ,NMES_INICIAL IN PARAMETROS_ESPECIALES.MES_INICIAL%TYPE
 ,NMES_FINAL IN PARAMETROS_ESPECIALES.MES_FINAL%TYPE
 )
 RETURN NUMBER
 IS

VVALOR NUMBER(21, 6);
VFECHA DATE;
VINTERVIENE VARCHAR2(5);
VPROVISION NUMBER(21, 6);
VANIO NUMBER(4);
VFECHA_INICIAL DATE;
VFECHA_INGRESO DATE;
VANIOS NUMBER(2);
VFECHA_FINAL DATE;
VANIO_ANTERIOR NUMBER(4);
-- Calcula el valor que corresponde al empleado por pago de provisiones
CURSOR PARAMETROS IS
SELECT PRMROL_CODIGO
FROM DATOS_INTERVIENEN
WHERE PRMESP_PRMROL_EMP_CODIGO = CEMPRESA AND
      PRMESP_PRMROL_CODIGO     = CPARAMETRO AND
      PRMROL_EMP_CODIGO        = CEMPRESA AND
      ESTADO_DE_DISPONIBILIDAD = 'D';
BEGIN
   ROLGNR.OBTENER_FECHAS(NMES_INICIAL,NMES_FINAL,NANIO,VFECHA_INICIAL,VFECHA_FINAL);
   VVALOR:= 0;
   VPROVISION:=0;
   SELECT TO_DATE(TO_CHAR(FECHA_DE_INGRESO,'DD/MM/YYYY'))INTO VFECHA_INGRESO
   FROM EMPLEADOS_ROLES
   WHERE EMP_CODIGO = CEMPRESA AND
         CODIGO = NEMPLEADO;
   VANIOS := TRUNC((VFECHA_FINAL-VFECHA_INGRESO)/365);
   IF VANIOS > 0 THEN
      OPEN PARAMETROS;
      LOOP
         FETCH PARAMETROS INTO VINTERVIENE;
         EXIT WHEN PARAMETROS%NOTFOUND;
         SELECT SUM (NVL(DEBE,(HABER*-1))) INTO VVALOR
         FROM MOVIMIENTOS_ROLES
         WHERE ROLPGS_EMP_CODIGO = CEMPRESA AND
            EMPROL_EMP_CODIGO = CEMPRESA AND
            EMPROL_CODIGO = NEMPLEADO AND
            PRMROL_EMP_CODIGO = CEMPRESA AND
            PRMROL_CODIGO = VINTERVIENE AND
            (FECHA BETWEEN  VFECHA_INICIAL AND VFECHA_FINAL) AND
            ESTADO <> 'A';
         IF VVALOR IS NULL THEN
            VVALOR := 0;
         END IF;
         VPROVISION := VPROVISION +VVALOR;
      END LOOP;
      CLOSE PARAMETROS;
      RETURN VPROVISION;
   ELSE
      RETURN 0;
   END IF;
EXCEPTION
WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20110,'PAGAR FONDO DE RESERVA'||SQLERRM);
END;
/* Calcula el número de cargas familiares por empleado */
FUNCTION OBTENER_CARGAS_FAMILIARES
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,NNUMROL IN ROLES_DE_PAGOS.NUMERO%TYPE
 )
 RETURN NUMBER
 IS

VNUMCARGAS NUMBER(2);
-- Calcula el número de cargas que tiene el empleado
-- para asignarlo al parámetro (cargas familiares) del rol
BEGIN
   SELECT COUNT(NUMERO) INTO VNUMCARGAS
   FROM CARGAS_FAMILIARES
   WHERE EMPROL_EMP_CODIGO = CEMPRESA AND
         EMPROL_CODIGO = NEMPLEADO AND
         ESTADO_DE_DISPONIBILIDAD = 'D';
   RETURN VNUMCARGAS;
EXCEPTION
WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20110,'OBTENER_CARGAS_FAMILIARES'||SQLERRM);
END;
/* Calcular la suma total de un valor */
FUNCTION OBTENER_TOTAL_PARAMETRO
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,CPARAMETRO IN PARAMETROS_ROLES.CODIGO%TYPE
 ,NANIO IN ROLES_DE_PAGOS.ANO%TYPE
 ,NMES_INICIAL IN PARAMETROS_ESPECIALES.MES_INICIAL%TYPE
 ,NMES_FINAL IN PARAMETROS_ESPECIALES.MES_FINAL%TYPE
 )
 RETURN NUMBER
 IS

VFECHA_INICIAL DATE;
VINTERVIENE VARCHAR2(5);
VVALOR NUMBER(21, 6);
VTOTAL NUMBER(21, 6);
VFECHA_FINAL DATE;
-- Calcula el valor total de un parametro que registra un movimiento del rol o
-- un movimiento de pagos especiales o una liquidación
CURSOR PARAMETROS IS
SELECT PRMROL_CODIGO
FROM DATOS_INTERVIENEN
WHERE PRMESP_PRMROL_EMP_CODIGO = CEMPRESA AND
      PRMESP_PRMROL_CODIGO     = CPARAMETRO AND
      PRMROL_EMP_CODIGO        = CEMPRESA AND
      ESTADO_DE_DISPONIBILIDAD = 'D';
BEGIN
   ROLGNR.OBTENER_FECHAS(NMES_INICIAL,NMES_FINAL,NANIO,VFECHA_INICIAL,VFECHA_FINAL);
   VVALOR:= 0;
   VTOTAL:=0;
   OPEN PARAMETROS;
   LOOP
      FETCH PARAMETROS INTO VINTERVIENE;
      EXIT WHEN PARAMETROS%NOTFOUND;
      SELECT SUM (NVL(DEBE,HABER)) INTO VVALOR
      FROM MOVIMIENTOS_TOTALES
      WHERE EMPROL_EMP_CODIGO = CEMPRESA AND
            EMPROL_CODIGO = NEMPLEADO AND
            PRMROL_EMP_CODIGO = CEMPRESA AND
            PRMROL_CODIGO = VINTERVIENE AND
            (FECHA BETWEEN  VFECHA_INICIAL AND VFECHA_FINAL);
      IF VVALOR IS NULL THEN
         VVALOR :=0;
      END IF;
      VTOTAL:= VTOTAL +VVALOR;
   END LOOP;
   CLOSE PARAMETROS;
   RETURN VTOTAL;
EXCEPTION
WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20110,'OBTENER TOTAL PARAMETRO'||SQLERRM);
END;
/* Calcular el Impuesto a la Renta */
FUNCTION  CALCULAR_IMPUESTO_RENTA
  (CEMPRESA  IN  EMPRESAS.CODIGO%TYPE
  ,NEMPLEADO  IN  EMPLEADOS_ROLES.CODIGO%TYPE
  ,NNUMROL  IN  ROLES_DE_PAGOS.NUMERO%TYPE
  )
  RETURN  NUMBER
  IS
-- Program Data
VPRM_APORTE_IESS VARCHAR2(5);
VPRM_INGRESOS VARCHAR2(5);
VMES_ROL NUMBER(2);
VIMPUESTO NUMBER(21, 6);
VANIO_ROL NUMBER(4);
VIMP_RENTA NUMBER(21, 6);
VBASE_IMPONIBLE NUMBER(21, 6);
VTOTAL_INGRESOS NUMBER(21, 6);
VTOTAL_APORTE_IESS NUMBER;
VPERIODO NUMBER(1);
VANIO_RENTA NUMBER(4);
VPRM_IMPUESTO VARCHAR2(5);
VBASE NUMBER(21, 6);
VLIMINF NUMBER(21, 6);
VEXEDENTE NUMBER(3);
VTOTAL_IMPRENTA NUMBER(21, 6);
VLIMSUP NUMBER(21, 6);
nRebaja NUMBER:=0;

-- PL/SQL Block
 BEGIN
-- Calcula el Impuesto a la Renta mensual 
-- 07 / FEB /2007    JUAN CABRERA
--                   SE ANADE LA REBAJA ESPECIAL
BEGIN
   BEGIN
      SELECT ANO,MES INTO VANIO_ROL,VMES_ROL
      FROM ROLES_DE_PAGOS 
      WHERE EMP_CODIGO = CEMPRESA AND
            NUMERO = NNUMROL;
      SELECT MAX(TO_NUMBER(TO_CHAR(ANO_RIGE,'YYYY'))) INTO VANIO_RENTA
      FROM TABLAS_IMPUESTO_RENTA
      WHERE TO_NUMBER(TO_CHAR(ANO_RIGE,'YYYY')) <= VANIO_ROL; 
   EXCEPTION 
      WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR(-20110,'No existe una Tabla Actualizada de Impuesto a la Renta');
   END;
BEGIN  
   DECLARE 
   CURSOR DETALLES_RENTAS IS 
   SELECT LIMITE_INFERIOR,LIMITE_SUPERIOR,IMPUESTO_BASICO,IMPUESTO_EXEDENTE      
   FROM DETALLES_IMPUESTO_RENTA
   WHERE TO_NUMBER(TO_CHAR(TBLIMPRNT_ANO_RIGE,'YYYY'))= VANIO_RENTA;
   BEGIN
      VBASE_IMPONIBLE:=0;
      VIMPUESTO:=0;  
      VBASE_IMPONIBLE:= CALCULAR_BASE_IMPONIBLE(CEMPRESA,NEMPLEADO,NNUMROL); 
      IF VBASE_IMPONIBLE >0 THEN
         nRebaja:=CALCULAR_REBAJA_ESPECIAL(CEMPRESA,NEMPLEADO,NNUMROL); 
         VBASE_IMPONIBLE:=VBASE_IMPONIBLE-nRebaja;
         --VPERIODO := OBTENER_PERIODO_EMPRESA(CEMPRESA,NULL,NULL);
         VPERIODO := 1;
         OPEN DETALLES_RENTAS;
         LOOP
            FETCH DETALLES_RENTAS INTO VLIMINF,VLIMSUP,VBASE,VEXEDENTE;                
            EXIT WHEN DETALLES_RENTAS%NOTFOUND;
            IF ((VBASE_IMPONIBLE) BETWEEN VLIMINF AND VLIMSUP) THEN
                VIMPUESTO := ((VBASE + ((VEXEDENTE /100)* (VBASE_IMPONIBLE - VLIMINF)))/12)/VPERIODO; 
            END IF;
         END LOOP;
         CLOSE DETALLES_RENTAS;
      ELSIF VBASE_IMPONIBLE < 0 THEN
         RAISE_APPLICATION_ERROR(-20110,'Error, Base Imponible negativa para cálculo de Imp. Renta');
      END IF;
      IF VMES_ROL < 12 THEN  -- Si el mes no es diciembre, retorna el impuesto correpondiente  
         RETURN VIMPUESTO;
      ELSIF VMES_ROL = 12 THEN    
      -- Si se está calculando el impuesto a la renta de Diciembre, se debe hacer el ajuste
         BEGIN
            SELECT PRMROL_CODIGO INTO VPRM_INGRESOS
            FROM PARAMETROS_ESPECIALES
            WHERE REPORTE_ESPECIAL = 'ROLRPTFRM107' AND 
                  ORDEN = 1;
         EXCEPTION
         WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20110,'No se ha definido un parámetro especial para el total de ingresos ');
         END;
         BEGIN
            SELECT PRMROL_CODIGO INTO VPRM_APORTE_IESS
            FROM PARAMETROS_ESPECIALES
            WHERE REPORTE_ESPECIAL = 'ROLRPTFRM107' AND 
                  ORDEN = 2;
         EXCEPTION
         WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20110,'No se ha definido un parámetro especial para el aporte al iess ');
         END;
         BEGIN
            SELECT PRMROL_CODIGO INTO VPRM_IMPUESTO
            FROM PARAMETROS_ESPECIALES
            WHERE REPORTE_ESPECIAL = 'ROLRPTFRM107' AND 
                  ORDEN = 3;
         EXCEPTION
         WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20110,'No se ha definido un parámetro especial para el impuesto a la renta mensual');
         END;
         IF VPRM_INGRESOS IS NOT NULL  AND VPRM_IMPUESTO IS  NOT NULL AND VPRM_APORTE_IESS IS NOT NULL THEN
         -- Obtiene el total de ingresos  y el total de impuesto a la renta al año;
            VTOTAL_INGRESOS:= OBTENER_TOTAL_PARAMETRO(CEMPRESA,NEMPLEADO,VPRM_INGRESOS,VANIO_ROL,1,12);
            VTOTAL_APORTE_IESS := OBTENER_TOTAL_PARAMETRO(CEMPRESA,NEMPLEADO,VPRM_APORTE_IESS,VANIO_ROL,1,12);
            VTOTAL_IMPRENTA:= VIMPUESTO + OBTENER_TOTAL_PARAMETRO(CEMPRESA,NEMPLEADO,VPRM_IMPUESTO,VANIO_ROL,1,11);            
            OPEN DETALLES_RENTAS;
            LOOP
               FETCH DETALLES_RENTAS INTO VLIMINF,VLIMSUP,VBASE,VEXEDENTE;                
               EXIT WHEN DETALLES_RENTAS%NOTFOUND;
               IF ((VTOTAL_INGRESOS) BETWEEN VLIMINF AND VLIMSUP) THEN
                   VIMP_RENTA := VBASE + (VEXEDENTE /100)* ((VTOTAL_INGRESOS-VTOTAL_APORTE_IESS) - VLIMINF); 
               END IF;
            END LOOP;
            CLOSE DETALLES_RENTAS;
            IF VIMP_RENTA > VTOTAL_IMPRENTA THEN
            -- Si el impuesto real es mayor al total de impuesto retenido en el año 
            -- ajusta la diferencia en el impuesto de diciembre 
               VIMPUESTO:= VIMPUESTO + (VIMP_RENTA - VTOTAL_IMPRENTA);
            ELSIF VTOTAL_IMPRENTA > VIMP_RENTA THEN
               VIMPUESTO := VIMPUESTO - (VTOTAL_IMPRENTA-VIMP_RENTA);
            ELSIF VTOTAL_IMPRENTA = VIMP_RENTA THEN
               VIMPUESTO:= VIMPUESTO;
            END IF;
            IF VIMPUESTO > 0 THEN  
qms$errorS.show_debug_info('IMPUESTO RENTA '||VIMPUESTO);
               RETURN VIMPUESTO;
            ELSE   
               RETURN 0;
            END IF;
         END IF;
      END IF;
      RETURN 0;
   EXCEPTION
   WHEN OTHERS THEN 
       RAISE_APPLICATION_ERROR(-20110,'CALCULAR_IMPUESTO_RENTA'||SQLERRM);
   END;
END;
END;
END CALCULAR_IMPUESTO_RENTA;
/* Calcular Base Imponible Prorrateada */
FUNCTION  CALCULAR_REBAJA_ESPECIAL
  (CEMPRESA  IN  EMPRESAS.CODIGO%TYPE
  ,NEMPLEADO  IN  EMPLEADOS_ROLES.CODIGO%TYPE
  ,NNUMROL  IN  ROLES_DE_PAGOS.NUMERO%TYPE
  )
  RETURN  NUMBER
  IS
-- Program Data
VMES_ROL NUMBER;
VANIO_ROL NUMBER;
VANIO_RENTA NUMBER;
nLimInf NUMBER;
nEdad NUMBER;
vDiscapacitado CHAR(1);
nDev NUMBER:=0;
CURSOR DETALLES_RENTAS IS 
   SELECT DTLIMPRNT.LIMITE_SUPERIOR Limite_Inferior,
          ROUND((TRUNC(SYSDATE,'YYYY')-TRUNC(EMPROL.FECHA_DE_NACIMIENTO,'YYYY'))/365,0) EDAD,
DECODE (PRMROLEMP.ESTADO_DE_DISPONIBILIDAD,'D',DECODE(PRMROLEMP.VALOR,'1','V','F'),'F') DISCAPACITADO
   FROM DETALLES_IMPUESTO_RENTA DTLIMPRNT,EMPLEADOS_ROLES EMPROL,
        PARAMETROS_ROLES_EMPLEADO PRMROLEMP,PARAMETROS_ROLES PRMROL
   WHERE TO_NUMBER(TO_CHAR(TBLIMPRNT_ANO_RIGE,'YYYY'))= VANIO_RENTA
        AND DTLIMPRNT.LIMITE_INFERIOR=0
        AND EMPROL.CODIGO=NEMPLEADO
        AND EMPROL.EMP_CODIGO=CEMPRESA
        AND EMPROL.EMP_CODIGO=PRMROLEMP.EMPROL_EMP_CODIGO
        AND EMPROL.CODIGO=PRMROLEMP.EMPROL_CODIGO
        AND PRMROLEMP.PRMROL_EMP_CODIGO=PRMROL.EMP_CODIGO
        AND PRMROLEMP.PRMROL_CODIGO=PRMROL.CODIGO
        AND PRMROL.NOMBRE_AGRUPADOR='&'; -- BUSCAMOS SOLO PARA EL AGRUPADOR DE DISCAPACITADO

-- PL/SQL Block
BEGIN
-- Calcula el Impuesto a la Renta mensual 
   BEGIN
      SELECT ANO,MES INTO VANIO_ROL,VMES_ROL
      FROM ROLES_DE_PAGOS 
      WHERE EMP_CODIGO = CEMPRESA AND
            NUMERO = NNUMROL;
      SELECT MAX(TO_NUMBER(TO_CHAR(ANO_RIGE,'YYYY'))) INTO VANIO_RENTA
      FROM TABLAS_IMPUESTO_RENTA
      WHERE TO_NUMBER(TO_CHAR(ANO_RIGE,'YYYY')) <= VANIO_ROL; 
   EXCEPTION 
      WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR(-20110,'No existe una Tabla Actualizada de Impuesto a la Renta');
   END;
   BEGIN
      nDev:=0;
      OPEN DETALLES_RENTAS;
      FETCH DETALLES_RENTAS INTO nLimInf,nEdad,vDiscapacitado;
      CLOSE DETALLES_RENTAS;
      IF vDiscapacitado='V' THEN
-- si es discapacitado tiene una rebaja del Limite inferior x 3      
        ndev:=nLimInf*3;
      ELSIF nEdad>65 THEN
-- si es mayor de edad tiene una rebaja del Limite inferior x 2      
        ndev:=nLimInf*2;
      END IF;
-- caso contrario 0      
      RETURN nDev;
   EXCEPTION
   WHEN OTHERS THEN 
       RAISE_APPLICATION_ERROR(-20110,'CALCULAR_IMPUESTO_RENTA'||SQLERRM);
   END;
END CALCULAR_REBAJA_ESPECIAL; 
/* Calcular las horas por encima de 160 horas que se aplican para extras/novedades en el IESS*/
FUNCTION  CALCULAR_EXTRAS_HORAS
  (CEMPRESA  IN  EMPRESAS.CODIGO%TYPE
  ,NEMPLEADO  IN  EMPLEADOS_ROLES.CODIGO%TYPE
  ,NNUMROL  IN  ROLES_DE_PAGOS.NUMERO%TYPE
  )
  RETURN  NUMBER
  IS
-- Buscamos la novedad correspondiente al numero de horas trabajadas por el
-- empleado por horas
nHrsNvd NUMBER;
nDev NUMBER;
CURSOR cHrsExtHrs IS
      SELECT VALOR
      FROM NOVEDADES_ROLES
      WHERE ROLPGS_EMP_CODIGO=CEMPRESA AND
            ROLPGS_NUMERO =NNUMROL AND
            EMPROL_EMP_CODIGO = CEMPRESA AND
            EMPROL_CODIGO = NEMPLEADO AND
            PRMROL_EMP_CODIGO = CEMPRESA AND
            PRMROL_CODIGO = 'P0027';

BEGIN
  OPEN cHrsExtHrs;
  FETCH cHrsExtHrs INTO nHrsNvd;
  CLOSE cHrsExtHrs;
  IF nHrsNvd>160 THEN
    nDev:=nHrsNvd-160; -- se resta 160 horas al mes, porque lo demas es extra
  ELSE
    nDev:=0;
  END IF;
  RETURN nDev;
END CALCULAR_EXTRAS_HORAS; 
END ROLPRNZ;