/* Conforma las Compras, Notas de Débito y de Crédito en Compras */
PROCEDURE CONFOMAR_COMPRAS_NC_ND
 (CEMPCOD IN VARCHAR2
 ,CPERIODO IN VARCHAR2
 ,NMES IN NUMBER
 ,NANIO IN NUMBER
 )
 IS
VEXISTE_ERRORES VARCHAR2(1);
VFECHA DATE;
NNUM NUMBER(9);
CCODIGO_IVA VARCHAR2(2);
CODIGO_RF VARCHAR2(3);
VALOR_RETENIDO_RF NUMBER(21, 6) := 0;
NUMRET NUMBER(2) := 0;
SERIE_RF VARCHAR2(6);
SECUENCIA_RF VARCHAR2(7);
AUTORIZACION_SRI_RF VARCHAR2(10);
FECHA_RF DATE;
NOMBRE_PROVEEDOR VARCHAR2(60);
I NUMBER;
VALIDADOR NUMBER;
BEGIN
-- Este proceso crea las compras, notas de débito y notas de crédito
-- que van a ser declaradas al SRI, los datos son tomados de una vista
-- Este proceso crea las compras, notas de débito y notas de crédito
-- que van a ser declaradas al SRI, los datos son tomados de una vista
DECLARE
ERRORES_COMPRAS EXCEPTION;
PRAGMA EXCEPTION_INIT(ERRORES_COMPRAS,-20200);
CURSOR cCompras_NC_ND IS -- Cursor de compras, notas de débito y notas de crédito
SELECT *
FROM COMPRAS_SRI
WHERE TO_NUMBER(TO_CHAR(CMP_FECHA,'MM'))=nMes AND
        TO_NUMBER(TO_CHAR(CMP_FECHA,'YYYY'))=nAnio AND
      EMP_CODIGO = cEmpCod
ORDER BY FECHA_CONTABLE;                                                    
CURSOR cFctDpl IS 
  SELECT CMP_TIPO||'-'||CMP_CLAVE||' del '||CMP_FECHA COMPROBANTE
  FROM COMPRAS_SRI
  WHERE TO_NUMBER(TO_CHAR(CMP_FECHA,'MM'))=nMes AND
        TO_NUMBER(TO_CHAR(CMP_FECHA,'YYYY'))=nAnio AND
        EMP_CODIGO = cEmpCod AND
        (NRO_ID_DOCUMENTO,CODIGO_TIPO_COMPROBANTE,SERIE_COMPROBANTE,SECUENCIA_COMPROBANTE)
     IN (SELECT NRO_ID_DOCUMENTO,CODIGO_TIPO_COMPROBANTE,SERIE_COMPROBANTE,SECUENCIA_COMPROBANTE
--         NRO_AUTORIZACION
         FROM COMPRAS_SRI
         WHERE TO_NUMBER(TO_CHAR(CMP_FECHA,'MM'))=nMes AND
        TO_NUMBER(TO_CHAR(CMP_FECHA,'YYYY'))=nAnio AND
          EMP_CODIGO = cEmpCod
         HAVING COUNT(*)>1
         GROUP BY NRO_ID_DOCUMENTO,CODIGO_TIPO_COMPROBANTE,SERIE_COMPROBANTE,
           SECUENCIA_COMPROBANTE);
CURSOR cNcDpl is
  SELECT CMP_TIPO||'-'||CMP_CLAVE||' del '||CMP_FECHA Comprobante
  FROM NOTAS_CR_DB_SRI
  WHERE TO_NUMBER(TO_CHAR(CMP_FECHA,'MM'))=nMes AND
        TO_NUMBER(TO_CHAR(CMP_FECHA,'YYYY'))=nAnio AND
        EMP_CODIGO = cEmpCod AND
        (NRO_ID_DOCUMENTO,CODIGO_TIPO_COMPROBANTE,SERIE_NOTA,SECUENCIA_NOTA)
     IN (SELECT NRO_ID_DOCUMENTO,CODIGO_TIPO_COMPROBANTE,SERIE_NOTA,SECUENCIA_NOTA
         FROM NOTAS_CR_DB_SRI
         WHERE TO_NUMBER(TO_CHAR(CMP_FECHA,'MM'))=nMes AND
        TO_NUMBER(TO_CHAR(CMP_FECHA,'YYYY'))=nAnio AND
             EMP_CODIGO = cEmpCod
         HAVING COUNT(*)>1
         GROUP BY NRO_ID_DOCUMENTO,CODIGO_TIPO_COMPROBANTE,SERIE_NOTA,
           SECUENCIA_NOTA);
CURSOR cSecRtn IS
  SELECT TPOCMPEMP_TPOCMP_CODIGO||'-'||CMP_CLAVE||' del '||CMP_FECHA Comprobante
  FROM RETENCIONES
  WHERE (AUTORIZACION_SRI IS NULL OR SERIE_SRI IS NULL OR SECUENCIA_SRI IS NULL)
    AND ESTADO!='ANL' AND TPORTNEMP_EMP_CODIGO=cEmpCod
    AND TO_NUMBER(TO_CHAR(CMP_FECHA,'MM'))=nMes 
    AND TO_NUMBER(TO_CHAR(CMP_FECHA,'YYYY'))=nAnio;
CURSOR cComprasSRIRtn  IS
SELECT CMPNCNDSRI.IVA_EMP_CODIGO,CMPNCNDSRI.IVA_PERIODO,CMPNCNDSRI.NUMERO,
       CSRI.IVA TIPO_RET,
       SUBSTR(CSRI.CODIGO,1,3) CODIGO_RF,
       CSRI.PORCENTAJE PORCENTAJE_RF,
       CSRI.TOTAL_FACTURADO BASE_IMPONIBLE_RF,
       CSRI.TOTAL_RETENIDO VALOR_RETENIDO_RF,
       CSRI.SERIE_RF,
       CSRI.SECUENCIA_RF,
       CSRI.AUTORIZACION_RF
     FROM DETALLES_REOC_SRI CSRI,COMPRAS_NC_ND_SRI CMPNCNDSRI
     WHERE CSRI.EMP_CODIGO  = cEmpCod AND
          TO_CHAR(CSRI.FECHA,'MM/YYYY')=REPLACE(TO_CHAR(nMes,'00')||'/'||TO_CHAR(nAnio),' ','') AND
          CSRI.TOTAL_RETENIDO > 0 AND    
          CMPNCNDSRI.IVA_EMP_CODIGO=CSRI.EMP_CODIGO AND
          CMPNCNDSRI.IVA_PERIODO=cPeriodo AND
          CMPNCNDSRI.CMP_TIPO=CSRI.CMP_TIPO AND
          CMPNCNDSRI.CMP_CLAVE=CSRI.CMP_CLAVE;
TYPE tCmpSri  IS TABLE OF COMPRAS_NC_ND_SRI%ROWTYPE INDEX BY BINARY_INTEGER;
rCmpSri tCmpSri; -- Tabla en donde se guardan los datos antes de insertar
vTextoError VARCHAR2(4000);
BEGIN
   QMS$ERRORS.SHOW_DEBUG_INFO('Revisando si hay Facturas Duplicadas');
   FOR rSecRtn IN cSecRtn LOOP
     QMS$ERRORS.SHOW_DEBUG_INFO('Error: Retenciones sin llenar');
     vTextoError:=vTextoError||rSecRtn.Comprobante||','; 
     vEXISTE_ERRORES := 'V';
   END LOOP;
   FOR rFctDpl IN cFctDpl LOOP
     QMS$ERRORS.SHOW_DEBUG_INFO('Error: Facturas Duplicadas');
     vTextoError:=vTextoError||rFctDpl.Comprobante||','; 
     vEXISTE_ERRORES := 'V';
   END LOOP;
   QMS$ERRORS.SHOW_DEBUG_INFO('Revisando si hay NC/ND Duplicadas');
   FOR rNcDpl IN cNcDpl LOOP
     QMS$ERRORS.SHOW_DEBUG_INFO('Error: NC Duplicadas');
     vTextoError:=vTextoError||rNcDpl.Comprobante||','; 
     vEXISTE_ERRORES := 'V';
   END LOOP;                                       
   IF vEXISTE_ERRORES='V'  THEN
     QMS$ERRORS.SHOW_MESSAGE('SRI-00018',vTextoError);
   END IF;
   vEXISTE_ERRORES := 'F';
   CODIGO_RF:= NULL;
   VALOR_RETENIDO_RF:= NULL;
   VFECHA:= ROUND(TO_DATE('16/'||TO_CHAR(NMES)||'/'||TO_CHAR(NANIO),'DD/MM/YYYY'),'MM')-1;
   QMS$ERRORS.SHOW_DEBUG_INFO('Tablas de Referencia IVA');
   BEGIN
      SELECT CODIGO INTO cCODIGO_IVA
      FROM TABLAS_DE_REFERENCIAS
      WHERE CODIGO_TABLA = 'TABLA4' AND
            FECHA_VALIDEZ_DESDE <= vFecha AND
            FECHA_VALIDEZ_HASTA IS NOT NULL AND
            FECHA_VALIDEZ_HASTA >= vFecha;
   EXCEPTION
   WHEN OTHERS THEN
      BEGIN
         SELECT CODIGO INTO cCODIGO_IVA
         FROM TABLAS_DE_REFERENCIAS
         WHERE CODIGO_TABLA = 'TABLA4' AND
               FECHA_VALIDEZ_DESDE <= vFecha AND
               FECHA_VALIDEZ_HASTA IS NULL;
      EXCEPTION
      WHEN OTHERS THEN
         QMS$ERRORS.SHOW_MESSAGE('SRI-00002','Porcentaje de IVA');
      END;
   END;
   GNRL.ESCRIBIR_ERRORES('000000');
   i:=1;
   QMS$ERRORS.SHOW_DEBUG_INFO('Revisando Compra');
   FOR rCompras_NC_ND IN cCompras_NC_ND LOOP
      BEGIN
         SELECT DISTINCT beneficiario INTO NOMBRE_PROVEEDOR
         FROM comprobantes_por_revisar
         WHERE TPOCMPEMP_EMP_CODIGO=rCompras_NC_ND.EMP_CODIGO AND
               TPOCMPEMP_TPOCMP_CODIGO=rCompras_NC_ND.CMP_TIPO AND
               FECHA=rCompras_NC_ND.CMP_FECHA AND
               CLAVE=rCompras_NC_ND.CMP_CLAVE;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
          NOMBRE_PROVEEDOR:= '.';
      WHEN OTHERS THEN
          NOMBRE_PROVEEDOR:= '.';
      END;
/*      BEGIN
         SELECT DISTINCT SERIE_RF,SECUENCIA_RF,AUTORIZACION_RF,FECHA INTO
                         SERIE_RF,SECUENCIA_RF,AUTORIZACION_SRI_RF,FECHA_RF
         FROM DETALLES_REOC_SRI
         WHERE FECHA =  rCompras_NC_ND.CMP_FECHA AND
               EMP_CODIGO = rCompras_NC_ND.EMP_CODIGO  AND
               CMP_TIPO   = rCompras_NC_ND.CMP_TIPO AND
               CMP_CLAVE  = rCompras_NC_ND.CMP_CLAVE;               
      EXCEPTION
      WHEN OTHERS THEN*/
           SERIE_RF:= NULL;
           SECUENCIA_RF:= NULL;
           AUTORIZACION_SRI_RF:= NULL;
           FECHA_RF:= NULL;
--      END;
      QMS$ERRORS.SHOW_DEBUG_INFO('El tipo de comprobante es '||rCompras_NC_ND.CODIGO_TIPO_COMPROBANTE);
      IF TO_NUMBER(rCompras_NC_ND.CODIGO_TIPO_COMPROBANTE) IN (4,5) THEN
         QMS$ERRORS.SHOW_DEBUG_INFO('Va ha validar datos DC '||rCompras_NC_ND.CMP_TIPO||' '||rCompras_NC_ND.CMP_CLAVE||' '||rCompras_NC_ND.CMP_FECHA);
         VALIDADOR := VALIDAR_DC(rCompras_NC_ND.EMP_CODIGO,rCompras_NC_ND.NRO_ID_DOCUMENTO,rCompras_NC_ND.CODIGO_TIPO_COMPROBANTE,
                                 rCompras_NC_ND.FECHA_EMISION,rCompras_NC_ND.SERIE_COMPROBANTE,rCompras_NC_ND.SECUENCIA_COMPROBANTE,
                                 rCompras_NC_ND.ID_CREDITO_GASTO,rCompras_NC_ND.NRO_AUTORIZACION);
      ELSE
         QMS$ERRORS.SHOW_DEBUG_INFO('Va ha validar datos TL');
         VALIDADOR := GNRL.Validar_Datos_Sri('TL',rCompras_NC_ND.FECHA_CONTABLE,rCompras_NC_ND.NRO_ID_DOCUMENTO,
                                           rCompras_NC_ND.CODIGO_TIPO_COMPROBANTE,rCompras_NC_ND.FECHA_EMISION,
                                           rCompras_NC_ND.SERIE_COMPROBANTE,NULL,NULL,rCompras_NC_ND.SECUENCIA_COMPROBANTE,
                                           rCompras_NC_ND.NRO_AUTORIZACION,rCompras_NC_ND.ID_CREDITO_GASTO,NULL,
                                           NULL,NULL,rCompras_NC_ND.CMP_TIPO||' '||TO_CHAR(rCompras_NC_ND.CMP_CLAVE)||' '||TO_CHAR(rCompras_NC_ND.CMP_FECHA,'DD/MM/YYYY'),'E');
      END IF;
      QMS$ERRORS.SHOW_DEBUG_INFO('El resultado de validación es '||TO_CHAR(VALIDADOR));
      IF VALIDADOR > 0 THEN
         rCmpSri(i).IVA_EMP_CODIGO:=cEmpCod;
         rCmpSri(i).IVA_PERIODO:=cPeriodo;
         rCmpSri(i).TIPO_TRANSACCION := LPAD(TO_CHAR(VALIDADOR),2,'0');
         rCmpSri(i).IDENTIFICACION_PRV:=rCompras_NC_ND.NRO_ID_DOCUMENTO;
         rCmpSri(i).PROVEEDOR:=NOMBRE_PROVEEDOR;
         rCmpSri(i).CODIGO_TIPO_COMPROBANTE:=rCompras_NC_ND.CODIGO_TIPO_COMPROBANTE;
         rCmpSri(i).FECHA_EMISION:=NVL(rCompras_NC_ND.FECHA_EMISION,rCompras_NC_ND.FECHA_CONTABLE);
         rCmpSri(i).FECHA_CONTABLE:=rCompras_NC_ND.FECHA_CONTABLE;
         rCmpSri(i).FECHA_CADUCIDAD:=NVL(rCompras_NC_ND.FECHA_CADUCIDAD,rCompras_NC_ND.FECHA_CONTABLE);
         rCmpSri(i).SERIE_COMPROBANTE:=rCompras_NC_ND.SERIE_COMPROBANTE;
         rCmpSri(i).SECUENCIA_COMPROBANTE :=rCompras_NC_ND.SECUENCIA_COMPROBANTE;
         rCmpSri(i).AUTORIZACION_SRI:=rCompras_NC_ND.NRO_AUTORIZACION;
         IF rCompras_NC_ND.CODIGO_TIPO_COMPROBANTE = '11' THEN
            rCmpSri(i).SERIE_COMPROBANTE:='999999';
            rCmpSri(i).AUTORIZACION_SRI:='9999999999';
         END IF;
         rCmpSri(i).ID_CREDITO_GASTO:=rCompras_NC_ND.ID_CREDITO_GASTO;
         rCmpSri(i).BASE_IMPONIBLE_IVA:=rCompras_NC_ND.BASE_IMPONIBLE_IVA;
         rCmpSri(i).CODIGO_TARIFA_IVA:=cCODIGO_IVA;
         rCmpSri(i).BASE_IMPONIBLE_CERO:=rCompras_NC_ND.BASE_TARIFA_CERO;
         rCmpSri(i).IVA:=rCompras_NC_ND.IVA;
         rCmpSri(i).ICE:=rCompras_NC_ND.ICE;
         rCmpSri(i).MONTO_IVA_BIENES:=rCompras_NC_ND.IVA_BIENES;
         rCmpSri(i).CODIGO_IVA_BIENES:=rCompras_NC_ND.CODIGO_IVA_BIENES;
         rCmpSri(i).IVA_BIENES:=rCompras_NC_ND.IVA_RETENIDO_BIENES;
         rCmpSri(i).MONTO_IVA_SERVICIOS:=rCompras_NC_ND.IVA_SERVICIOS;
         rCmpSri(i).CODIGO_IVA_SERVICIOS:=rCompras_NC_ND.CODIGO_IVA_SERVICIOS;
         rCmpSri(i).IVA_SERVICIOS:=rCompras_NC_ND.IVA_RETENIDO_SERVICIOS;
         rCmpSri(i).DEVOLUCION:='S';
         rCmpSri(i).CMP_TIPO:=rCompras_NC_ND.CMP_TIPO;
         rCmpSri(i).CMP_FECHA:=rCompras_NC_ND.CMP_FECHA;
         rCmpSri(i).CMP_CLAVE:=rCompras_NC_ND.CMP_CLAVE;
         rCmpSri(i).SERIE_RF:= SERIE_RF;
         rCmpSri(i).SECUENCIA_RF:= SECUENCIA_RF;
         rCmpSri(i).AUTORIZACION_SRI_RF:= AUTORIZACION_SRI_RF;
         rCmpSri(i).FECHA_RF:= FECHA_RF;
--         QMS$ERRORS.SHOW_DEBUG_INFO('SE asignó el registro');
      ELSE
         vEXISTE_ERRORES := 'V';
--         QMS$ERRORS.SHOW_DEBUG_INFO('Existen Errores en el registro número '||rCmpSri(i).CMP_TIPO||' '||TO_CHAR(rCmpSri(i).CMP_CLAVE)||' '||TO_CHAR(rCmpSri(i).CMP_FECHA),'DD/MM/YYYY');
      END IF;
      SERIE_RF:= NULL;
      SECUENCIA_RF:= NULL;
      AUTORIZACION_SRI_RF:= NULL;
      FECHA_RF:= NULL;
      i:=i+1;
   END LOOP;
  IF vEXISTE_ERRORES = 'V' THEN
     QMS$ERRORS.SHOW_DEBUG_INFO('Existen Errores');
     QMS_TRANSACTION_MGT.CLOSE_TRANSACTION(QMS_TRANSACTION_MGT.get_trans_opened_by);
     COMMIT;
     RAISE ERRORES_COMPRAS;
  ELSE
  -- AHORA SI NO HA HABIDO NINGUN ERROR CREAMOS LAS COMPRAS
     QMS$ERRORS.SHOW_DEBUG_INFO('AHORA SI NO HA HABIDO NINGUN ERROR CREAMOS LAS COMPRAS');
     FOR I IN 1..rCmpSri.COUNT LOOP
       SELECT CMPSRI_SEQ.NEXTVAL INTO nNum
       FROM DUAL;
       INSERT INTO COMPRAS_NC_ND_SRI (IVA_EMP_CODIGO,IVA_PERIODO,NUMERO,TIPO_TRANSACCION,
                                    IDENTIFICACION_PRV,PROVEEDOR,CODIGO_TIPO_COMPROBANTE,FECHA_EMISION,
                                    FECHA_CONTABLE,FECHA_CADUCIDAD,SERIE_COMPROBANTE,SECUENCIA_COMPROBANTE,
                                    AUTORIZACION_SRI,ID_CREDITO_GASTO,BASE_IMPONIBLE_IVA,
                                    CODIGO_TARIFA_IVA,BASE_IMPONIBLE_CERO,IVA,ICE,MONTO_IVA_BIENES,
                                    CODIGO_IVA_BIENES,IVA_BIENES,MONTO_IVA_SERVICIOS,
                                    CODIGO_IVA_SERVICIOS,IVA_SERVICIOS,DEVOLUCION,CMP_TIPO,
                                    CMP_FECHA,CMP_CLAVE,USUARIO,SISTEMA_GENERA,CODIGO_RF,VALOR_RETENIDO_RF,
                                    SERIE_RF,SECUENCIA_RF,AUTORIZACION_SRI_RF,FECHA_RF)
       VALUES (rCmpSri(i).IVA_EMP_CODIGO,rCmpSri(i).IVA_PERIODO,nNum,rCmpSri(i).TIPO_TRANSACCION,
             rCmpSri(i).IDENTIFICACION_PRV,rCmpSri(i).PROVEEDOR,rCmpSri(i).CODIGO_TIPO_COMPROBANTE,
             rCmpSri(i).FECHA_EMISION,rCmpSri(i).FECHA_CONTABLE,rCmpSri(i).FECHA_CADUCIDAD,
             rCmpSri(i).SERIE_COMPROBANTE,rCmpSri(i).SECUENCIA_COMPROBANTE,
             rCmpSri(i).AUTORIZACION_SRI,LPAD(rCmpSri(i).ID_CREDITO_GASTO,2,'0'),rCmpSri(i).BASE_IMPONIBLE_IVA,
             rCmpSri(i).CODIGO_TARIFA_IVA,rCmpSri(i).BASE_IMPONIBLE_CERO,rCmpSri(i).IVA,
             rCmpSri(i).ICE,rCmpSri(i).MONTO_IVA_BIENES,rCmpSri(i).CODIGO_IVA_BIENES,
             rCmpSri(i).IVA_BIENES,rCmpSri(i).MONTO_IVA_SERVICIOS,rCmpSri(i).CODIGO_IVA_SERVICIOS,
             rCmpSri(i).IVA_SERVICIOS,rCmpSri(i).DEVOLUCION,rCmpSri(i).CMP_TIPO,rCmpSri(i).CMP_FECHA,
             rCmpSri(i).CMP_CLAVE,USER,'CNT',rCmpSri(i).CODIGO_RF,rCmpSri(i).VALOR_RETENIDO_RF,
             rCmpSri(i).SERIE_RF,rCmpSri(i).SECUENCIA_RF,rCmpSri(i).AUTORIZACION_SRI_RF,rCmpSri(i).FECHA_RF);
       IF TO_NUMBER(rCmpSri(i).CODIGO_TIPO_COMPROBANTE) IN (4,5) THEN
         BEGIN
          QMS$ERRORS.SHOW_DEBUG_INFO('Va a crear el comprobante afectado por la Nota de Crédito o Débito');
          INSERT INTO DETALLES_COMPROBANTES_AFECTADO(CMPNCNDSRI_IVA_EMP_CODIGO,CMPNCNDSRI_IVA_PERIODO,
                                                   CMPNCNDSRI_NUMERO,CODIGO_TIPO_COMPROBANTE,FECHA_EMISION,
                                                   SERIE_COMPROBANTE,SECUENCIA_COMPROBANTE,AUTORIZACION_SRI,
                                                   USUARIO)
          SELECT rCmpSri(i).IVA_EMP_CODIGO,rCmpSri(i).IVA_PERIODO,nNum,CODIGO_TIPO_COMPROBANTE_MOD,
               FECHA_EMISION_COMPROBANTE_MOD,SERIE_COMPROBANTE_MOD,SECUENCIA_COMPROBANTE_MOD,
               NRO_AUTORIZACION_MOD,USER
          FROM   NOTAS_CR_DB_SRI
          WHERE  FECHA_EMISION =rCmpSri(i).FECHA_EMISION AND
               EMP_CODIGO = rCmpSri(i).IVA_EMP_CODIGO AND
               NRO_ID_DOCUMENTO=rCmpSri(i).IDENTIFICACION_PRV AND
               CODIGO_TIPO_COMPROBANTE =rCmpSri(i).CODIGO_TIPO_COMPROBANTE AND               
               SERIE_NOTA = rCmpSri(i).SERIE_COMPROBANTE AND
               SECUENCIA_NOTA=rCmpSri(i).SECUENCIA_COMPROBANTE;
         EXCEPTION
         WHEN OTHERS THEN
           QMS$ERRORS.UNHANDLED_EXCEPTION ('No se pudo registrar los datos del comprobante afectado '||SQLERRM);
         END;
       END IF;
     END LOOP;
      ---LLAMAR AL PROCEDIMIENTO QUE VERIFICA SI HAY COMPROBANTES CON FACTURAS DUPLICADOS
     VALIDAR_FCT_DUPLICADAS(CEMPCOD,CPERIODO,NMES,NANIO,VFECHA);
-- AHORA CREAMOS LAS RETENCIONES EN LA FUENTE DEL SRI DE LAS COMPRAS
   QMS$ERRORS.SHOW_DEBUG_INFO('Creando Retenciones SRI');
   FOR rCmpSRIRtn IN cComprasSRIRtn LOOP
     IF rCmpSRIRtn.TIPO_RET='0' THEN
-- Solo si son RF creamos el detalle de las retenciones     
       INSERT INTO RETENCIONES_COMPRAS_SRI 
              (CMPNCNDSRI_IVA_EMP_CODIGO,CMPNCNDSRI_IVA_PERIODO,CMPNCNDSRI_NUMERO,CODIGO_RF,
               BASE_IMPONIBLE_RF,PORCENTAJE_RF,VALOR_RETENIDO_RF)
       VALUES (rCmpSRIRtn.IVA_EMP_CODIGO,rCmpSRIRtn.IVA_PERIODO,rCmpSRIRtn.NUMERO,
               rCmpSRIRtn.CODIGO_RF,rCmpSRIRtn.BASE_IMPONIBLE_RF ,
               rCmpSRIRtn.PORCENTAJE_RF,
               rCmpSRIRtn.VALOR_RETENIDO_RF);
     END IF;
-- ACTUALIZAMOS LA FECHA DE LAS RETENCIONES
       UPDATE COMPRAS_NC_ND_SRI
       SET FECHA_RF=CMP_FECHA,
           SERIE_RF=rCmpSRIRtn.SERIE_RF,
           SECUENCIA_RF=rCmpSRIRtn.SECUENCIA_RF,
           AUTORIZACION_SRI_RF=rCmpSRIRtn.AUTORIZACION_RF
       WHERE IVA_EMP_CODIGO=rCmpSRIRtn.IVA_EMP_CODIGO AND
             IVA_PERIODO=rCmpSRIRtn.IVA_PERIODO AND
             NUMERO=rCmpSRIRtn.NUMERO AND FECHA_RF IS NULL;
   END LOOP;
--     COMMIT;
  END IF;
EXCEPTION
  WHEN ERRORES_COMPRAS THEN
    RAISE;
  WHEN OTHERS THEN
    QMS$ERRORS.UNHANDLED_EXCEPTION ('Fallo en el procedimiento CONFORMAR_COMPRAS_NC_ND por error '||SQLERRM);
END;
END CONFOMAR_COMPRAS_NC_ND;