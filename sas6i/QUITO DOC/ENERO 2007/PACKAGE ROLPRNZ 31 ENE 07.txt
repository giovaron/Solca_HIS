CREATE OR REPLACE  PACKAGE BODY "SMS"."ROLPRNZ" IS 

/* Realiza el pago de un valor */
FUNCTION PAGAR_VALOR
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,CPARAMETRO IN PARAMETROS_ROLES.CODIGO%TYPE
 ,NANIO IN PAGOS_ESPECIALES.NUMERO%TYPE
 ,NMES_FINAL IN PARAMETROS_ESPECIALES.MES_FINAL%TYPE
 ,NMES_INICIAL IN PARAMETROS_ESPECIALES.MES_INICIAL%TYPE
 )
 RETURN NUMBER
 IS

VVALOR NUMBER(21, 6);
-- Calcula el valor que corresponde al empleado por pago de de un monto
BEGIN
   VVALOR:= 0;
   SELECT VALOR INTO VVALOR
   FROM PARAMETROS_ROLES
   WHERE EMP_CODIGO = CEMPRESA AND
         CODIGO = CPARAMETRO;
   IF VVALOR IS NULL THEN
      VVALOR :=0;
   END IF;
   RETURN VVALOR;
END;
/* Devuelve el valor 1 si el empleado ha trabajo más de un año */
FUNCTION OBTENER_CONSTANTE_UNO
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,NNUMROL IN ROLES_DE_PAGOS.NUMERO%TYPE
 )
 RETURN NUMBER
 IS

VANIO NUMBER(4);
VMES NUMBER(2);
VDIA NUMBER(2);
VFECHA_ROL DATE;
VDIA_INGRESO NUMBER(2);
FECHA_DE_SALIDA DATE;
FECHA_DE_INGRESO DATE;
VDIAS NUMBER := 0;
VANIOS NUMBER(2);
VSEMANA NUMBER(1);
VFECHA_INGRESO DATE;
--Si el empleado ha trabajado un año o más, retorna uno para calcualar el Fondo de
-- Reserva, de lo contrario retorna 0
CURSOR INGRESOS_SALIDAS IS  --Cursor de fechas de ingresos y egresos de empleados
SELECT FECHA_INGRESO,FECHA_SALIDA
FROM INGRESOS_SALIDAS_EMPLEADOS
WHERE EMPROL_EMP_CODIGO = CEMPRESA AND
      EMPROL_CODIGO = NEMPLEADO
      ORDER BY FECHA_INGRESO;
BEGIN
   OPEN INGRESOS_SALIDAS;
   LOOP
      FETCH INGRESOS_SALIDAS INTO FECHA_DE_INGRESO,FECHA_DE_SALIDA;
      EXIT WHEN INGRESOS_SALIDAS%NOTFOUND;
      VDIAS := VDIAS + (FECHA_DE_SALIDA - FECHA_DE_INGRESO);
   END LOOP;
   CLOSE INGRESOS_SALIDAS;
   BEGIN
      SELECT ANO,MES,SEMANA INTO VANIO,VMES,VSEMANA
      FROM ROLES_DE_PAGOS
      WHERE EMP_CODIGO = CEMPRESA AND
            NUMERO = NNUMROL;
   EXCEPTION WHEN NO_DATA_FOUND THEN
     RAISE_APPLICATION_ERROR(-20110,'OBTENER_CONSTANTE_UNO');
   END;
   VFECHA_ROL:= ROUND(TO_DATE('16/'||TO_CHAR(VMES,'09')||'/'||TO_CHAR(VANIO,'0009'),'DD/MM/YYYY'),'MM')-1 ;
   VDIA:= TRUNC(TO_NUMBER(TO_CHAR(VFECHA_ROL,'DD'))/(4/VSEMANA));
   IF VDIA IS NOT NULL THEN
     VFECHA_ROL:=TO_DATE(TO_CHAR(VDIA,'09')||'/'||TO_CHAR(VMES,'09')||'/'||TO_CHAR(VANIO,'0009'),'DD/MM/YYYY');
   END IF;
   BEGIN
   SELECT TO_DATE(TO_CHAR(FECHA_DE_INGRESO,'DD/MM/YYYY'))INTO VFECHA_INGRESO
   FROM EMPLEADOS_ROLES
   WHERE EMP_CODIGO = CEMPRESA AND
         CODIGO = NEMPLEADO;
   EXCEPTION WHEN NO_DATA_FOUND THEN
    RAISE_APPLICATION_ERROR(-20110,'OBTENER_CONSTANTE_UNO');
   END;
   VDIA_INGRESO:=TO_NUMBER(TO_CHAR(VFECHA_INGRESO,'DD'));
   IF VDIA_INGRESO BETWEEN 1 AND 15 THEN
      VANIOS := TRUNC((VDIAS+(VFECHA_ROL-VFECHA_INGRESO))/366);
   ELSIF VDIA_INGRESO BETWEEN 16 AND 31 THEN
      VANIOS := TRUNC((VDIAS+(VFECHA_ROL-VFECHA_INGRESO))/365);
   END IF;
   IF VANIOS >= 1 THEN
     RETURN 1;
   ELSE
     RETURN 0;
   END IF;
EXCEPTION
WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20110,'OBTENER_CONSTANTE_UNO'||SQLERRM);
END;
/* Devuelve el valor 1 si el empleado ha trabajo más de un año */
FUNCTION DEVUELVE_BONO_SOLCA
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,NNUMROL IN ROLES_DE_PAGOS.NUMERO%TYPE
 )
 RETURN NUMBER
 IS

VDATO NUMBER;
VBONO NUMBER;
BEGIN
--Es una función especial para el Rol de Pagos  de Solca, que devuelve
-- uno o cero en casos especiales de Bono Solca.
   VDATO:= ROLPRNZ.OBTENER_CONSTANTE_UNO(CEMPRESA,NEMPLEADO,NNUMROL);
   IF VDATO  = 1 AND NEMPLEADO <> 96 THEN
      RETURN 1;
   ELSE
      SELECT COUNT(PRMROL_CODIGO) INTO VBONO
      FROM PARAMETROS_ROLES_EMPLEADO
      WHERE EMPROL_EMP_CODIGO = CEMPRESA AND
            EMPROL_CODIGO = NEMPLEADO AND
            PRMROL_EMP_CODIGO = CEMPRESA AND
            PRMROL_CODIGO = 'P0028' AND
            ESTADO_DE_DISPONIBILIDAD = 'D';
      IF VBONO = 0 THEN
         RETURN 0;
      ELSE
         RETURN 1;
      END IF;
   END IF;
EXCEPTION
WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20110,'DEVUELVE_BONO_SOLCA'||SQLERRM);
END;

/* Devuelve el porcentaje del sueldo para el calculo del subsidio por responasabilidad */
FUNCTION CALCULA_RESPONSABILIDAD
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,NNUMROL IN ROLES_DE_PAGOS.NUMERO%TYPE
 )
 RETURN NUMBER
 IS

VDATO NUMBER := 0;
VPORCENTAJE NUMBER := 0;
BEGIN
--Es una función especial para el Rol de Pagos  de Solca Quito, que devuelve
--el porcentaje del sueldo dependiendo del grado del cargo del empleado.   
   SELECT NVL(GRADO_RESPONSABILIDAD,0) INTO VDATO
   FROM EMPLEADOS_ROLES E,CARGOS_EMPLEADOS C
   WHERE  E.EMP_CODIGO = CEMPRESA AND
          E.CODIGO = NEMPLEADO AND
          C.EMP_CODIGO = CEMPRESA AND
          E.CRGEMP_EMP_CODIGO = C.EMP_CODIGO AND
          E.CRGEMP_CODIGO = C.CODIGO;
   IF TO_NUMBER(VDATO) > 0 THEN
      SELECT NVL(TO_NUMBER(RV_ABBREVIATION)/100,0) INTO VPORCENTAJE
      FROM CG_REF_CODES
      WHERE RV_DOMAIN = 'GRADO_RESPONSABILIDAD' AND
            RV_LOW_VALUE = VDATO;
   ELSE 
      VPORCENTAJE := 0;
   END IF;            
   RETURN VPORCENTAJE;
EXCEPTION
WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20110,'CALCULA_RESPONSABILIDAD'||SQLERRM);
END;

/* Devuelve el valor 1 si el empleado ha trabajo más de un año */
FUNCTION DEVUELVE_MESES
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,NNUMROL IN ROLES_DE_PAGOS.NUMERO%TYPE
 )
 RETURN NUMBER
 IS

VANIO NUMBER(4);
VMES NUMBER(2);
VDIA NUMBER(2);
VFECHA_ROL DATE;
VDIA_INGRESO NUMBER(2);
FECHA_DE_SALIDA DATE;
FECHA_DE_INGRESO DATE;
VMESES NUMBER := 0;
VANIOS NUMBER(2);
VSEMANA NUMBER(1);
VFECHA_INGRESO DATE;
--Si el empleado ha trabajado un año o más, retorna 12 para calcualar el Bono Dia de la salud
-- o el bono día del médico este proceso se usa solamente en SOLCA.
BEGIN
   BEGIN
      SELECT ANO,MES,SEMANA INTO VANIO,VMES,VSEMANA
      FROM ROLES_DE_PAGOS
      WHERE EMP_CODIGO = CEMPRESA AND
            NUMERO = NNUMROL;
      EXCEPTION WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20110,'DEVUELVE_MES');
   END;
   IF VMES = 1 THEN
      VFECHA_ROL:= ROUND(TO_DATE('16/'||TO_CHAR(12,'09')||'/'||TO_CHAR(VANIO-1,'0009'),'DD/MM/YYYY'),'MM')-1 ;
   ELSIF VMES > 1 THEN
      VFECHA_ROL:= ROUND(TO_DATE('16/'||TO_CHAR(VMES-1,'09')||'/'||TO_CHAR(VANIO,'0009'),'DD/MM/YYYY'),'MM')-1 ;
   END IF;
   BEGIN
   SELECT TO_DATE(TO_CHAR(FECHA_DE_INGRESO,'DD/MM/YYYY'))INTO VFECHA_INGRESO
   FROM EMPLEADOS_ROLES
   WHERE EMP_CODIGO = CEMPRESA AND
         CODIGO = NEMPLEADO;
   EXCEPTION WHEN NO_DATA_FOUND THEN
    RAISE_APPLICATION_ERROR(-20110,'DEVUELVE_MESES');
   END;
   VMESES := MONTHS_BETWEEN(VFECHA_ROL,VFECHA_INGRESO);
   IF VMESES > 12 THEN
     RETURN 12;
   ELSIF VMESES < 0 THEN
     RETURN 0;
   ELSIF VMESES BETWEEN 0 AND 12 THEN
     RETURN VMESES;
   END IF;
EXCEPTION
WHEN OTHERS THEN
     RAISE_APPLICATION_ERROR(-20110,'DEVUELVE_MESES'||SQLERRM);
END;
/* Obtiene el número de años de servicio del empleado a la empresa */
FUNCTION OBTENER_NUMERO_ANIOS
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,NNUMROL IN ROLES_DE_PAGOS.NUMERO%TYPE
 )
 RETURN NUMBER
 IS

VFECHA_ROL DATE;
VANIO NUMBER(4);
VMES NUMBER(2);
VSEMANA NUMBER(1);
VDIA NUMBER(2);
VDIA_INGRESO NUMBER(2);
VDIAS NUMBER := 0;
VFECHA_INGRESO DATE;
VFECHA_ING_PUBLICA DATE;
FECHA_DE_INGRESO DATE;
FECHA_DE_SALIDA DATE;
VANIOS NUMBER(2);
VANIOS_BASE NUMBER(1);
-- Obtiene el número de años de servicio del empleado que gana por antiguedad
CURSOR INGRESOS_SALIDAS IS  --Cursor de fechas de ingresos y egresos de empleados
SELECT FECHA_INGRESO,FECHA_SALIDA
FROM INGRESOS_SALIDAS_EMPLEADOS
WHERE EMPROL_EMP_CODIGO = CEMPRESA AND
      EMPROL_CODIGO = NEMPLEADO AND OBSERVACIONES NOT LIKE 'TOMADO DEL SISTEMA DE RECURSOS HUMANOS%'
      ORDER BY FECHA_INGRESO;

BEGIN
   OPEN INGRESOS_SALIDAS;
   LOOP
      FETCH INGRESOS_SALIDAS INTO FECHA_DE_INGRESO,FECHA_DE_SALIDA;
      EXIT WHEN INGRESOS_SALIDAS%NOTFOUND;
      VDIAS := VDIAS + (FECHA_DE_SALIDA - FECHA_DE_INGRESO);
   END LOOP;
   CLOSE INGRESOS_SALIDAS;
   BEGIN
      SELECT ANO,MES,SEMANA INTO VANIO,VMES,VSEMANA
      FROM ROLES_DE_PAGOS
      WHERE EMP_CODIGO = CEMPRESA AND
            NUMERO = NNUMROL;
   EXCEPTION WHEN NO_DATA_FOUND THEN
     RAISE_APPLICATION_ERROR(-20110,'OBTENER_NUMERO_ANIOS');
   END;
   VFECHA_ROL:= ROUND(TO_DATE('16/'||TO_CHAR(VMES,'09')||'/'||TO_CHAR(VANIO,'0009'),'DD/MM/YYYY'),'MM')-1 ;
   VDIA:= TRUNC(TO_NUMBER(TO_CHAR(VFECHA_ROL,'DD'))/(4/VSEMANA));
   IF VDIA IS NOT NULL THEN
     VFECHA_ROL:=TO_DATE(TO_CHAR(VDIA,'09')||'/'||TO_CHAR(VMES,'09')||'/'||TO_CHAR(VANIO,'0009'),'DD/MM/YYYY');
   END IF;
   BEGIN
   SELECT TO_DATE(TO_CHAR(FECHA_DE_INGRESO,'DD/MM/YYYY')),TO_DATE(TO_CHAR(FECHA_ING_PUBLICA,'DD/MM/YYYY'))INTO VFECHA_INGRESO,VFECHA_ING_PUBLICA
   FROM EMPLEADOS_ROLES
   WHERE EMP_CODIGO = CEMPRESA AND
         CODIGO = NEMPLEADO;
   EXCEPTION WHEN NO_DATA_FOUND THEN
    RAISE_APPLICATION_ERROR(-20110,'OBTENER_NUMERO_ANIOS');
   END;
   IF VFECHA_ING_PUBLICA IS NOT NULL THEN
      VDIA_INGRESO:=TO_NUMBER(TO_CHAR(VFECHA_ING_PUBLICA,'DD'));
      IF VDIA_INGRESO BETWEEN 1 AND 15 THEN
         VANIOS := TRUNC((VDIAS+(VFECHA_ROL-VFECHA_ING_PUBLICA))/366);
      ELSIF VDIA_INGRESO BETWEEN 16 AND 31 THEN
         VANIOS := TRUNC((VDIAS+(VFECHA_ROL-VFECHA_ING_PUBLICA))/365);
      END IF;
   ELSE
      VDIA_INGRESO:=TO_NUMBER(TO_CHAR(VFECHA_INGRESO,'DD'));
      IF VDIA_INGRESO BETWEEN 1 AND 15 THEN
         VANIOS := TRUNC((VDIAS+(VFECHA_ROL-VFECHA_INGRESO))/366);
      ELSIF VDIA_INGRESO BETWEEN 16 AND 31 THEN
         VANIOS := TRUNC((VDIAS+(VFECHA_ROL-VFECHA_INGRESO))/365);
      END IF;
   END IF;
   BEGIN
   SELECT VALOR INTO VANIOS_BASE
   FROM PARAMETROS_EMPRESAS
   WHERE PRMAPL_NOMBRE = 'ANTIGUEDAD_ROL' AND
         EMP_CODIGO = CEMPRESA;
   EXCEPTION WHEN NO_DATA_FOUND THEN
    RAISE_APPLICATION_ERROR(-20110,'OBTENER_NUMERO_ANIOS');
   END;
   IF VANIOS > VANIOS_BASE  THEN
      VANIOS := VANIOS - VANIOS_BASE+1; -- Este dato se obtiene de la empresa.
   ELSIF VANIOS = VANIOS_BASE THEN
      VANIOS := 1;
   ELSIF VANIOS < VANIOS_BASE THEN
      VANIOS := 0;
   END IF;
   RETURN VANIOS;
EXCEPTION
WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20110,'OBTENER_NUMERO_ANIOS'||SQLERRM);
END;
/* Calcula el valor de la multa por minutos de atrazo */
FUNCTION CALCULAR_MULTA
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,NNUMROL IN ROLES_DE_PAGOS.NUMERO%TYPE
 )
 RETURN NUMBER
 IS

VSUELDO_BASICO NUMBER(21, 6);
VMINUTOS_ATRASO NUMBER;
-- Calcula el Valor de la multa por minutos de atraso
BEGIN
   VSUELDO_BASICO:=0;
   VMINUTOS_ATRASO:=0;
   BEGIN
      SELECT VALOR INTO VSUELDO_BASICO
      FROM PARAMETROS_ROLES_EMPLEADO
      WHERE EMPROL_EMP_CODIGO = CEMPRESA AND
            EMPROL_CODIGO = NEMPLEADO AND
            PRMROL_EMP_CODIGO = CEMPRESA AND
            PRMROL_CODIGO = (SELECT CODIGO FROM PARAMETROS_ROLES
                             WHERE NOMBRE_AGRUPADOR = 'S' AND
                                   ESTADO_DE_DISPONIBILIDAD = 'D') AND
            ESTADO_DE_DISPONIBILIDAD = 'D';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
       VSUELDO_BASICO := 0;
   END;
   BEGIN
      SELECT VALOR INTO VMINUTOS_ATRASO
      FROM NOVEDADES_ROLES
      WHERE ROLPGS_EMP_CODIGO=CEMPRESA AND
            ROLPGS_NUMERO =NNUMROL AND
            EMPROL_EMP_CODIGO = CEMPRESA AND
            EMPROL_CODIGO = NEMPLEADO AND
            PRMROL_EMP_CODIGO = CEMPRESA AND
            PRMROL_CODIGO = (SELECT CODIGO FROM PARAMETROS_ROLES
                             WHERE NOMBRE_AGRUPADOR = 'A' AND
                                   ESTADO_DE_DISPONIBILIDAD = 'D') AND
            ESTADO <> 'A';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
       VMINUTOS_ATRASO:=0;
   END;
   IF (VMINUTOS_ATRASO + 20 BETWEEN 31 AND 45) THEN
      RETURN VSUELDO_BASICO * 0.05;
   ELSIF (VMINUTOS_ATRASO + 20 BETWEEN 56 AND 60) THEN
      RETURN VSUELDO_BASICO * 0.07;
   ELSIF VMINUTOS_ATRASO + 20 >60 THEN
      RETURN VSUELDO_BASICO * 0.1;
   END IF;
   RETURN 0;
EXCEPTION
WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20110,'CALCULAR_MULTA'||SQLERRM);
END;
/* Devuelve el número de días por enfermedad que se le paga el 50% al emp */
FUNCTION DEVOLVER_DIAS_ENFERMEDAD
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,NNUMROL IN ROLES_DE_PAGOS.NUMERO%TYPE
 )
 RETURN NUMBER
 IS

VDIAS_ENF NUMBER(2);
-- Devuelve el número de días de enfermedad por el cual se
-- le pagará el 50% del sueldo para ese día
BEGIN
   BEGIN
      SELECT NVDROL.VALOR INTO VDIAS_ENF
      FROM PARAMETROS_ROLES PRMROL,NOVEDADES_ROLES NVDROL
      WHERE PRMROL.EMP_CODIGO = CEMPRESA AND
            PRMROL.NOMBRE_AGRUPADOR = 'E'AND
            PRMROL.EMP_CODIGO = NVDROL.PRMROL_EMP_CODIGO AND
            PRMROL.EMP_CODIGO = NVDROL.EMPROL_EMP_CODIGO AND
            PRMROL.CODIGO = NVDROL.PRMROL_CODIGO AND
            NVDROL.EMPROL_CODIGO = NEMPLEADO AND
            NVDROL.ROLPGS_EMP_CODIGO = PRMROL.EMP_CODIGO AND
            ROLPGS_NUMERO = NNUMROL;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
         VDIAS_ENF:=0;
      WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR(-20110,'Error,Existe más de un parámetro con el agrupador DIAS ENFERMEDAD');
   END;
   IF VDIAS_ENF > 3 THEN
      RETURN 3;
   ELSE
      RETURN VDIAS_ENF;
   END IF;
EXCEPTION
WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20110,'DEVOLVER_DIAS_ENFERMEDAD'||SQLERRM);
END;
/* Calcular Base Imponible Prorrateada */
FUNCTION CALCULAR_BASE_IMPONIBLE
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,NNUMROL IN ROLES_DE_PAGOS.NUMERO%TYPE
 )
 RETURN NUMBER
 IS

VBASE_IMPONIBLE NUMBER(21, 6);
VPERIODO NUMBER;
-- Calcula el Impuesto a la Renta mensual
BEGIN
   VBASE_IMPONIBLE:=0;
   SELECT SUM(NVL(DEBE,(HABER*-1))) INTO VBASE_IMPONIBLE
   FROM MOVIMIENTOS_ROLES
   WHERE ROLPGS_EMP_CODIGO = CEMPRESA AND
         ROLPGS_NUMERO = NNUMROL AND
         EMPROL_EMP_CODIGO = CEMPRESA AND
         EMPROL_CODIGO = NEMPLEADO AND
         PRMROL_EMP_CODIGO = CEMPRESA AND
         PRMROL_CODIGO IN (SELECT CODIGO
                           FROM PARAMETROS_ROLES
                           WHERE EMP_CODIGO = CEMPRESA AND
                                 APLICA_IR = 'V' AND
                                 ESTADO_DE_DISPONIBILIDAD = 'D')AND
         ESTADO <> 'A';
   IF VBASE_IMPONIBLE >=0 THEN
        VPERIODO := 1;
 --     VPERIODO := OBTENER_PERIODO_EMPRESA(CEMPRESA,NULL,NULL);
QMS$ERRORS.SHOW_DEBUG_INFO('BASE IMPONIBLE EN FUNCION '||VBASE_IMPONIBLE);      
      RETURN VBASE_IMPONIBLE*VPERIODO*12;
   ELSIF VBASE_IMPONIBLE < 0 THEN
       RAISE_APPLICATION_ERROR(-20110,'Error, Base Imponible negativa para cálculo de Imp. Renta');
   ELSIF VBASE_IMPONIBLE IS NULL THEN
       RAISE_APPLICATION_ERROR(-20110,'Error, El Valor de la Base Imponible no puede ser nulo');
   END IF;
EXCEPTION
WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20110,'CALCULAR_BASE_IMPONIBLE'||SQLERRM);
END;
/* Devuelve el valor que corresponde a la antiguedad */
FUNCTION DEVUELVE_ANTIGUEDAD
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,NNUMROL IN ROLES_DE_PAGOS.NUMERO%TYPE
 )
 RETURN NUMBER
 IS

NANIOS NUMBER(2) := 0;
SUELDO_BASICO NUMBER(21, 6) := 0;
VALOR_ANTIGUEDAD NUMBER(21, 6);
NANIOS_ADICIONALES NUMBER(2) := 0;
-- Retorna el valor que le corresponde al empleado por antiguedad
BEGIN
/*   BEGIN
      SELECT VALOR INTO NANIOS_ADICIONALES
      FROM PARAMETROS_ROLES_EMPLEADO
      WHERE EMPROL_EMP_CODIGO = CEMPRESA AND
            EMPROL_CODIGO     = NEMPLEADO AND
            PRMROL_EMP_CODIGO = CEMPRESA AND
            PRMROL_CODIGO  IN (SELECT CODIGO
                               FROM PARAMETROS_ROLES
                               WHERE NOMBRE_AGRUPADOR = 'Ñ' AND
                                     EMP_CODIGO = CEMPRESA);
   EXCEPTION
   WHEN OTHERS THEN
       RAISE_APPLICATION_ERROR(-20110,'DEVUELVE ANTIGUEDAD'||SQLERRM);
   END;*/
   QMS$ERRORS.SHOW_DEBUG_INFO('*****DEVUELVE_ANTIGUEDAD******');
   QMS$ERRORS.SHOW_DEBUG_INFO('EMPLEADO '||NEMPLEADO||' ROL '||NNUMROL);
   NANIOS_ADICIONALES := 0;
   BEGIN
      SELECT VALOR INTO SUELDO_BASICO
      FROM PARAMETROS_ROLES_EMPLEADO
      WHERE EMPROL_EMP_CODIGO = CEMPRESA AND
            EMPROL_CODIGO     = NEMPLEADO AND
            PRMROL_EMP_CODIGO = CEMPRESA AND
            PRMROL_CODIGO  IN (SELECT CODIGO
                               FROM PARAMETROS_ROLES
                               WHERE NOMBRE_AGRUPADOR = 'B' AND
                                     EMP_CODIGO = CEMPRESA);
   EXCEPTION
   WHEN OTHERS THEN
       RAISE_APPLICATION_ERROR(-20110,'DEVUELVE ANTIGUEDAD'||SQLERRM);
   END;
   NANIOS:= ROLPRNZ.OBTENER_NUMERO_ANIOS(CEMPRESA,NEMPLEADO,NNUMROL);
   QMS$ERRORS.SHOW_DEBUG_INFO('NANIOS '||NANIOS);
   IF NANIOS+NANIOS_ADICIONALES = 4 THEN
      VALOR_ANTIGUEDAD := 0.13;
   ELSIF (NANIOS+NANIOS_ADICIONALES) > 4 THEN
      VALOR_ANTIGUEDAD := 0.13+ SUELDO_BASICO * .05 * ((NANIOS+NANIOS_ADICIONALES)-4);
      IF VALOR_ANTIGUEDAD > SUELDO_BASICO THEN
         VALOR_ANTIGUEDAD := SUELDO_BASICO;
      END IF;
   ELSE
      VALOR_ANTIGUEDAD := 0;
   END IF;
   QMS$ERRORS.SHOW_DEBUG_INFO('VALOR ANTIGUEDAD '||VALOR_ANTIGUEDAD);
   RETURN VALOR_ANTIGUEDAD;
EXCEPTION
WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20110,'DEVUELVE ANTIGUEDAD'||SQLERRM);
END;
/* Obtener el período de pago del Rol */
FUNCTION OBTENER_PERIODO_EMPRESA
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,NNUMROL IN ROLES_DE_PAGOS.NUMERO%TYPE
 )
 RETURN NUMBER
 IS

VPERIODO NUMBER(1);
--Obtiene el período de pago de la empresa, puede ser 1,2 o 4
BEGIN
   SELECT VALOR INTO VPERIODO
   FROM PARAMETROS_EMPRESAS
   WHERE PRMAPL_NOMBRE ='PERIODO_ROL' AND
         EMP_CODIGO = CEMPRESA;
   IF VPERIODO IS NOT NULL THEN
      RETURN VPERIODO;
   ELSE
      RETURN 1;
   END IF;
END;
/* Genera el Pago de provisiones */
FUNCTION PAGAR_PROVISION
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,CPARAMETRO IN PARAMETROS_ESPECIALES.PRMROL_CODIGO%TYPE
 ,NANIO IN PAGOS_ESPECIALES.NUMERO%TYPE
 ,NMES_INICIAL IN PARAMETROS_ESPECIALES.MES_INICIAL%TYPE
 ,NMES_FINAL IN PARAMETROS_ESPECIALES.MES_FINAL%TYPE
 )
 RETURN NUMBER
 IS

VVALOR NUMBER(21, 6);
VFECHA DATE;
VINTERVIENE VARCHAR2(5);
VPROVISION NUMBER(21, 6);
VANIO NUMBER(4);
VFECHA_INICIAL DATE;
VFECHA_FINAL DATE;
VANIO_ANTERIOR NUMBER(4);
-- Calcula el valor que corresponde al empleado por pago de provisiones
CURSOR PARAMETROS IS
SELECT PRMROL_CODIGO
FROM DATOS_INTERVIENEN
WHERE PRMESP_PRMROL_EMP_CODIGO = CEMPRESA AND
      PRMESP_PRMROL_CODIGO     = CPARAMETRO AND
      PRMROL_EMP_CODIGO        = CEMPRESA AND
      ESTADO_DE_DISPONIBILIDAD = 'D';
BEGIN
   ROLGNR.OBTENER_FECHAS(NMES_INICIAL,NMES_FINAL,NANIO,VFECHA_INICIAL,VFECHA_FINAL);
   VVALOR:= 0;
   VPROVISION:=0;
   OPEN PARAMETROS;
   LOOP
      FETCH PARAMETROS INTO VINTERVIENE;
      EXIT WHEN PARAMETROS%NOTFOUND;
      SELECT SUM (NVL(DEBE,(HABER*-1))) INTO VVALOR
      FROM MOVIMIENTOS_ROLES
      WHERE ROLPGS_EMP_CODIGO = CEMPRESA AND
            EMPROL_EMP_CODIGO = CEMPRESA AND
            EMPROL_CODIGO = NEMPLEADO AND
            PRMROL_EMP_CODIGO = CEMPRESA AND
            PRMROL_CODIGO = VINTERVIENE AND
            (FECHA BETWEEN  VFECHA_INICIAL AND VFECHA_FINAL) AND
            ESTADO <> 'A';
      IF VVALOR IS NULL THEN
         VVALOR :=0;
      END IF;
      VPROVISION:= VPROVISION +VVALOR;
   END LOOP;
   CLOSE PARAMETROS;
   RETURN VPROVISION;
EXCEPTION
WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20110,'PAGAR PROVISION'||SQLERRM);
END;
/* Genera el Pago de provisiones */
FUNCTION PAGAR_FONDO_RESERVA
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,CPARAMETRO IN PARAMETROS_ESPECIALES.PRMROL_CODIGO%TYPE
 ,NANIO IN PAGOS_ESPECIALES.NUMERO%TYPE
 ,NMES_INICIAL IN PARAMETROS_ESPECIALES.MES_INICIAL%TYPE
 ,NMES_FINAL IN PARAMETROS_ESPECIALES.MES_FINAL%TYPE
 )
 RETURN NUMBER
 IS

VVALOR NUMBER(21, 6);
VFECHA DATE;
VINTERVIENE VARCHAR2(5);
VPROVISION NUMBER(21, 6);
VANIO NUMBER(4);
VFECHA_INICIAL DATE;
VFECHA_INGRESO DATE;
VANIOS NUMBER(2);
VFECHA_FINAL DATE;
VANIO_ANTERIOR NUMBER(4);
-- Calcula el valor que corresponde al empleado por pago de provisiones
CURSOR PARAMETROS IS
SELECT PRMROL_CODIGO
FROM DATOS_INTERVIENEN
WHERE PRMESP_PRMROL_EMP_CODIGO = CEMPRESA AND
      PRMESP_PRMROL_CODIGO     = CPARAMETRO AND
      PRMROL_EMP_CODIGO        = CEMPRESA AND
      ESTADO_DE_DISPONIBILIDAD = 'D';
BEGIN
   ROLGNR.OBTENER_FECHAS(NMES_INICIAL,NMES_FINAL,NANIO,VFECHA_INICIAL,VFECHA_FINAL);
   VVALOR:= 0;
   VPROVISION:=0;
   SELECT TO_DATE(TO_CHAR(FECHA_DE_INGRESO,'DD/MM/YYYY'))INTO VFECHA_INGRESO
   FROM EMPLEADOS_ROLES
   WHERE EMP_CODIGO = CEMPRESA AND
         CODIGO = NEMPLEADO;
   VANIOS := TRUNC((VFECHA_FINAL-VFECHA_INGRESO)/365);
   IF VANIOS > 0 THEN
      OPEN PARAMETROS;
      LOOP
         FETCH PARAMETROS INTO VINTERVIENE;
         EXIT WHEN PARAMETROS%NOTFOUND;
         SELECT SUM (NVL(DEBE,(HABER*-1))) INTO VVALOR
         FROM MOVIMIENTOS_ROLES
         WHERE ROLPGS_EMP_CODIGO = CEMPRESA AND
            EMPROL_EMP_CODIGO = CEMPRESA AND
            EMPROL_CODIGO = NEMPLEADO AND
            PRMROL_EMP_CODIGO = CEMPRESA AND
            PRMROL_CODIGO = VINTERVIENE AND
            (FECHA BETWEEN  VFECHA_INICIAL AND VFECHA_FINAL) AND
            ESTADO <> 'A';
         IF VVALOR IS NULL THEN
            VVALOR := 0;
         END IF;
         VPROVISION := VPROVISION +VVALOR;
      END LOOP;
      CLOSE PARAMETROS;
      RETURN VPROVISION;
   ELSE
      RETURN 0;
   END IF;
EXCEPTION
WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20110,'PAGAR FONDO DE RESERVA'||SQLERRM);
END;
/* Calcula el número de cargas familiares por empleado */
FUNCTION OBTENER_CARGAS_FAMILIARES
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,NNUMROL IN ROLES_DE_PAGOS.NUMERO%TYPE
 )
 RETURN NUMBER
 IS

VNUMCARGAS NUMBER(2);
-- Calcula el número de cargas que tiene el empleado
-- para asignarlo al parámetro (cargas familiares) del rol
BEGIN
   SELECT COUNT(NUMERO) INTO VNUMCARGAS
   FROM CARGAS_FAMILIARES
   WHERE EMPROL_EMP_CODIGO = CEMPRESA AND
         EMPROL_CODIGO = NEMPLEADO AND
         ESTADO_DE_DISPONIBILIDAD = 'D';
   RETURN VNUMCARGAS;
EXCEPTION
WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20110,'OBTENER_CARGAS_FAMILIARES'||SQLERRM);
END;
/* Calcular la suma total de un valor */
FUNCTION OBTENER_TOTAL_PARAMETRO
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,CPARAMETRO IN PARAMETROS_ROLES.CODIGO%TYPE
 ,NANIO IN ROLES_DE_PAGOS.ANO%TYPE
 ,NMES_INICIAL IN PARAMETROS_ESPECIALES.MES_INICIAL%TYPE
 ,NMES_FINAL IN PARAMETROS_ESPECIALES.MES_FINAL%TYPE
 )
 RETURN NUMBER
 IS

VFECHA_INICIAL DATE;
VINTERVIENE VARCHAR2(5);
VVALOR NUMBER(21, 6);
VTOTAL NUMBER(21, 6);
VFECHA_FINAL DATE;
-- Calcula el valor total de un parametro que registra un movimiento del rol o
-- un movimiento de pagos especiales o una liquidación
CURSOR PARAMETROS IS
SELECT PRMROL_CODIGO
FROM DATOS_INTERVIENEN
WHERE PRMESP_PRMROL_EMP_CODIGO = CEMPRESA AND
      PRMESP_PRMROL_CODIGO     = CPARAMETRO AND
      PRMROL_EMP_CODIGO        = CEMPRESA AND
      ESTADO_DE_DISPONIBILIDAD = 'D';
BEGIN
   ROLGNR.OBTENER_FECHAS(NMES_INICIAL,NMES_FINAL,NANIO,VFECHA_INICIAL,VFECHA_FINAL);
   VVALOR:= 0;
   VTOTAL:=0;
   OPEN PARAMETROS;
   LOOP
      FETCH PARAMETROS INTO VINTERVIENE;
      EXIT WHEN PARAMETROS%NOTFOUND;
      SELECT SUM (NVL(DEBE,HABER)) INTO VVALOR
      FROM MOVIMIENTOS_TOTALES
      WHERE EMPROL_EMP_CODIGO = CEMPRESA AND
            EMPROL_CODIGO = NEMPLEADO AND
            PRMROL_EMP_CODIGO = CEMPRESA AND
            PRMROL_CODIGO = VINTERVIENE AND
            (FECHA BETWEEN  VFECHA_INICIAL AND VFECHA_FINAL);
      IF VVALOR IS NULL THEN
         VVALOR :=0;
      END IF;
      VTOTAL:= VTOTAL +VVALOR;
   END LOOP;
   CLOSE PARAMETROS;
   RETURN VTOTAL;
EXCEPTION
WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20110,'OBTENER TOTAL PARAMETRO'||SQLERRM);
END;
/* Calcular el Impuesto a la Renta */
FUNCTION CALCULAR_IMPUESTO_RENTA
 (CEMPRESA IN EMPRESAS.CODIGO%TYPE
 ,NEMPLEADO IN EMPLEADOS_ROLES.CODIGO%TYPE
 ,NNUMROL IN ROLES_DE_PAGOS.NUMERO%TYPE
 )
 RETURN NUMBER
 IS

VBASE_IMPONIBLE NUMBER(21, 6);
VLIMINF NUMBER(21, 6);
VLIMSUP NUMBER(21, 6);
VPRM_IMPUESTO VARCHAR2(5);
VIMP_RENTA NUMBER(21, 6);
VTOTAL_INGRESOS NUMBER(21, 6);
VTOTAL_APORTE_IESS NUMBER;
VANIO_ROL NUMBER(4);
VANIO_RENTA NUMBER(4);
VBASE NUMBER(21, 6);
VMES_ROL NUMBER(2);
VPRM_INGRESOS VARCHAR2(5);
VPRM_APORTE_IESS VARCHAR2(5);
VTOTAL_IMPRENTA NUMBER(21, 6);
VEXEDENTE NUMBER(3);
VIMPUESTO NUMBER(21, 6);
VPERIODO NUMBER(1);
-- Calcula el Impuesto a la Renta mensual
BEGIN
   BEGIN
      SELECT ANO,MES INTO VANIO_ROL,VMES_ROL
      FROM ROLES_DE_PAGOS
      WHERE EMP_CODIGO = CEMPRESA AND
            NUMERO = NNUMROL;
      SELECT MAX(TO_NUMBER(TO_CHAR(ANO_RIGE,'YYYY'))) INTO VANIO_RENTA
      FROM TABLAS_IMPUESTO_RENTA
      WHERE TO_NUMBER(TO_CHAR(ANO_RIGE,'YYYY')) <= VANIO_ROL;
   EXCEPTION
      WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR(-20110,'No existe una Tabla Actualizada de Impuesto a la Renta');
   END;
BEGIN
   DECLARE
   CURSOR DETALLES_RENTAS IS
   SELECT LIMITE_INFERIOR,LIMITE_SUPERIOR,IMPUESTO_BASICO,IMPUESTO_EXEDENTE
   FROM DETALLES_IMPUESTO_RENTA
   WHERE TO_NUMBER(TO_CHAR(TBLIMPRNT_ANO_RIGE,'YYYY'))= VANIO_RENTA;
   BEGIN
      VBASE_IMPONIBLE:=0;
      VIMPUESTO:=0;
      VBASE_IMPONIBLE:= CALCULAR_BASE_IMPONIBLE(CEMPRESA,NEMPLEADO,NNUMROL);
QMS$ERRORS.SHOW_DEBUG_INFO('BASE IMPONIBLE '||VBASE_IMPONIBLE);      
      IF VBASE_IMPONIBLE >0 THEN
         --VPERIODO := OBTENER_PERIODO_EMPRESA(CEMPRESA,NULL,NULL);
         VPERIODO := 1;
         OPEN DETALLES_RENTAS;
         LOOP
            FETCH DETALLES_RENTAS INTO VLIMINF,VLIMSUP,VBASE,VEXEDENTE;
            EXIT WHEN DETALLES_RENTAS%NOTFOUND;
            IF ((VBASE_IMPONIBLE) BETWEEN VLIMINF AND VLIMSUP) THEN
QMS$ERRORS.SHOW_DEBUG_INFO('LIM INF '||VLIMINF||' LIM SUP '||VLIMSUP);      
                VIMPUESTO := ((VBASE + ((VEXEDENTE /100)* (VBASE_IMPONIBLE - VLIMINF)))/12)/VPERIODO;
            END IF;
         END LOOP;
         CLOSE DETALLES_RENTAS;
      ELSIF VBASE_IMPONIBLE < 0 THEN
         RAISE_APPLICATION_ERROR(-20110,'Error, Base Imponible negativa para cálculo de Imp. Renta');
      END IF;
      IF VMES_ROL < 12 THEN  -- Si el mes no es diciembre, retorna el impuesto correpondiente
QMS$ERRORS.SHOW_DEBUG_INFO('NO ES DICIEMBRE Y DEV '||VIMPUESTO);      
         RETURN VIMPUESTO;
      ELSIF VMES_ROL = 12 THEN
      -- Si se está calculando el impuesto a la renta de Diciembre, se debe hacer el ajuste
         BEGIN
            SELECT PRMROL_CODIGO INTO VPRM_INGRESOS
            FROM PARAMETROS_ESPECIALES
            WHERE REPORTE_ESPECIAL = 'ROLRPTFRM1O7' AND
                  ORDEN = 1;
         EXCEPTION
         WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20110,'No se ha definido un parámetro especial para el total de ingresos ');
         END;
         BEGIN
            SELECT PRMROL_CODIGO INTO VPRM_APORTE_IESS
            FROM PARAMETROS_ESPECIALES
            WHERE REPORTE_ESPECIAL = 'ROLRPTFRM1O7' AND
                  ORDEN = 2;
         EXCEPTION
         WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20110,'No se ha definido un parámetro especial para el aporte al iess ');
         END;
         BEGIN
            SELECT PRMROL_CODIGO INTO VPRM_IMPUESTO
            FROM PARAMETROS_ESPECIALES
            WHERE REPORTE_ESPECIAL = 'ROLRPTFRM1O7' AND
                  ORDEN = 3;
         EXCEPTION
         WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20110,'No se ha definido un parámetro especial para el impuesto a la renta mensual');
         END;
         IF VPRM_INGRESOS IS NOT NULL  AND VPRM_IMPUESTO IS  NOT NULL AND VPRM_APORTE_IESS IS NOT NULL THEN
         -- Obtiene el total de ingresos  y el total de impuesto a la renta al año;
            VTOTAL_INGRESOS:= OBTENER_TOTAL_PARAMETRO(CEMPRESA,NEMPLEADO,VPRM_INGRESOS,VANIO_ROL,1,12);
            VTOTAL_APORTE_IESS := OBTENER_TOTAL_PARAMETRO(CEMPRESA,NEMPLEADO,VPRM_APORTE_IESS,VANIO_ROL,1,12);
            VTOTAL_IMPRENTA:= VIMPUESTO + OBTENER_TOTAL_PARAMETRO(CEMPRESA,NEMPLEADO,VPRM_IMPUESTO,VANIO_ROL,1,11);
            OPEN DETALLES_RENTAS;
            LOOP
               FETCH DETALLES_RENTAS INTO VLIMINF,VLIMSUP,VBASE,VEXEDENTE;
               EXIT WHEN DETALLES_RENTAS%NOTFOUND;
               IF ((VTOTAL_INGRESOS) BETWEEN VLIMINF AND VLIMSUP) THEN
                   VIMP_RENTA := VBASE + (VEXEDENTE /100)* ((VTOTAL_INGRESOS-VTOTAL_APORTE_IESS) - VLIMINF);
               END IF;
            END LOOP;
            CLOSE DETALLES_RENTAS;
            IF VIMP_RENTA > VTOTAL_IMPRENTA THEN
            -- Si el impuesto real es mayor al total de impuesto retenido en el año
            -- ajusta la diferencia en el impuesto de diciembre
               VIMPUESTO:= VIMPUESTO + (VIMP_RENTA - VTOTAL_IMPRENTA);
            ELSIF VTOTAL_IMPRENTA > VIMP_RENTA THEN
               VIMPUESTO := VIMPUESTO - (VTOTAL_IMPRENTA-VIMP_RENTA);
            ELSIF VTOTAL_IMPRENTA = VIMP_RENTA THEN
               VIMPUESTO:= VIMPUESTO;
            END IF;
            IF VIMPUESTO > 0 THEN
               RETURN VIMPUESTO;
            ELSE
               RETURN 0;
            END IF;
         END IF;
      END IF;
      RETURN 0;
   EXCEPTION
   WHEN OTHERS THEN
       RAISE_APPLICATION_ERROR(-20110,'CALCULAR_IMPUESTO_RENTA'||SQLERRM);
   END;
END;
END;

END ROLPRNZ;