/* Validar todas los datos necesarios para el SRI */
FUNCTION VALIDAR_DATOS_SRI
 (VIDVALIDACION VARCHAR2
 ,DFECHACMPCONTABLE DATE
 ,VRUC VARCHAR2
 ,VTIPOCMP VARCHAR2
 ,DFECHACMP DATE
 ,VSERIECMP VARCHAR2
 ,VSECNTA VARCHAR2
 ,DFECHANTA DATE
 ,VFACTURA VARCHAR2
 ,VAUTORIZACION VARCHAR2
 ,VIDCREDITO_GASTO VARCHAR2
 ,VTIPORF VARCHAR2
 ,VSERIENTA VARCHAR2 := NULL
 ,VAUTORIZACIONNTA VARCHAR2 := NULL
 ,VCMPCNT VARCHAR2 := NULL
 ,VMOSTRAROESCRIBIR VARCHAR2 := NULL
 )
 RETURN NUMBER
 IS
 BEGIN
-- Valida que el comprobante cumpla con las normas del SRI. La validación se la hara antes de  grabar el comprobante
-- vIDValidacion sirve para indicar si el comprobante es:
--                                                 DC -> Nota de Debito o Credito
--                                                 RF -> Solo de Retenciones en la fuente
--                                                 TL -> Transacciones Locales
--								   VT -> Ventas
--								   TX -> Transacciones con el  exterior
/*************************** QUE SE VALIDA  **********************************************
PARA TODOS    => RUC
TL,DC         => FECHA EMISION, TIPO COMPROBANTE, SERIE COMPROBANTE, FACTURA/COMP.
                 NO. AUTORIZACION
TL            => ID CREDITO/GASTO
DC            => FECHA EMISION NOTA, NO. NOTA
TL,RF         => ID RETENCION FUENTE
TX => SE DEJA PENDIENTE HASTA PROGRAMAR
*****************************************************************************************
************* DEVUELVE EL ID DEL RUC (SECUENCIAL DE LA TRANSACCION) *********************
-4 -> no se ha realizado ningun procesamineto con esta funcion
-3 -> Indicador de validacion incorrecto (no es ni TL, TX, DC, RF, VT)
-2 -> NO VALIDADO(MENOR AL 1 AGOSTO 2002)
-1 -> EXPORTACION/IMPORTACION
0  -> ERROR
1  -> COMPRA A PROVEEDOR CON RUC
2  -> COMPRA A PROVEEDOR CON CEDULA
3  -> COMPRA A PROVEEDOR CON PASAPORTE
4  -> VENTA A CLIENTE CON RUC
5  -> VENTA A CLIENTE CON CEDULA
6  -> VENTA A CLIENTE CON PASAPORTE
7  -> VENTA A CLIENTE CONSUMIDOR FINAL
*****************************************************************************************/
DECLARE
  FECHA_INICIO_VALIDACION DATE:='01/01/2006';---------------Fecha inicial de validación--------
  nRUC NUMBER:=0;
  nTipoCmp NUMBER:=0;
  nSecNta NUMBER:=0;
  nSerieCmp NUMBER:=0;
  nFactura NUMBER:=0;
  nAutorizacion NUMBER:=0;
  nIDCredito_Gasto NUMBER:=0;
  nTipoRF NUMBER:=0;
  nSerieNta NUMBER:=0;
  nAutorizacionNta NUMBER:=0;
  vParametroError VARCHAR2(200):='';
  nDev NUMBER;
  nMaxDiasCont NUMBER:=62;-- Se da un plaxo maximo de 2 meses para contabilizar una factura
  MALA_CONVERSION EXCEPTION;
  MAL_RUC EXCEPTION;
  MAL_FECHA_EMISION EXCEPTION;
  TIPO_COMPROBANTE_INVALIDO EXCEPTION;
  TIPO_COMPROBANTE_CADUCADO EXCEPTION;
  MAL_SERIE_COMPROBANTE EXCEPTION;
  MAL_SECUENCIAL_COMPROBANTE EXCEPTION;
  SERIE_COMPROBANTE_CERO EXCEPTION;
  NUMERO_AUTORIZACION_CERO EXCEPTION;
  MAL_NUMERO_AUTORIZACION EXCEPTION;
  MAL_ID_CREDITO_GASTO EXCEPTION;
  MAL_TIPO_RF EXCEPTION;
  MAL_NUMERO_NOTA EXCEPTION;
  MAL_FECHA_NOTA EXCEPTION;
  MAL_PASAPORTE EXCEPTION;
  MAL_TIPO_CMP_CON_IDCRDB EXCEPTION;
  vTipoRF_verificada VARCHAR2(5);
  EXISTE_RETENCION VARCHAR2(1):= 'F';
  TIPO_COMPROBANTE_INVALIDO_VT EXCEPTION;
  CURSOR RETENCIONES IS
  SELECT CODIGO FROM TIPOS_RETENCIONES_SRI
  WHERE ANIO_VALIDEZ_DESDE >= '01/04/2003';
  CURSOR cCmpYaExiste IS
     SELECT MAX(TPOCMPEMP_TPOCMP_CODIGO||'-'||CLAVE)
     FROM COMPROBANTES_POR_REVISAR
     WHERE TO_NUMBER(NO_AUTORIZACION)=DECODE(nAutorizacionNta,0, nAutorizacion,nAutorizacionNta)
           AND TO_NUMBER(SERIE_COMPROBANTE)=DECODE(nSerieNta,0,nSerieCmp,nSerieNta)
           AND TO_NUMBER(FACTURA_NO_COMP)=DECODE(nSecNta,0,nFactura,nSecNta)
           AND (VIDVALIDACION IN ('TL','DC')
           AND (VIDVALIDACION='TL' AND ID_RETENCION_FUENTE!='-1' AND TO_NUMBER(TIPO_COMPROBANTE)=TO_NUMBER(VTIPOCMP))
           OR (VIDVALIDACION='DC' AND ID_RETENCION_FUENTE='-1') AND TO_NUMBER(TIPO_COMPROBANTE)=-1);
  COMPROBANTE_REPETIDO EXCEPTION;
  vMensaje VARCHAR2(2000):='';
  PRAGMA EXCEPTION_INIT(MALA_CONVERSION,-6502);
BEGIN
QMS$ERRORS.SHOW_DEBUG_INFO('******** GNRL.VALIDA_DATOS_SRI ********');
  nDev:=-4; -- Marcamos que no se ha procesado nada todavía
QMS$ERRORS.SHOW_DEBUG_INFO('ID VALIDACION '||vIDValidacion);
  IF vIDValidacion IS NULL THEN
    QMS$ERRORS.SHOW_DEBUG_INFO('No se valida nada IDVALIDACION nulo');
    RETURN nDev;
  END IF;
  IF dFechaCmpContable<TO_DATE('01/08/2002','DD/MM/YYYY') AND vIDValidacion!='VT' THEN
QMS$ERRORS.SHOW_DEBUG_INFO('No se valida por ser comprobantes menores al 1 agosto');
    RETURN -2; -- no validamos ningun comprobante menor al 1 de agosto del 2002 y no ser venta
  END IF;
QMS$ERRORS.SHOW_DEBUG_INFO('FECHA CONTABLE '||TO_CHAR(dFechaCmpContable,'DD/MM/YYY'));
QMS$ERRORS.SHOW_DEBUG_INFO('RUC '||vRUC);
QMS$ERRORS.SHOW_DEBUG_INFO('TIPO COMPROBANTE '||vTipoCmp);
QMS$ERRORS.SHOW_DEBUG_INFO('FECHA EMISION '||TO_CHAR(dFechaCmp,'DD/MM/YYYY'));
QMS$ERRORS.SHOW_DEBUG_INFO('SERIE '||vSerieCmp);
QMS$ERRORS.SHOW_DEBUG_INFO('NO NOTA '||vSecNta);
QMS$ERRORS.SHOW_DEBUG_INFO('FECHA NOTA '||TO_CHAR(dFechaNta,'DD/MM/YYYY'));
QMS$ERRORS.SHOW_DEBUG_INFO('FACTURA '||vFactura);
QMS$ERRORS.SHOW_DEBUG_INFO('NO AUTORIZACION '||vAutorizacion);
QMS$ERRORS.SHOW_DEBUG_INFO('ID CREDITO GASTO '||vIDCredito_Gasto);
QMS$ERRORS.SHOW_DEBUG_INFO('ID RETENCION FUENTE '||vTipoRF);
QMS$ERRORS.SHOW_DEBUG_INFO('ID RETENCION FUENTE '||vTipoRF);
QMS$ERRORS.SHOW_DEBUG_INFO('SERIE NOTA '||vSerieNta);
QMS$ERRORS.SHOW_DEBUG_INFO('NO AUTORIZACION NOTA '||vAutorizacionNta);
QMS$ERRORS.SHOW_DEBUG_INFO('Comprobante Contable '||vCmpcnt);
  IF vIDValidacion NOT IN ('TL','TX','DC','RF','VT') THEN
QMS$ERRORS.SHOW_DEBUG_INFO('vIDValidacion mal fijado'||vIDValidacion);
    RETURN -3; -- Salimos sin hacer nada si no vienen bien los indicadores
  END IF;
/*************  VALIDAR RUC/CED/PSP      ********************/
  nDev:=GNRL.VALIDAR_RUC_Y_CEDULA(vRUC,vIdValidacion,vTipoCmp,vMostraroEscribir);
  IF nDev=0 THEN
    RAISE MAL_RUC;
  ELSIF nDev=3 AND vRuc!='0000000000001' AND vIDValidacion IN ('TL','RF') AND  SUBSTR(vRUC,1,1)!='P' THEN
-- si es pasaporte debe comenzar con P
    RAISE MAL_PASAPORTE;
  END IF;
  IF vIDValidacion ='VT' THEN
    nTipoCmp:=TO_NUMBER(vTipoCmp);
    IF nTipoCmp NOT IN (4, 5, 18) THEN
      vMensaje:='(4, 5, 18)';
      RAISE TIPO_COMPROBANTE_INVALIDO_VT;
    END IF;
    RETURN nDev; -- Si es venta no se hace ninguna validacion adicional y salimos
  END IF;
  IF vIDValidacion IN ('TL','DC') THEN
-- Cosas comunes para Comprobantes de Transacciones Locales y Notas Debito / Credito
    BEGIN /*************  VALIDAR FECHA EMISION      ********************/
      IF dFechaCmpContable<dFechaCmp THEN
-- La fecha de comprobante contable siempre debe ser mayor que la fecha de la factura
        IF vIDValidacion='DC' THEN
-- La fecha de la nota de Credito/Debito debe ser mayor o igual a la del Comprobante contable
          vParametroError:='La fecha de Comprobante Contable de Notas de Credito/Debito debe ser  mayor o igual que la fecha de la factura a la cual se aplica la nota.';
          RAISE MAL_FECHA_EMISION;
        ELSE
          vParametroError:='La fecha de un Comprobante de contable debe ser mayor o igual que la  de la factura/Comprobante que se esta ingresando';
          RAISE MAL_FECHA_EMISION;
        END IF;
      END IF;
      IF dFechaCmpContable-nMaxDiasCont>dFechaCmp AND vIDValidacion='TL' THEN
-- La fecha de comprobante contable debe ser maximo 2 meses despues del de la factura siendo  contabilizada
        vParametroError:='La fecha de Emision debe ser maximo de 2 meses antes de su Fecha de  contabilización';
        RAISE MAL_FECHA_EMISION;
      END IF;
    END;
    BEGIN  /*************  VALIDAR TIPO COMPROBANTE      ********************/
      nTipoCmp:=TO_NUMBER(NVL(VTipoCmp,'0')); -- vemos que el Tipo Comprobante sea valido
      IF DFECHACMPCONTABLE<FECHA_INICIO_VALIDACION THEN 
        IF nTipoCmp NOT IN (1,2,3,9,10,11,12,13,14,15,16,17) THEN
-- ESTO POR COMPATIBILIDAD CON LOS ANTIGUOS
          vMensaje:='(1, 2, 3, 9, 10, 11, 12, 13, 14, 15, 16, 17)';
          RAISE MALA_CONVERSION;
        END IF;
      ELSE
        IF nTipoCmp NOT IN (1,2,3,10,11,12,13,14,19,20,21,41,43) THEN
          vMensaje:='(1, 2, 3, 10, 11, 12, 13, 14, 19, 20, 21, 41, 43)';
          RAISE MALA_CONVERSION;
        END IF;
      END IF;
      IF nTipocmp IN (13,14) AND dFechaCmpContable>=TO_DATE('01/01/2003') THEN
        vMensaje:='(13, 14)';
        RAISE TIPO_COMPROBANTE_CADUCADO;
      END IF;
      IF nTipocmp=10 AND dFechaCmpContable>=TO_DATE('01/04/2003') THEN
        vMensaje:='(10)';
        RAISE TIPO_COMPROBANTE_CADUCADO;
      END IF;
    EXCEPTION
      WHEN MALA_CONVERSION THEN
        RAISE TIPO_COMPROBANTE_INVALIDO;
    END;
    BEGIN  /*************  VALIDAR SERIE COMPROBANTE      ********************/
-- El numero de serie del comprobante debe tener el formato 001001
      nSerieCmp:=TO_NUMBER(NVL(vSerieCmp,'0')); -- vemos que la serie del comprobante sea valida
      IF LENGTH(vSerieCmp)!=6 THEN
        RAISE MALA_CONVERSION;
      END IF;
            /*** OTRAS VALIDACIONES DEL TIPO COMPROBANTE *****/
      IF DFECHACMPCONTABLE<FECHA_INICIO_VALIDACION THEN
-- ESTO POR COMPATIBILIDAD CON LOS ANTIGUOS
        IF nTipoCmp IN (9,10,11,12,13,14,15) AND nSerieCmp!=0  THEN
-- si los comprobantes son TIQUETES, PASAJES DE AVION, ETC
-- La serie del comprobante debe ser cero
          RAISE SERIE_COMPROBANTE_CERO;
        ELSIF nTipoCmp NOT IN (9,10,11,12,13,14,15) AND nSerieCmp NOT BETWEEN 1001 AND 999999 THEN
          RAISE MALA_CONVERSION;
        END IF;
      ELSE
        IF nSerieCmp NOT BETWEEN 1001 AND 999999 THEN
          RAISE MALA_CONVERSION;
        END IF;
      END IF;
    EXCEPTION
      WHEN MALA_CONVERSION THEN
        RAISE MAL_SERIE_COMPROBANTE;
    END;
    BEGIN  /*************  VALIDAR SERIE NOTA      ********************/
-- El numero de serie del comprobante debe tener el formato 001001
      nSerieNta:=TO_NUMBER(NVL(vSerieNta,'0')); -- vemos que la serie del comprobante sea valida
      IF vIDValidacion='DC' AND LENGTH(vSerieNta)!=6 THEN
        RAISE MALA_CONVERSION;
      END IF;
    EXCEPTION
      WHEN MALA_CONVERSION THEN
        RAISE MAL_SERIE_COMPROBANTE;
    END;
    BEGIN  /*************  VALIDAR FACTURA COMPROBANTE      ********************/
-- El numero de FACTURA/comprobante debe ser numerico
      nFactura:=TO_NUMBER(NVL(vFactura,'0')); --
      IF LENGTH(vFactura)>7 THEN
-- Maximo 7 caracteres por factura
        RAISE MALA_CONVERSION;
      END IF;
      IF FLOOR(nFactura)!=nFactura THEN
-- Que sea un numero entero
        RAISE MALA_CONVERSION;
      END IF;
      IF nFactura NOT BETWEEN 1 AND 9999999 THEN
        RAISE MALA_CONVERSION;
      END IF;
    EXCEPTION
      WHEN MALA_CONVERSION THEN
        RAISE MAL_SECUENCIAL_COMPROBANTE;
    END;
    BEGIN  /*************  VALIDAR AUTORIZACION COMPROBANTE      ********************/
-- El numero de Autorizacion del SRI debe ser numerico
      nAutorizacion:=TO_NUMBER(NVL(vAutorizacion,'0')); --
      IF LENGTH(vAutorizacion)>10 THEN
-- Maximo 10 caracteres por autorizacion
        RAISE MALA_CONVERSION;
      END IF;
      IF FLOOR(nAutorizacion)!=nAutorizacion THEN
-- Que sea un numero entero
        RAISE MALA_CONVERSION;
      END IF;
      IF DFECHACMPCONTABLE<FECHA_INICIO_VALIDACION THEN
-- ESTO POR COMPATIBILIDAD CON LOS ANTIGUOS
        IF nTipoCmp IN (9,10,11,12,13,14,15) AND nAutorizacion!=0 THEN
-- El Numero de autorizacion debe ser cero
          QMS$ERRORS.SHOW_MESSAGE('CNT-00074',vTipoCmp); -- la serie del comprobante debe ser cero
        ELSIF nTipoCmp NOT IN (9,10,11,12,13,14,15) AND nAutorizacion NOT BETWEEN 1 AND 9999999999 THEN
          RAISE MALA_CONVERSION;
        END IF;
      ELSE
        IF nAutorizacion NOT BETWEEN 100 AND 9999999999 THEN
          RAISE MALA_CONVERSION;
        END IF;
      END IF;
    EXCEPTION
      WHEN MALA_CONVERSION THEN
        RAISE MAL_NUMERO_AUTORIZACION;
    END;
    BEGIN  /*************  VALIDAR AUTORIZACION NOTA      ********************/
-- El numero de Autorizacion del SRI debe ser numerico
      nAutorizacionNta:=TO_NUMBER(NVL(vAutorizacionNta,'0')); --
       /***** OTRAS VALIDACIONES DEL TIPO COMPROBANTE ********/
      IF LENGTH(vAutorizacionNta)>10 THEN
-- Maximo 10 caracteres por autorizacion
        RAISE MALA_CONVERSION;
      END IF;
      IF FLOOR(nAutorizacionNta)!=nAutorizacionNta THEN
-- Que sea un numero entero
        RAISE MALA_CONVERSION;
      END IF;
      IF vIDValidacion='DC' AND nAutorizacionNta NOT BETWEEN 100 AND 9999999999 THEN
        RAISE MALA_CONVERSION;
      END IF;
    EXCEPTION
      WHEN MALA_CONVERSION THEN
        RAISE MAL_NUMERO_AUTORIZACION;
    END;
    BEGIN  /*************  VALIDAR ID_CREDITO_GASTO      ********************/
-- El Identificador de Credito o Gasto de la factura/Comprobante
      nIDCredito_Gasto:=TO_NUMBER(NVL(vIDCredito_Gasto,'0')); --
      IF nIDCredito_Gasto NOT BETWEEN 1 AND 9 THEN
        RAISE MALA_CONVERSION;
      END IF;
    EXCEPTION
      WHEN MALA_CONVERSION THEN
        RAISE MAL_ID_CREDITO_GASTO;
    END;
  END IF;
  IF vIDValidacion IN ('TL','RF') THEN
-- Cosas comunes para Comprobantes de Caja Medica y Transacciones Locales
    BEGIN  /*************  VALIDAR TIPO RETENCION      ********************/
      nTipoRF:=TO_NUMBER(NVL(vTipoRF,'0'));
      IF dFechaCmpContable < FECHA_INICIO_VALIDACION THEN 
     /*Se pueden pasar los datos ingresados antes de la fecha de validación*/
        IF nTipoRF NOT IN  (0,302,303,304,305,306,307,308,312,315,316,317,318,319,323,325,327,337,339,407,410,411,419,421)  AND 
          dFechaCmpContable>=TO_DATE('01/01/2002','DD/MM/YYYY') THEN
-- Para año 2002 en adelante
           vParametroError:='(0,302,303,304,305,306,307,308,312,315,316,317,318,319,323,325,327,337,339,407, 410,411,419,421)';
           RAISE MALA_CONVERSION;
        END IF;
        IF nTipoRF NOT IN  (0,302,303,304,305,306,307,308,310,311,312,313,314,315,316,317,318,407,410) AND 
           dFechaCmpContable<TO_DATE('01/01/2002','DD/MM/YYYY') THEN
-- menores al año 2002
          vParametroError:='(0,302,303,304,305,306,307,308,310,311,312,313,314,315,316,317,318,407,410)';
          RAISE MALA_CONVERSION;
        END IF;
      ELSE 
 /*Se validan con nuevos tipos de retenciones los datos ingresados luego de la fecha inicial*/
        BEGIN
          SELECT CODIGO INTO vTipoRF_verificada
          FROM TIPOS_RETENCIONES_SRI
          WHERE ANIO_VALIDEZ_DESDE >= '01/04/2003' AND
             NVL(vTipoRF,'0') = codigo;
          EXISTE_RETENCION := 'V';
        EXCEPTION
          WHEN OTHERS THEN
            EXISTE_RETENCION:= 'F';
        END;
        IF EXISTE_RETENCION = 'F' AND dFechaCmpContable>=TO_DATE('01/04/2003','DD/MM/YYYY') THEN
-- Para año 2003 en adelante        
          vParametroError:='(';
          FOR RRETENCIONES IN RETENCIONES LOOP
            vParametroError:= vParametroError||RRETENCIONES.CODIGO||',';
          END LOOP;
          vParametroError:=vParametroError||' )';
          EXISTE_RETENCION := 'F';      
          RAISE MALA_CONVERSION;
        END IF;
        vParametroError:= NULL;
        IF nTipoRF NOT IN (0,302,303,304,305,306,307,308,310,311,312,313,314,315,316,317,318,407,410)  AND 
           dFechaCmpContable<TO_DATE('01/01/2002','DD/MM/YYYY') THEN
-- menores al año 2002
           vParametroError:='(0,302,303,304,305,306,307,308,310,311,312,313,314,315,316,317,318,407,410)';
           RAISE MALA_CONVERSION;
        END IF;
      END IF; --------- Datos ingresados después de la fecha inicial de validación
    EXCEPTION
      WHEN MALA_CONVERSION THEN
        RAISE MAL_TIPO_RF;
    END;  /*************  VALIDAR TIPO RETENCION      ********************/
  END IF;
  IF vIDValidacion='DC' THEN
    BEGIN  /*************  VALIDAR NUMERO DE NOTA  CR/DB    ********************/
-- El numero de FACTURA/comprobante debe ser numerico
      nSecNta:=TO_NUMBER(NVL(vSecNta,'0')); --
      IF LENGTH(vSecNta)>7 THEN
-- Maximo 7 caracteres por nota CR o DB
        RAISE MALA_CONVERSION;
      END IF;
      IF FLOOR(nSecNta)!=nSecNta THEN
-- Que sea un numero entero
        RAISE MALA_CONVERSION;
      END IF;
      IF nSecNta <= 0 THEN
        RAISE MALA_CONVERSION;
      END IF;
    EXCEPTION
      WHEN MALA_CONVERSION THEN
        RAISE MAL_NUMERO_NOTA;
    END;
    BEGIN  /*************  VALIDAR FECHA NOTA      ********************/
      vParametroError:='';
      IF dFechaCmpContable<dFechaNta THEN
-- La fecha de comprobante contable siempre debe ser mayor que la fecha de la nota
-- y mayor a la fecha de la factura
        vParametroError:='La fecha del Comprobante debe ser mayor o igual que el de la Nota de  Credito/Debito';
        RAISE MALA_CONVERSION;
      END IF;
      IF dFechaNta<dFechaCmp THEN
        vParametroError:='La fecha de la Nota de Credito/Debito debe ser mayor o igual que la  fecha de la factura a la cual se aplica la nota.';
        RAISE MALA_CONVERSION;
      END IF;
      IF dFechaCmpContable-nMaxDiasCont>dFechaNta AND vIDValidacion='DC' THEN
-- La fecha de comprobante contable debe ser maximo 2 meses despues del de la nota siendo  contabilizada
        vParametroError:='La fecha de Emision de la nota debe ser maximo de 2 meses antes de su  Fecha de contabilización';
        RAISE MAL_FECHA_EMISION;
      END IF;
    EXCEPTION
      WHEN MALA_CONVERSION THEN
        RAISE MAL_FECHA_NOTA;
    END;
  END IF;
  IF vIDValidacion='TL' THEN
      IF nIDCredito_Gasto=1 AND nTipoCmp NOT IN (1, 3, 4, 5, 11, 12, 13, 14, 17, 21, 43) THEN
        vMensaje:='(1, 3, 4, 5, 11, 12, 13, 14, 17, 21, 43)';
        RAISE MAL_TIPO_CMP_CON_IDCRDB;
      ELSIF nIDCredito_Gasto=2 AND nTipoCmp NOT IN (1, 2, 3, 4, 5, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 41, 43) THEN
        vMensaje:='(1, 2, 3, 4, 5, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 41, 43)';
        RAISE MAL_TIPO_CMP_CON_IDCRDB;
      ELSIF nIDCredito_Gasto=3 AND nTipoCmp NOT IN (1, 3, 4, 5, 13, 17) THEN
        vMensaje:='(1, 3, 4, 5, 13, 17)';
        RAISE MAL_TIPO_CMP_CON_IDCRDB;
      ELSIF nIDCredito_Gasto=4 AND nTipoCmp NOT IN (1, 2, 3, 4, 5, 10, 13, 15, 17, 41) THEN
        vMensaje:='(1, 2, 3, 4, 5, 10, 13, 15, 17, 41)';
        RAISE MAL_TIPO_CMP_CON_IDCRDB;
      ELSIF nIDCredito_Gasto=5 AND nTipoCmp NOT IN (1, 2, 3, 4, 5, 10, 11, 12, 13, 14, 15, 17, 19, 20) THEN
        RAISE MAL_TIPO_CMP_CON_IDCRDB;
      ELSIF nIDCredito_Gasto=6 AND nTipoCmp NOT IN (1, 3, 4, 5, 13, 17, 41, 43) THEN
        vMensaje:='(1, 3, 4, 5, 13, 17, 41, 43)';
        RAISE MAL_TIPO_CMP_CON_IDCRDB;
      ELSIF nIDCredito_Gasto=7 AND nTipoCmp NOT IN (1, 2, 3, 4, 5, 10, 13, 15, 17, 41, 43) THEN
        vMensaje:='(1, 2, 3, 4, 5, 10, 13, 15, 17, 41, 43)';
        RAISE MAL_TIPO_CMP_CON_IDCRDB;
      ELSIF nIDCredito_Gasto=8 AND nTipoCmp NOT IN (1, 2, 4, 5, 17, 21) THEN
        vMensaje:='(1, 2, 4, 5, 17, 21)';
        RAISE MAL_TIPO_CMP_CON_IDCRDB;
      ELSIF nIDCredito_Gasto=9 AND nTipoCmp NOT IN (1, 2, 4, 5, 41) THEN
        vMensaje:='(1, 2, 4, 5, 41)';
        RAISE MAL_TIPO_CMP_CON_IDCRDB;
      END IF; 
  ELSIF vIDValidacion='TX' THEN
-- Se daja listo para Transacciones al Exterior
    IF nTipoCmp=17  AND nIDCredito_Gasto NOT BETWEEN 1 AND 9 THEN
-- IMPORTACIONES
      vParametroError:='(01,02,03,04,05,06,07)';
      RAISE MAL_TIPO_CMP_CON_IDCRDB;
    END IF;
    IF nTipoCmp=16  AND nIDCredito_Gasto!=0 THEN
-- IMPORTACIONES
      vParametroError:='(00)';
      RAISE MAL_TIPO_CMP_CON_IDCRDB;
    END IF;
  END IF;
-- Vemos si ya existe un comprobante anterior
QMS$ERRORS.SHOW_DEBUG_INFO('Mostrar o escribir ndev'||nDev);
QMS$ERRORS.SHOW_DEBUG_INFO('Mostrar o escribir '||vMostrarOEscribir);
  IF NVL(vMostrarOEscribir,'X')!='E' THEN
-- SOLO SI SE MUESTRA EN PANTALLA REVISAMOS LOS COMPROBANTES REPETIDOS, CASO CONTRARIO NADA
QMS$ERRORS.SHOW_DEBUG_INFO('VAMOS A VER SI HAY DUPLICADOS ');
QMS$ERRORS.SHOW_DEBUG_INFO('NO AUTORIZACION '||nAutorizacion);
QMS$ERRORS.SHOW_DEBUG_INFO('SERIE '||nSerieCmp);
QMS$ERRORS.SHOW_DEBUG_INFO('FACTURA '||nFactura);
QMS$ERRORS.SHOW_DEBUG_INFO('NO AUTORIZACION NOTA '||nAutorizacionNta);
QMS$ERRORS.SHOW_DEBUG_INFO('SERIE NOTA '||nSerieNta);
QMS$ERRORS.SHOW_DEBUG_INFO('NO NOTA '||nSecNta);
    vMensaje:=null;
/* TODAVIA NO SE PUEDE IMPLEMENTAR
    OPEN cCmpYaExiste;
    FETCH cCmpYaExiste INTO vMensaje;
    CLOSE cCmpYaExiste;
    IF LENGTH(vMensaje)>0 THEN
      RAISE COMPROBANTE_REPETIDO;
    END IF;*/
  END IF;
  RETURN nDev;
EXCEPTION
  WHEN MAL_PASAPORTE THEN
    IF vMostrarOEscribir='E' THEN
      GNRL.ESCRIBIR_ERRORES('CNT-00024',vCmpcnt);  -- Mal ingresado el Pasaporte
      RETURN 0;
    ELSE
      QMS$ERRORS.SHOW_MESSAGE('CNT-00024',vCmpCnt);  -- Mal ingresado el Pasaporte
    END IF;
  WHEN MAL_RUC THEN
    IF vMostrarOEscribir='E' THEN
      GNRL.ESCRIBIR_ERRORES('CNT-00024',vCmpcnt);  -- Mal ingresado el RUC
      RETURN 0;
    ELSE
      QMS$ERRORS.SHOW_MESSAGE('CNT-00024',vCmpCnt);  -- Mal ingresado el RUC
    END IF;
  WHEN MAL_FECHA_EMISION THEN
    IF vMostrarOEscribir='E' THEN
      GNRL.ESCRIBIR_ERRORES('CNT-00059',vParametroError,vCmpCnt);  -- mal la fecha de emision
      RETURN 0;
    ELSE
      QMS$ERRORS.SHOW_MESSAGE('CNT-00059',vParametroError,vCmpCnt);  -- mal la fecha de emision
    END IF;
  WHEN TIPO_COMPROBANTE_CADUCADO THEN
    IF vMostrarOEscribir='E' THEN
      GNRL.ESCRIBIR_ERRORES('CNT-00078',vTipocmp,vCmpCnt);  -- tipo Comprobante Caducado
      RETURN 0;
    ELSE
      QMS$ERRORS.SHOW_MESSAGE('CNT-00078',vTipocmp,vCmpCnt);  -- tipo Comprobante Caducado
    END IF;
  WHEN TIPO_COMPROBANTE_INVALIDO THEN
    IF vMostrarOEscribir='E' THEN
      GNRL.ESCRIBIR_ERRORES('CNT-00058',vMensaje,vCmpCnt);  --  Mal ingresada el Tipo de Comprobante
      RETURN 0;
    ELSE
      QMS$ERRORS.SHOW_MESSAGE('CNT-00058',vMensaje,vCmpCnt);  --  Mal ingresada el Tipo de Comprobante
    END IF;
  WHEN TIPO_COMPROBANTE_INVALIDO_VT THEN
    IF vMostrarOEscribir='E' THEN
      GNRL.ESCRIBIR_ERRORES('CNT-00058','(4,5,18)',vFactura);  -- Mal ingresada el Tipo de  Comprobante
      RETURN 0;
    ELSE
      QMS$ERRORS.SHOW_MESSAGE('CNT-00058','(4,5,18)',vFactura);  -- Mal ingresada el Tipo de  Comprobante
    END IF;
  WHEN SERIE_COMPROBANTE_CERO THEN
    IF vMostrarOEscribir='E' THEN
      GNRL.ESCRIBIR_ERRORES('CNT-00073',vTipoCmp,vCmpcnt); -- la serie del comprobante debe ser  cero
      RETURN 0;
    ELSE
      QMS$ERRORS.SHOW_MESSAGE('CNT-00073',vTipoCmp,vCmpCnt); -- la serie del comprobante debe ser  cero
    END IF;
  WHEN MAL_SERIE_COMPROBANTE THEN
    IF vMostrarOEscribir='E' THEN
      GNRL.ESCRIBIR_ERRORES('CNT-00060',vCmpCnt);  -- Mal ingresada la serie del comprobante
      RETURN 0;
    ELSE
      QMS$ERRORS.SHOW_MESSAGE('CNT-00060',vCmpCnt);  -- Mal ingresada la serie del comprobante
    END IF;
  WHEN MAL_SECUENCIAL_COMPROBANTE THEN
    IF vMostrarOEscribir='E' THEN
      GNRL.ESCRIBIR_ERRORES('CNT-00064',vCmpCnt);  -- Mal ingresada la Factura/Comp
      RETURN 0;
    ELSE
      QMS$ERRORS.SHOW_MESSAGE('CNT-00064',vCmpCnt);  -- Mal ingresada la Factura/Comp
    END IF;
  WHEN NUMERO_AUTORIZACION_CERO THEN
    IF vMostrarOEscribir='E' THEN
      GNRL.ESCRIBIR_ERRORES('CNT-00074',vTipoCmp,vCmpCnt); -- la autorizacion debe ser cero
      RETURN 0;
    ELSE
      QMS$ERRORS.SHOW_MESSAGE('CNT-00074',vTipoCmp,vCmpCnt); -- la autorizacion debe ser cero
    END IF;
  WHEN MAL_NUMERO_AUTORIZACION THEN
    IF vMostrarOEscribir='E' THEN
      GNRL.ESCRIBIR_ERRORES('CNT-00061',vCmpcnt);  -- Mal numero autorizacion
      RETURN 0;
    ELSE
      QMS$ERRORS.SHOW_MESSAGE('CNT-00061',vCmpcnt);  -- Mal numero autorizacion
    END IF;
  WHEN MAL_ID_CREDITO_GASTO THEN
    IF vMostrarOEscribir='E' THEN
      GNRL.ESCRIBIR_ERRORES('CNT-00062','(1,2,3,4,5,6,7,8,9)',vCmpCnt);  -- Mal ingresada la  Factura/Comp
      RETURN 0;
    ELSE
      QMS$ERRORS.SHOW_MESSAGE('CNT-00062','(1,2,3,4,5,6,7,8,9)',vCmpCnt);  -- Mal ingresada la  Factura/Comp
    END IF;
  WHEN MAL_TIPO_RF THEN
    IF vMostrarOEscribir='E' THEN
      GNRL.ESCRIBIR_ERRORES('CNT-00063',vParametroError,vCmpCnt);  -- Mal ingresada el Tipo de RF
      RETURN 0;
    ELSE
      QMS$ERRORS.SHOW_MESSAGE('CNT-00063',vParametroError,vCmpCnt);  -- Mal ingresada el Tipo de  RF
    END IF;
  WHEN MAL_NUMERO_NOTA THEN
    IF vMostrarOEscribir='E' THEN
      GNRL.ESCRIBIR_ERRORES('CNT-00065',vCmpCnt);  -- Mal ingresada No Nota
      RETURN 0;
    ELSE
      QMS$ERRORS.SHOW_MESSAGE('CNT-00065',vCmpCnt);  -- Mal ingresada No Nota
    END IF;
  WHEN MAL_FECHA_NOTA THEN
    IF vMostrarOEscribir='E' THEN
      GNRL.ESCRIBIR_ERRORES('CNT-00066',vParametroError,vCmpcnt);  -- Mal ingresada la fecha de  la nota
      RETURN 0;
    ELSE
      QMS$ERRORS.SHOW_MESSAGE('CNT-00066',vParametroError,vCmpcnt);  -- Mal ingresada la fecha de  la nota
    END IF;
  WHEN COMPROBANTE_REPETIDO THEN
    IF vMostrarOEscribir='E' THEN
      -- NO HACEMOS NADA Y SALIMOS
      RETURN 0;
    ELSE
      QMS$ERRORS.SHOW_MESSAGE('CNT-00084',vMensaje);  -- Comprobante duplicado
    END IF;
  WHEN MAL_TIPO_CMP_CON_IDCRDB THEN
    IF vMostrarOEscribir='E' THEN
      GNRL.ESCRIBIR_ERRORES('CNT-00080',nIDCredito_Gasto,vMensaje);  -- Mal ingresada el ID CREDITO GASTO
      RETURN 0;
    ELSE
      QMS$ERRORS.SHOW_MESSAGE('CNT-00080',nIDCredito_Gasto,vMensaje);  -- Mal ingresada el ID CREDITO GASTO
    END IF;
END;
END VALIDAR_DATOS_SRI;
